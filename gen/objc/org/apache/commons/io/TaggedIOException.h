//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/TaggedIOException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoTaggedIOException")
#ifdef RESTRICT_OrgApacheCommonsIoTaggedIOException
#define INCLUDE_ALL_OrgApacheCommonsIoTaggedIOException 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoTaggedIOException 1
#endif
#undef RESTRICT_OrgApacheCommonsIoTaggedIOException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoTaggedIOException_) && (INCLUDE_ALL_OrgApacheCommonsIoTaggedIOException || defined(INCLUDE_OrgApacheCommonsIoTaggedIOException))
#define OrgApacheCommonsIoTaggedIOException_

#define RESTRICT_OrgApacheCommonsIoIOExceptionWithCause 1
#define INCLUDE_OrgApacheCommonsIoIOExceptionWithCause 1
#include "org/apache/commons/io/IOExceptionWithCause.h"

@class JavaIoIOException;
@class JavaLangThrowable;
@protocol JavaIoSerializable;

/*!
 @brief An <code>IOException</code> decorator that adds a serializable tag to the
  wrapped exception.Both the tag and the original exception can be used
  to determine further processing when this exception is caught.
 @since 2.0
 */
@interface OrgApacheCommonsIoTaggedIOException : OrgApacheCommonsIoIOExceptionWithCause

#pragma mark Public

/*!
 @brief Creates a tagged wrapper for the given exception.
 @param original the exception to be tagged
 @param tag tag of this exception
 */
- (instancetype __nonnull)initWithJavaIoIOException:(JavaIoIOException *)original
                             withJavaIoSerializable:(id<JavaIoSerializable>)tag;

/*!
 @brief Returns the wrapped exception.The only difference to the overridden 
 <code>Throwable.getCause()</code> method is the narrower return type.
 @return wrapped exception
 */
- (JavaIoIOException *)getCause;

/*!
 @brief Returns the serializable tag object.
 @return tag object
 */
- (id<JavaIoSerializable>)getTag;

/*!
 @brief Checks whether the given throwable is tagged with the given tag.
 <p>
  This check can only succeed if the throwable is a 
 <code>TaggedIOException</code> and the tag is <code>Serializable</code>, but
  the argument types are intentionally more generic to make it easier
  to use this method without type casts. 
 <p>
  A typical use for this method is in a <code>catch</code> block to
  determine how a caught exception should be handled: 
 @code

  Serializable tag = ...;
  try {
      ...;
  } catch (Throwable t) {
      if (TaggedIOExcepton.isTaggedWith(t, tag)) {
          // special processing for tagged exception
      } else {
          // handling of other kinds of exceptions
      }    }    
  
@endcode
 @param throwable The Throwable object to check
 @param tag tag object
 @return <code>true</code> if the throwable has the specified tag,
  otherwise <code>false</code>
 */
+ (jboolean)isTaggedWithWithJavaLangThrowable:(JavaLangThrowable *)throwable
                                       withId:(id)tag;

/*!
 @brief Throws the original <code>IOException</code> if the given throwable is
  a <code>TaggedIOException</code> decorator the given tag.Does nothing
  if the given throwable is of a different type or if it is tagged
  with some other tag.
 <p>
  This method is typically used in a <code>catch</code> block to
  selectively rethrow tagged exceptions. 
 @code

  Serializable tag = ...;
  try {
      ...;
  } catch (Throwable t) {
      TaggedIOExcepton.throwCauseIfTagged(t, tag);
      // handle other kinds of exceptions
  } 
  
@endcode
 @param throwable an exception
 @param tag tag object
 @throw IOExceptionoriginal exception from the tagged decorator, if any
 */
+ (void)throwCauseIfTaggedWithWithJavaLangThrowable:(JavaLangThrowable *)throwable
                                             withId:(id)tag;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoTaggedIOException)

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoTaggedIOException_isTaggedWithWithJavaLangThrowable_withId_(JavaLangThrowable *throwable, id tag);

FOUNDATION_EXPORT void OrgApacheCommonsIoTaggedIOException_throwCauseIfTaggedWithWithJavaLangThrowable_withId_(JavaLangThrowable *throwable, id tag);

FOUNDATION_EXPORT void OrgApacheCommonsIoTaggedIOException_initWithJavaIoIOException_withJavaIoSerializable_(OrgApacheCommonsIoTaggedIOException *self, JavaIoIOException *original, id<JavaIoSerializable> tag);

FOUNDATION_EXPORT OrgApacheCommonsIoTaggedIOException *new_OrgApacheCommonsIoTaggedIOException_initWithJavaIoIOException_withJavaIoSerializable_(JavaIoIOException *original, id<JavaIoSerializable> tag) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoTaggedIOException *create_OrgApacheCommonsIoTaggedIOException_initWithJavaIoIOException_withJavaIoSerializable_(JavaIoIOException *original, id<JavaIoSerializable> tag);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoTaggedIOException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoTaggedIOException")
