//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FileCleaningTracker.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/PhantomReference.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/commons/io/FileCleaningTracker.h"
#include "org/apache/commons/io/FileDeleteStrategy.h"

__attribute__((unused)) static void OrgApacheCommonsIoFileCleaningTracker_addTrackerWithNSString_withId_withOrgApacheCommonsIoFileDeleteStrategy_(OrgApacheCommonsIoFileCleaningTracker *self, NSString *path, id marker, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy);

/*!
 @brief The reaper thread.
 */
@interface OrgApacheCommonsIoFileCleaningTracker_Reaper : JavaLangThread {
 @public
  OrgApacheCommonsIoFileCleaningTracker *this$0_;
}

/*!
 @brief Run the reaper thread that will delete files as their associated
  marker objects are reclaimed by the garbage collector.
 */
- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFileCleaningTracker_Reaper)

__attribute__((unused)) static void OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker_Reaper *self, OrgApacheCommonsIoFileCleaningTracker *outer$);

__attribute__((unused)) static OrgApacheCommonsIoFileCleaningTracker_Reaper *new_OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsIoFileCleaningTracker_Reaper *create_OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileCleaningTracker_Reaper)

/*!
 @brief Inner class which acts as the reference for a file pending deletion.
 */
@interface OrgApacheCommonsIoFileCleaningTracker_Tracker : JavaLangRefPhantomReference {
 @public
  /*!
   @brief The full path to the file being tracked.
   */
  NSString *path_;
  /*!
   @brief The strategy for deleting files.
   */
  OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy_;
}

/*!
 @brief Return the path.
 @return the path
 */
- (NSString *)getPath;

/*!
 @brief Deletes the file associated with this tracker instance.
 @return <code>true</code> if the file was deleted successfully;
          <code>false</code> otherwise.
 */
- (jboolean)delete__;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFileCleaningTracker_Tracker)

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker_Tracker, path_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker_Tracker, deleteStrategy_, OrgApacheCommonsIoFileDeleteStrategy *)

__attribute__((unused)) static void OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(OrgApacheCommonsIoFileCleaningTracker_Tracker *self, NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue);

__attribute__((unused)) static OrgApacheCommonsIoFileCleaningTracker_Tracker *new_OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsIoFileCleaningTracker_Tracker *create_OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileCleaningTracker_Tracker)

@implementation OrgApacheCommonsIoFileCleaningTracker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsIoFileCleaningTracker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)trackWithJavaIoFile:(JavaIoFile *)file
                     withId:(id)marker {
  [self trackWithJavaIoFile:file withId:marker withOrgApacheCommonsIoFileDeleteStrategy:nil];
}

- (void)trackWithJavaIoFile:(JavaIoFile *)file
                     withId:(id)marker
withOrgApacheCommonsIoFileDeleteStrategy:(OrgApacheCommonsIoFileDeleteStrategy *)deleteStrategy {
  if (file == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The file must not be null");
  }
  OrgApacheCommonsIoFileCleaningTracker_addTrackerWithNSString_withId_withOrgApacheCommonsIoFileDeleteStrategy_(self, [file getPath], marker, deleteStrategy);
}

- (void)trackWithNSString:(NSString *)path
                   withId:(id)marker {
  [self trackWithNSString:path withId:marker withOrgApacheCommonsIoFileDeleteStrategy:nil];
}

- (void)trackWithNSString:(NSString *)path
                   withId:(id)marker
withOrgApacheCommonsIoFileDeleteStrategy:(OrgApacheCommonsIoFileDeleteStrategy *)deleteStrategy {
  if (path == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The path must not be null");
  }
  OrgApacheCommonsIoFileCleaningTracker_addTrackerWithNSString_withId_withOrgApacheCommonsIoFileDeleteStrategy_(self, path, marker, deleteStrategy);
}

- (jint)getTrackCount {
  return [((id<JavaUtilCollection>) nil_chk(trackers_)) size];
}

- (id<JavaUtilList>)getDeleteFailures {
  return deleteFailures_;
}

- (void)exitWhenFinished {
  @synchronized(self) {
    JreAssignVolatileBoolean(&exitWhenFinished_, true);
    if (reaper_ != nil) {
      @synchronized(reaper_) {
        [reaper_ interrupt];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(q_);
  RELEASE_(trackers_);
  RELEASE_(deleteFailures_);
  RELEASE_(reaper_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFileCleaningTracker_init(OrgApacheCommonsIoFileCleaningTracker *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->q_, new_JavaLangRefReferenceQueue_init());
  JreStrongAssign(&self->trackers_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(create_JavaUtilHashSet_init()));
  JreStrongAssign(&self->deleteFailures_, JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilArrayList_init()));
  JreAssignVolatileBoolean(&self->exitWhenFinished_, false);
}

OrgApacheCommonsIoFileCleaningTracker *new_OrgApacheCommonsIoFileCleaningTracker_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFileCleaningTracker, init)
}

OrgApacheCommonsIoFileCleaningTracker *create_OrgApacheCommonsIoFileCleaningTracker_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFileCleaningTracker, init)
}

void OrgApacheCommonsIoFileCleaningTracker_addTrackerWithNSString_withId_withOrgApacheCommonsIoFileDeleteStrategy_(OrgApacheCommonsIoFileCleaningTracker *self, NSString *path, id marker, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy) {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&self->exitWhenFinished_)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"No new trackers can be added once exitWhenFinished() is called");
    }
    if (self->reaper_ == nil) {
      JreStrongAssignAndConsume(&self->reaper_, new_OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(self));
      [self->reaper_ start];
    }
    [((id<JavaUtilCollection>) nil_chk(self->trackers_)) addWithId:create_OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(path, deleteStrategy, marker, self->q_)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFileCleaningTracker)

@implementation OrgApacheCommonsIoFileCleaningTracker_Reaper

- (void)run {
  while (JreLoadVolatileBoolean(&this$0_->exitWhenFinished_) == false || [((id<JavaUtilCollection>) nil_chk(this$0_->trackers_)) size] > 0) {
    @try {
      OrgApacheCommonsIoFileCleaningTracker_Tracker *tracker = (OrgApacheCommonsIoFileCleaningTracker_Tracker *) cast_chk([((JavaLangRefReferenceQueue *) nil_chk(this$0_->q_)) remove], [OrgApacheCommonsIoFileCleaningTracker_Tracker class]);
      [((id<JavaUtilCollection>) nil_chk(this$0_->trackers_)) removeWithId:tracker];
      if (![((OrgApacheCommonsIoFileCleaningTracker_Tracker *) nil_chk(tracker)) delete__]) {
        [((id<JavaUtilList>) nil_chk(this$0_->deleteFailures_)) addWithId:[tracker getPath]];
      }
      [tracker clear];
    }
    @catch (JavaLangInterruptedException *e) {
      continue;
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker_Reaper *self, OrgApacheCommonsIoFileCleaningTracker *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_initWithNSString_(self, @"File Reaper");
  [self setPriorityWithInt:JavaLangThread_MAX_PRIORITY];
  [self setDaemonWithBoolean:true];
}

OrgApacheCommonsIoFileCleaningTracker_Reaper *new_OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFileCleaningTracker_Reaper, initWithOrgApacheCommonsIoFileCleaningTracker_, outer$)
}

OrgApacheCommonsIoFileCleaningTracker_Reaper *create_OrgApacheCommonsIoFileCleaningTracker_Reaper_initWithOrgApacheCommonsIoFileCleaningTracker_(OrgApacheCommonsIoFileCleaningTracker *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFileCleaningTracker_Reaper, initWithOrgApacheCommonsIoFileCleaningTracker_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFileCleaningTracker_Reaper)

@implementation OrgApacheCommonsIoFileCleaningTracker_Tracker

- (NSString *)getPath {
  return path_;
}

- (jboolean)delete__ {
  return [((OrgApacheCommonsIoFileDeleteStrategy *) nil_chk(deleteStrategy_)) deleteQuietlyWithJavaIoFile:create_JavaIoFile_initWithNSString_(path_)];
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgApacheCommonsIoFileCleaningTracker_Tracker class]);
  RELEASE_(path_);
  RELEASE_(deleteStrategy_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(OrgApacheCommonsIoFileCleaningTracker_Tracker *self, NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue) {
  JavaLangRefPhantomReference_initWithId_withJavaLangRefReferenceQueue_(self, marker, queue);
  JreStrongAssign(&self->path_, path);
  JreStrongAssign(&self->deleteStrategy_, deleteStrategy == nil ? JreLoadStatic(OrgApacheCommonsIoFileDeleteStrategy, NORMAL) : deleteStrategy);
}

OrgApacheCommonsIoFileCleaningTracker_Tracker *new_OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFileCleaningTracker_Tracker, initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_, path, deleteStrategy, marker, queue)
}

OrgApacheCommonsIoFileCleaningTracker_Tracker *create_OrgApacheCommonsIoFileCleaningTracker_Tracker_initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_(NSString *path, OrgApacheCommonsIoFileDeleteStrategy *deleteStrategy, id marker, JavaLangRefReferenceQueue *queue) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFileCleaningTracker_Tracker, initWithNSString_withOrgApacheCommonsIoFileDeleteStrategy_withId_withJavaLangRefReferenceQueue_, path, deleteStrategy, marker, queue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFileCleaningTracker_Tracker)
