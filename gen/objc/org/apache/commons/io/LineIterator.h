//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/LineIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoLineIterator")
#ifdef RESTRICT_OrgApacheCommonsIoLineIterator
#define INCLUDE_ALL_OrgApacheCommonsIoLineIterator 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoLineIterator 1
#endif
#undef RESTRICT_OrgApacheCommonsIoLineIterator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoLineIterator_) && (INCLUDE_ALL_OrgApacheCommonsIoLineIterator || defined(INCLUDE_OrgApacheCommonsIoLineIterator))
#define OrgApacheCommonsIoLineIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaIoReader;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief An Iterator over the lines in a <code>Reader</code>.
 <p>
  <code>LineIterator</code> holds a reference to an open <code>Reader</code>.
  When you have finished with the iterator you should close the reader
  to free internal resources. This can be done by closing the reader directly,
  or by calling the <code>close()</code> or <code>closeQuietly(LineIterator)</code>
  method on the iterator. 
 <p>
  The recommended usage pattern is: 
 @code

  LineIterator it = FileUtils.lineIterator(file, "UTF-8");
  try {
    while (it.hasNext()) {
      String line = it.nextLine();
      // do something with line
    }
  } finally {
    it.close();
  } 
  
@endcode
 @version $Id$
 @since 1.2
 */
@interface OrgApacheCommonsIoLineIterator : NSObject < JavaUtilIterator >

#pragma mark Public

/*!
 @brief Constructs an iterator of the lines for a <code>Reader</code>.
 @param reader the  <code> Reader </code>  to read from, not null
 @throw IllegalArgumentExceptionif the reader is null
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Closes the underlying <code>Reader</code> quietly.
 This method is useful if you only want to process the first few
  lines of a larger file. If you do not close the iterator
  then the <code>Reader</code> remains open.
  This method can safely be called multiple times.
 */
- (void)close;

/*!
 @brief Closes the iterator, handling null and ignoring exceptions.
 @param iterator the iterator to close
 */
+ (void)closeQuietlyWithOrgApacheCommonsIoLineIterator:(OrgApacheCommonsIoLineIterator *)iterator;

/*!
 @brief Indicates whether the <code>Reader</code> has more lines.
 If there is an <code>IOException</code> then <code>close()</code> will
  be called on this instance.
 @return <code>true</code> if the Reader has more lines
 @throw IllegalStateExceptionif an IO exception occurs
 */
- (jboolean)hasNext;

/*!
 @brief Returns the next line in the wrapped <code>Reader</code>.
 @return the next line from the input
 @throw NoSuchElementExceptionif there is no line to return
 */
- (NSString *)next;

/*!
 @brief Returns the next line in the wrapped <code>Reader</code>.
 @return the next line from the input
 @throw NoSuchElementExceptionif there is no line to return
 */
- (NSString *)nextLine;

/*!
 @brief Unsupported.
 @throw UnsupportedOperationExceptionalways
 */
- (void)remove;

#pragma mark Protected

/*!
 @brief Overridable method to validate each line that is returned.
 This implementation always returns true.
 @param line the line that is to be validated
 @return true if valid, false to remove from the iterator
 */
- (jboolean)isValidLineWithNSString:(NSString *)line;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoLineIterator)

FOUNDATION_EXPORT void OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(OrgApacheCommonsIoLineIterator *self, JavaIoReader *reader);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *new_OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(JavaIoReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *create_OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT void OrgApacheCommonsIoLineIterator_closeQuietlyWithOrgApacheCommonsIoLineIterator_(OrgApacheCommonsIoLineIterator *iterator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoLineIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoLineIterator")
