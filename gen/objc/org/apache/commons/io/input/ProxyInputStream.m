//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ProxyInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/apache/commons/io/input/ProxyInputStream.h"

@implementation OrgApacheCommonsIoInputProxyInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)proxy {
  OrgApacheCommonsIoInputProxyInputStream_initWithJavaIoInputStream_(self, proxy);
  return self;
}

- (jint)read {
  @try {
    [self beforeReadWithInt:1];
    jint b = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
    [self afterReadWithInt:b != -1 ? 1 : -1];
    return b;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)bts {
  @try {
    [self beforeReadWithInt:bts != nil ? bts->size_ : 0];
    jint n = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:bts];
    [self afterReadWithInt:n];
    return n;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)bts
                  withInt:(jint)off
                  withInt:(jint)len {
  @try {
    [self beforeReadWithInt:len];
    jint n = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:bts withInt:off withInt:len];
    [self afterReadWithInt:n];
    return n;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jlong)skipWithLong:(jlong)ln {
  @try {
    return [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) skipWithLong:ln];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return 0;
  }
}

- (jint)available {
  @try {
    return [super available];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return 0;
  }
}

- (void)close {
  @try {
    [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) close];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)markWithInt:(jint)readlimit {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) markWithInt:readlimit];
  }
}

- (void)reset {
  @synchronized(self) {
    @try {
      [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) reset];
    }
    @catch (JavaIoIOException *e) {
      [self handleIOExceptionWithJavaIoIOException:e];
    }
  }
}

- (jboolean)markSupported {
  return [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) markSupported];
}

- (void)beforeReadWithInt:(jint)n {
}

- (void)afterReadWithInt:(jint)n {
}

- (void)handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  @throw nil_chk(e);
}

@end

void OrgApacheCommonsIoInputProxyInputStream_initWithJavaIoInputStream_(OrgApacheCommonsIoInputProxyInputStream *self, JavaIoInputStream *proxy) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, proxy);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputProxyInputStream)
