//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReaderException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReaderException")
#ifdef RESTRICT_OrgApacheCommonsIoInputXmlStreamReaderException
#define INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReaderException 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReaderException 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputXmlStreamReaderException

#if !defined (OrgApacheCommonsIoInputXmlStreamReaderException_) && (INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReaderException || defined(INCLUDE_OrgApacheCommonsIoInputXmlStreamReaderException))
#define OrgApacheCommonsIoInputXmlStreamReaderException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@class JavaLangThrowable;

/*!
 @brief The XmlStreamReaderException is thrown by the XmlStreamReader constructors if
  the charset encoding can not be determined according to the XML 1.0
  specification and RFC 3023.
 <p>
  The exception returns the unconsumed InputStream to allow the application to
  do an alternate processing with the stream. Note that the original
  InputStream given to the XmlStreamReader cannot be used as that one has been
  already read.
 @version $Id$
 @since 2.0
 */
@interface OrgApacheCommonsIoInputXmlStreamReaderException : JavaIoIOException

#pragma mark Public

/*!
 @brief Creates an exception instance if the charset encoding could not be
  determined.
 <p>
  Instances of this exception are thrown by the XmlStreamReader.
 @param msg message describing the reason for the exception.
 @param bomEnc BOM encoding.
 @param xmlGuessEnc XML guess encoding.
 @param xmlEnc XML prolog encoding.
 */
- (instancetype)initWithNSString:(NSString *)msg
                    withNSString:(NSString *)bomEnc
                    withNSString:(NSString *)xmlGuessEnc
                    withNSString:(NSString *)xmlEnc;

/*!
 @brief Creates an exception instance if the charset encoding could not be
  determined.
 <p>
  Instances of this exception are thrown by the XmlStreamReader.
 @param msg message describing the reason for the exception.
 @param ctMime MIME type in the content-type.
 @param ctEnc encoding in the content-type.
 @param bomEnc BOM encoding.
 @param xmlGuessEnc XML guess encoding.
 @param xmlEnc XML prolog encoding.
 */
- (instancetype)initWithNSString:(NSString *)msg
                    withNSString:(NSString *)ctMime
                    withNSString:(NSString *)ctEnc
                    withNSString:(NSString *)bomEnc
                    withNSString:(NSString *)xmlGuessEnc
                    withNSString:(NSString *)xmlEnc;

/*!
 @brief Returns the BOM encoding found in the InputStream.
 @return the BOM encoding, null if none.
 */
- (NSString *)getBomEncoding;

/*!
 @brief Returns the encoding in the content-type used to attempt determining the
  encoding.
 @return the encoding in the content-type, null if there was not
          content-type, no encoding in it or the encoding detection did not
          involve HTTP.
 */
- (NSString *)getContentTypeEncoding;

/*!
 @brief Returns the MIME type in the content-type used to attempt determining the
  encoding.
 @return the MIME type in the content-type, null if there was not
          content-type or the encoding detection did not involve HTTP.
 */
- (NSString *)getContentTypeMime;

/*!
 @brief Returns the encoding found in the XML prolog of the InputStream.
 @return the encoding of the XML prolog, null if none.
 */
- (NSString *)getXmlEncoding;

/*!
 @brief Returns the encoding guess based on the first bytes of the InputStream.
 @return the encoding guess, null if it couldn't be guessed.
 */
- (NSString *)getXmlGuessEncoding;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputXmlStreamReaderException)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_(OrgApacheCommonsIoInputXmlStreamReaderException *self, NSString *msg, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReaderException *new_OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_(NSString *msg, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReaderException *create_OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_(NSString *msg, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(OrgApacheCommonsIoInputXmlStreamReaderException *self, NSString *msg, NSString *ctMime, NSString *ctEnc, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReaderException *new_OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *msg, NSString *ctMime, NSString *ctEnc, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReaderException *create_OrgApacheCommonsIoInputXmlStreamReaderException_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *msg, NSString *ctMime, NSString *ctEnc, NSString *bomEnc, NSString *xmlGuessEnc, NSString *xmlEnc);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputXmlStreamReaderException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReaderException")
