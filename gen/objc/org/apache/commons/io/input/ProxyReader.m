//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ProxyReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/nio/CharBuffer.h"
#include "org/apache/commons/io/input/ProxyReader.h"

@implementation OrgApacheCommonsIoInputProxyReader

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)proxy {
  OrgApacheCommonsIoInputProxyReader_initWithJavaIoReader_(self, proxy);
  return self;
}

- (jint)read {
  @try {
    [self beforeReadWithInt:1];
    jint c = [((JavaIoReader *) nil_chk(in_)) read];
    [self afterReadWithInt:c != -1 ? 1 : -1];
    return c;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jint)readWithCharArray:(IOSCharArray *)chr {
  @try {
    [self beforeReadWithInt:chr != nil ? chr->size_ : 0];
    jint n = [((JavaIoReader *) nil_chk(in_)) readWithCharArray:chr];
    [self afterReadWithInt:n];
    return n;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jint)readWithCharArray:(IOSCharArray *)chr
                  withInt:(jint)st
                  withInt:(jint)len {
  @try {
    [self beforeReadWithInt:len];
    jint n = [((JavaIoReader *) nil_chk(in_)) readWithCharArray:chr withInt:st withInt:len];
    [self afterReadWithInt:n];
    return n;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jint)readWithJavaNioCharBuffer:(JavaNioCharBuffer *)target {
  @try {
    [self beforeReadWithInt:target != nil ? [target java_length] : 0];
    jint n = [((JavaIoReader *) nil_chk(in_)) readWithJavaNioCharBuffer:target];
    [self afterReadWithInt:n];
    return n;
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return -1;
  }
}

- (jlong)skipWithLong:(jlong)ln {
  @try {
    return [((JavaIoReader *) nil_chk(in_)) skipWithLong:ln];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return 0;
  }
}

- (jboolean)ready {
  @try {
    return [((JavaIoReader *) nil_chk(in_)) ready];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
    return false;
  }
}

- (void)close {
  @try {
    [((JavaIoReader *) nil_chk(in_)) close];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)markWithInt:(jint)idx {
  @synchronized(self) {
    @try {
      [((JavaIoReader *) nil_chk(in_)) markWithInt:idx];
    }
    @catch (JavaIoIOException *e) {
      [self handleIOExceptionWithJavaIoIOException:e];
    }
  }
}

- (void)reset {
  @synchronized(self) {
    @try {
      [((JavaIoReader *) nil_chk(in_)) reset];
    }
    @catch (JavaIoIOException *e) {
      [self handleIOExceptionWithJavaIoIOException:e];
    }
  }
}

- (jboolean)markSupported {
  return [((JavaIoReader *) nil_chk(in_)) markSupported];
}

- (void)beforeReadWithInt:(jint)n {
}

- (void)afterReadWithInt:(jint)n {
}

- (void)handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  @throw nil_chk(e);
}

@end

void OrgApacheCommonsIoInputProxyReader_initWithJavaIoReader_(OrgApacheCommonsIoInputProxyReader *self, JavaIoReader *proxy) {
  JavaIoFilterReader_initWithJavaIoReader_(self, proxy);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputProxyReader)
