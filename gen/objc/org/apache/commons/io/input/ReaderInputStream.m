//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "org/apache/commons/io/input/ReaderInputStream.h"

@interface OrgApacheCommonsIoInputReaderInputStream () {
 @public
  JavaIoReader *reader_;
  JavaNioCharsetCharsetEncoder *encoder_;
  /*!
   @brief CharBuffer used as input for the decoder.It should be reasonably
  large as we read data from the underlying Reader into this buffer.
   */
  JavaNioCharBuffer *encoderIn_;
  /*!
   @brief ByteBuffer used as output for the decoder.This buffer can be small
  as it is only used to transfer data from the decoder to the
  buffer provided by the caller.
   */
  JavaNioByteBuffer *encoderOut_;
  JavaNioCharsetCoderResult *lastCoderResult_;
  jboolean endOfInput_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReaderInputStream, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReaderInputStream, encoder_, JavaNioCharsetCharsetEncoder *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReaderInputStream, encoderIn_, JavaNioCharBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReaderInputStream, encoderOut_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReaderInputStream, lastCoderResult_, JavaNioCharsetCoderResult *)

inline jint OrgApacheCommonsIoInputReaderInputStream_get_DEFAULT_BUFFER_SIZE(void);
#define OrgApacheCommonsIoInputReaderInputStream_DEFAULT_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoInputReaderInputStream, DEFAULT_BUFFER_SIZE, jint)

__attribute__((unused)) static void OrgApacheCommonsIoInputReaderInputStream_fillBuffer(OrgApacheCommonsIoInputReaderInputStream *self);

@implementation OrgApacheCommonsIoInputReaderInputStream

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
    withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoder {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(self, reader, encoder);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
    withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoder
                             withInt:(jint)bufferSize {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(self, reader, encoder, bufferSize);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                             withInt:(jint)bufferSize {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(self, reader, charset, bufferSize);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(self, reader, charset);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                        withNSString:(NSString *)charsetName
                             withInt:(jint)bufferSize {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(self, reader, charsetName, bufferSize);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                        withNSString:(NSString *)charsetName {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(self, reader, charsetName);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(self, reader);
  return self;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (b == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Byte array must not be null");
  }
  if (len < 0 || off < 0 || (off + len) > b->size_) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I", @"Array Size=", b->size_, @", offset=", off, @", length=", len));
  }
  jint read = 0;
  if (len == 0) {
    return 0;
  }
  while (len > 0) {
    if ([((JavaNioByteBuffer *) nil_chk(encoderOut_)) hasRemaining]) {
      jint c = JavaLangMath_minWithInt_withInt_([encoderOut_ remaining], len);
      [encoderOut_ getWithByteArray:b withInt:off withInt:c];
      off += c;
      len -= c;
      read += c;
    }
    else {
      OrgApacheCommonsIoInputReaderInputStream_fillBuffer(self);
      if (endOfInput_ && ![encoderOut_ hasRemaining]) {
        break;
      }
    }
  }
  return read == 0 && endOfInput_ ? -1 : read;
}

- (jint)readWithByteArray:(IOSByteArray *)b {
  return [self readWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (jint)read {
  for (; ; ) {
    if ([((JavaNioByteBuffer *) nil_chk(encoderOut_)) hasRemaining]) {
      return [encoderOut_ get] & (jint) 0xFF;
    }
    else {
      OrgApacheCommonsIoInputReaderInputStream_fillBuffer(self);
      if (endOfInput_ && ![encoderOut_ hasRemaining]) {
        return -1;
      }
    }
  }
}

- (void)close {
  [((JavaIoReader *) nil_chk(reader_)) close];
}

- (void)dealloc {
  RELEASE_(reader_);
  RELEASE_(encoder_);
  RELEASE_(encoderIn_);
  RELEASE_(encoderOut_);
  RELEASE_(lastCoderResult_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(self, reader, encoder, OrgApacheCommonsIoInputReaderInputStream_DEFAULT_BUFFER_SIZE);
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_, reader, encoder)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_, reader, encoder)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  JavaIoInputStream_init(self);
  JreStrongAssign(&self->reader_, reader);
  JreStrongAssign(&self->encoder_, encoder);
  JreStrongAssign(&self->encoderIn_, JavaNioCharBuffer_allocateWithInt_(bufferSize));
  [((JavaNioCharBuffer *) nil_chk(self->encoderIn_)) flip];
  JreStrongAssign(&self->encoderOut_, JavaNioByteBuffer_allocateWithInt_(128));
  [((JavaNioByteBuffer *) nil_chk(self->encoderOut_)) flip];
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_, reader, encoder, bufferSize)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_, reader, encoder, bufferSize)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(self, reader, [((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newEncoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)], bufferSize);
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_withInt_, reader, charset, bufferSize)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_withInt_, reader, charset, bufferSize)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(self, reader, charset, OrgApacheCommonsIoInputReaderInputStream_DEFAULT_BUFFER_SIZE);
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(JavaIoReader *reader, JavaNioCharsetCharset *charset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_, reader, charset)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(JavaIoReader *reader, JavaNioCharsetCharset *charset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_, reader, charset)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, NSString *charsetName, jint bufferSize) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(self, reader, JavaNioCharsetCharset_forNameWithNSString_(charsetName), bufferSize);
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(JavaIoReader *reader, NSString *charsetName, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withNSString_withInt_, reader, charsetName, bufferSize)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(JavaIoReader *reader, NSString *charsetName, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withNSString_withInt_, reader, charsetName, bufferSize)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, NSString *charsetName) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(self, reader, charsetName, OrgApacheCommonsIoInputReaderInputStream_DEFAULT_BUFFER_SIZE);
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *charsetName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withNSString_, reader, charsetName)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *charsetName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_withNSString_, reader, charsetName)
}

void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader) {
  OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(self, reader, JavaNioCharsetCharset_defaultCharset());
}

OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_, reader)
}

OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReaderInputStream, initWithJavaIoReader_, reader)
}

void OrgApacheCommonsIoInputReaderInputStream_fillBuffer(OrgApacheCommonsIoInputReaderInputStream *self) {
  if (!self->endOfInput_ && (self->lastCoderResult_ == nil || [self->lastCoderResult_ isUnderflow])) {
    [((JavaNioCharBuffer *) nil_chk(self->encoderIn_)) compact];
    jint position = [self->encoderIn_ position];
    jint c = [((JavaIoReader *) nil_chk(self->reader_)) readWithCharArray:[self->encoderIn_ array] withInt:position withInt:[self->encoderIn_ remaining]];
    if (c == -1) {
      self->endOfInput_ = true;
    }
    else {
      [self->encoderIn_ positionWithInt:position + c];
    }
    [self->encoderIn_ flip];
  }
  [((JavaNioByteBuffer *) nil_chk(self->encoderOut_)) compact];
  JreStrongAssign(&self->lastCoderResult_, [((JavaNioCharsetCharsetEncoder *) nil_chk(self->encoder_)) encodeWithJavaNioCharBuffer:self->encoderIn_ withJavaNioByteBuffer:self->encoderOut_ withBoolean:self->endOfInput_]);
  [self->encoderOut_ flip];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputReaderInputStream)
