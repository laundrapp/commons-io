//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/CharSequenceReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "org/apache/commons/io/input/CharSequenceReader.h"

@interface OrgApacheCommonsIoInputCharSequenceReader () {
 @public
  id<JavaLangCharSequence> charSequence_;
  jint idx_;
  jint mark_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputCharSequenceReader, charSequence_, id<JavaLangCharSequence>)

@implementation OrgApacheCommonsIoInputCharSequenceReader

- (instancetype __nonnull)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSequence {
  OrgApacheCommonsIoInputCharSequenceReader_initWithJavaLangCharSequence_(self, charSequence);
  return self;
}

- (void)close {
  idx_ = 0;
  mark_ = 0;
}

- (void)markWithInt:(jint)readAheadLimit {
  mark_ = idx_;
}

- (jboolean)markSupported {
  return true;
}

- (jint)read {
  if (idx_ >= [((id<JavaLangCharSequence>) nil_chk(charSequence_)) java_length]) {
    return -1;
  }
  else {
    return [charSequence_ charAtWithInt:idx_++];
  }
}

- (jint)readWithCharArray:(IOSCharArray *)array
                  withInt:(jint)offset
                  withInt:(jint)length {
  if (idx_ >= [((id<JavaLangCharSequence>) nil_chk(charSequence_)) java_length]) {
    return -1;
  }
  if (array == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Character array is missing");
  }
  if (length < 0 || offset < 0 || offset + length > array->size_) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I", @"Array Size=", array->size_, @", offset=", offset, @", length=", length));
  }
  jint count = 0;
  for (jint i = 0; i < length; i++) {
    jint c = [self read];
    if (c == -1) {
      return count;
    }
    *IOSCharArray_GetRef(array, offset + i) = (jchar) c;
    count++;
  }
  return count;
}

- (void)reset {
  idx_ = mark_;
}

- (jlong)skipWithLong:(jlong)n {
  if (n < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"Number of characters to skip is less than zero: ", n));
  }
  if (idx_ >= [((id<JavaLangCharSequence>) nil_chk(charSequence_)) java_length]) {
    return -1;
  }
  jint dest = (jint) JavaLangMath_minWithLong_withLong_([charSequence_ java_length], idx_ + n);
  jint count = dest - idx_;
  idx_ = dest;
  return count;
}

- (NSString *)description {
  return [((id<JavaLangCharSequence>) nil_chk(charSequence_)) description];
}

- (void)dealloc {
  RELEASE_(charSequence_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputCharSequenceReader_initWithJavaLangCharSequence_(OrgApacheCommonsIoInputCharSequenceReader *self, id<JavaLangCharSequence> charSequence) {
  JavaIoReader_init(self);
  JreStrongAssign(&self->charSequence_, charSequence != nil ? charSequence : (id) @"");
}

OrgApacheCommonsIoInputCharSequenceReader *new_OrgApacheCommonsIoInputCharSequenceReader_initWithJavaLangCharSequence_(id<JavaLangCharSequence> charSequence) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputCharSequenceReader, initWithJavaLangCharSequence_, charSequence)
}

OrgApacheCommonsIoInputCharSequenceReader *create_OrgApacheCommonsIoInputCharSequenceReader_initWithJavaLangCharSequence_(id<JavaLangCharSequence> charSequence) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputCharSequenceReader, initWithJavaLangCharSequence_, charSequence)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputCharSequenceReader)
