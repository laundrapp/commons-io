//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectStreamClass.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/reflect/Proxy.h"
#include "org/apache/commons/io/input/ClassLoaderObjectInputStream.h"

@interface OrgApacheCommonsIoInputClassLoaderObjectInputStream () {
 @public
  /*!
   @brief The class loader to use.
   */
  JavaLangClassLoader *classLoader_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputClassLoaderObjectInputStream, classLoader_, JavaLangClassLoader *)

@implementation OrgApacheCommonsIoInputClassLoaderObjectInputStream

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                      withJavaIoInputStream:(JavaIoInputStream *)inputStream {
  OrgApacheCommonsIoInputClassLoaderObjectInputStream_initWithJavaLangClassLoader_withJavaIoInputStream_(self, classLoader, inputStream);
  return self;
}

- (IOSClass *)resolveClassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)objectStreamClass {
  IOSClass *clazz = IOSClass_forName_initialize_classLoader_([((JavaIoObjectStreamClass *) nil_chk(objectStreamClass)) getName], false, classLoader_);
  if (clazz != nil) {
    return clazz;
  }
  else {
    return [super resolveClassWithJavaIoObjectStreamClass:objectStreamClass];
  }
}

- (IOSClass *)resolveProxyClassWithNSStringArray:(IOSObjectArray *)interfaces {
  IOSObjectArray *interfaceClasses = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(interfaces))->size_ type:IOSClass_class_()];
  for (jint i = 0; i < interfaces->size_; i++) {
    IOSObjectArray_Set(interfaceClasses, i, IOSClass_forName_initialize_classLoader_(IOSObjectArray_Get(interfaces, i), false, classLoader_));
  }
  @try {
    return JavaLangReflectProxy_getProxyClassWithJavaLangClassLoader_withIOSClassArray_(classLoader_, interfaceClasses);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    return [super resolveProxyClassWithNSStringArray:interfaces];
  }
}

- (void)dealloc {
  RELEASE_(classLoader_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputClassLoaderObjectInputStream_initWithJavaLangClassLoader_withJavaIoInputStream_(OrgApacheCommonsIoInputClassLoaderObjectInputStream *self, JavaLangClassLoader *classLoader, JavaIoInputStream *inputStream) {
  JavaIoObjectInputStream_initWithJavaIoInputStream_(self, inputStream);
  JreStrongAssign(&self->classLoader_, classLoader);
}

OrgApacheCommonsIoInputClassLoaderObjectInputStream *new_OrgApacheCommonsIoInputClassLoaderObjectInputStream_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *classLoader, JavaIoInputStream *inputStream) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputClassLoaderObjectInputStream, initWithJavaLangClassLoader_withJavaIoInputStream_, classLoader, inputStream)
}

OrgApacheCommonsIoInputClassLoaderObjectInputStream *create_OrgApacheCommonsIoInputClassLoaderObjectInputStream_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *classLoader, JavaIoInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputClassLoaderObjectInputStream, initWithJavaLangClassLoader_withJavaIoInputStream_, classLoader, inputStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputClassLoaderObjectInputStream)
