//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/AutoCloseInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputAutoCloseInputStream")
#ifdef RESTRICT_OrgApacheCommonsIoInputAutoCloseInputStream
#define INCLUDE_ALL_OrgApacheCommonsIoInputAutoCloseInputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputAutoCloseInputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputAutoCloseInputStream

#if !defined (OrgApacheCommonsIoInputAutoCloseInputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoInputAutoCloseInputStream || defined(INCLUDE_OrgApacheCommonsIoInputAutoCloseInputStream))
#define OrgApacheCommonsIoInputAutoCloseInputStream_

#define RESTRICT_OrgApacheCommonsIoInputProxyInputStream 1
#define INCLUDE_OrgApacheCommonsIoInputProxyInputStream 1
#include "org/apache/commons/io/input/ProxyInputStream.h"

@class JavaIoInputStream;

/*!
 @brief Proxy stream that closes and discards the underlying stream as soon as the
  end of input has been reached or when the stream is explicitly closed.
 Not even a reference to the underlying stream is kept after it has been
  closed, so any allocated in-memory buffers can be freed even if the
  client application still keeps a reference to the proxy stream. 
 <p>
  This class is typically used to release any resources related to an open
  stream as soon as possible even if the client application (by not explicitly
  closing the stream when no longer needed) or the underlying stream (by not
  releasing resources once the last byte has been read) do not do that.
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoInputAutoCloseInputStream : OrgApacheCommonsIoInputProxyInputStream

#pragma mark Public

/*!
 @brief Creates an automatically closing proxy for the given input stream.
 @param inArg underlying input stream
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Closes the underlying input stream and replaces the reference to it
  with a <code>ClosedInputStream</code> instance.
 <p>
  This method is automatically called by the read methods when the end
  of input has been reached. 
 <p>
  Note that it is safe to call this method any number of times. The original
  underlying input stream is closed and discarded only once when this
  method is first called.
 @throw IOExceptionif the underlying input stream can not be closed
 */
- (void)close;

#pragma mark Protected

/*!
 @brief Automatically closes the stream if the end of stream was reached.
 @param n number of bytes read, or -1 if no more bytes are available
 @throw IOExceptionif the stream could not be closed
 @since 2.0
 */
- (void)afterReadWithInt:(jint)n;

/*!
 @brief Ensures that the stream is closed before it gets garbage-collected.
 As mentioned in <code>close()</code>, this is a no-op if the stream has
  already been closed.
 @throw Throwableif an error occurs
 */
- (void)java_finalize;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputAutoCloseInputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputAutoCloseInputStream_initWithJavaIoInputStream_(OrgApacheCommonsIoInputAutoCloseInputStream *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT OrgApacheCommonsIoInputAutoCloseInputStream *new_OrgApacheCommonsIoInputAutoCloseInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputAutoCloseInputStream *create_OrgApacheCommonsIoInputAutoCloseInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputAutoCloseInputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputAutoCloseInputStream")
