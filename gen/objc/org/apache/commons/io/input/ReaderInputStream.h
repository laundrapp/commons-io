//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputReaderInputStream")
#ifdef RESTRICT_OrgApacheCommonsIoInputReaderInputStream
#define INCLUDE_ALL_OrgApacheCommonsIoInputReaderInputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputReaderInputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputReaderInputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoInputReaderInputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoInputReaderInputStream || defined(INCLUDE_OrgApacheCommonsIoInputReaderInputStream))
#define OrgApacheCommonsIoInputReaderInputStream_

#define RESTRICT_JavaIoInputStream 1
#define INCLUDE_JavaIoInputStream 1
#include "java/io/InputStream.h"

@class IOSByteArray;
@class JavaIoReader;
@class JavaNioCharsetCharset;
@class JavaNioCharsetCharsetEncoder;

/*!
 @brief <code>InputStream</code> implementation that reads a character stream from a <code>Reader</code>
  and transforms it to a byte stream using a specified charset encoding.The stream
  is transformed using a <code>CharsetEncoder</code> object, guaranteeing that all charset
  encodings supported by the JRE are handled correctly.
 In particular for charsets such as
  UTF-16, the implementation ensures that one and only one byte order marker
  is produced. 
 <p>
  Since in general it is not possible to predict the number of characters to be read from the 
 <code>Reader</code> to satisfy a read request on the <code>ReaderInputStream</code>, all reads from
  the <code>Reader</code> are buffered. There is therefore no well defined correlation
  between the current position of the <code>Reader</code> and that of the <code>ReaderInputStream</code>.
  This also implies that in general there is no need to wrap the underlying <code>Reader</code>
  in a <code>java.io.BufferedReader</code>.
  <p>
  <code>ReaderInputStream</code> implements the inverse transformation of <code>java.io.InputStreamReader</code>;
  in the following example, reading from <tt>in2</tt> would return the same byte
  sequence as reading from <tt>in</tt> (provided that the initial byte sequence is legal
  with respect to the charset encoding): 
 @code

  InputStream in = ...
  Charset cs = ...
  InputStreamReader reader = new InputStreamReader(in, cs);
  ReaderInputStream in2 = new ReaderInputStream(reader, cs);
@endcode
  <code>ReaderInputStream</code> implements the same transformation as <code>java.io.OutputStreamWriter</code>,
  except that the control flow is reversed: both classes transform a character stream
  into a byte stream, but <code>java.io.OutputStreamWriter</code> pushes data to the underlying stream,
  while <code>ReaderInputStream</code> pulls it from the underlying stream. 
 <p>
  Note that while there are use cases where there is no alternative to using
  this class, very often the need to use this class is an indication of a flaw
  in the design of the code. This class is typically used in situations where an existing
  API only accepts an <code>InputStream</code>, but where the most natural way to produce the data
  is as a character stream, i.e. by providing a <code>Reader</code> instance. An example of a situation
  where this problem may appear is when implementing the <code>javax.activation.DataSource</code>
  interface from the Java Activation Framework. 
 <p>
  Given the fact that the <code>Reader</code> class doesn't provide any way to predict whether the next
  read operation will block or not, it is not possible to provide a meaningful
  implementation of the <code>InputStream.available()</code> method. A call to this method
  will always return 0. Also, this class doesn't support <code>InputStream.mark(int)</code>.
  <p>
  Instances of <code>ReaderInputStream</code> are not thread safe.
 - seealso: org.apache.commons.io.output.WriterOutputStream
 @since 2.0
 */
@interface OrgApacheCommonsIoInputReaderInputStream : JavaIoInputStream

#pragma mark Public

/*!
 @brief Construct a new <code>ReaderInputStream</code> that uses the default character encoding
  with a default input buffer size of 1024 characters.
 @param reader the target <code>Reader</code>
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Construct a new <code>ReaderInputStream</code> with a default input buffer size of
  1024 characters.
 @param reader the target <code>Reader</code>
 @param charset the charset encoding
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                     withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Construct a new <code>ReaderInputStream</code>.
 @param reader the target <code>Reader</code>
 @param charset the charset encoding
 @param bufferSize the size of the input buffer in number of characters
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                     withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                                       withInt:(jint)bufferSize;

/*!
 @brief Construct a new <code>ReaderInputStream</code>.
 @param reader the target <code>Reader</code>
 @param encoder the charset encoder
 @since 2.1
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
              withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoder;

/*!
 @brief Construct a new <code>ReaderInputStream</code>.
 @param reader the target <code>Reader</code>
 @param encoder the charset encoder
 @param bufferSize the size of the input buffer in number of characters
 @since 2.1
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
              withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoder
                                       withInt:(jint)bufferSize;

/*!
 @brief Construct a new <code>ReaderInputStream</code> with a default input buffer size of
  1024 characters.
 @param reader the target <code>Reader</code>
 @param charsetName the name of the charset encoding
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                                  withNSString:(NSString *)charsetName;

/*!
 @brief Construct a new <code>ReaderInputStream</code>.
 @param reader the target <code>Reader</code>
 @param charsetName the name of the charset encoding
 @param bufferSize the size of the input buffer in number of characters
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader
                                  withNSString:(NSString *)charsetName
                                       withInt:(jint)bufferSize;

/*!
 @brief Close the stream.This method will cause the underlying <code>Reader</code>
  to be closed.
 @throw IOExceptionif an I/O error occurs
 */
- (void)close;

/*!
 @brief Read a single byte.
 @return either the byte read or <code>-1</code> if the end of the stream
          has been reached
 @throw IOExceptionif an I/O error occurs
 */
- (jint)read;

/*!
 @brief Read the specified number of bytes into an array.
 @param b the byte array to read into
 @return the number of bytes read or <code>-1</code>
          if the end of the stream has been reached
 @throw IOExceptionif an I/O error occurs
 */
- (jint)readWithByteArray:(IOSByteArray *)b;

/*!
 @brief Read the specified number of bytes into an array.
 @param b the byte array to read into
 @param off the offset to start reading bytes into
 @param len the number of bytes to read
 @return the number of bytes read or <code>-1</code>
          if the end of the stream has been reached
 @throw IOExceptionif an I/O error occurs
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputReaderInputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(JavaIoReader *reader, JavaNioCharsetCharset *charset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_(JavaIoReader *reader, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, NSString *charsetName, jint bufferSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(JavaIoReader *reader, NSString *charsetName, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_withInt_(JavaIoReader *reader, NSString *charsetName, jint bufferSize);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader, NSString *charsetName);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *charsetName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *charsetName);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(OrgApacheCommonsIoInputReaderInputStream *self, JavaIoReader *reader);

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *new_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputReaderInputStream *create_OrgApacheCommonsIoInputReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputReaderInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputReaderInputStream")
