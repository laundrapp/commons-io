//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/Tailer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputTailer")
#ifdef RESTRICT_OrgApacheCommonsIoInputTailer
#define INCLUDE_ALL_OrgApacheCommonsIoInputTailer 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputTailer 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputTailer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoInputTailer_) && (INCLUDE_ALL_OrgApacheCommonsIoInputTailer || defined(INCLUDE_OrgApacheCommonsIoInputTailer))
#define OrgApacheCommonsIoInputTailer_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaIoFile;
@protocol OrgApacheCommonsIoInputTailerListener;

/*!
 @brief Simple implementation of the unix "tail -f" functionality.
 <p>
  <h2>1. Create a TailerListener implementation</h3>
  <p>
  First you need to create a <code>TailerListener</code> implementation
  (<code>TailerListenerAdapter</code> is provided for convenience so that you don't have to
  implement every method). 
 </p>
  
 <p>For example:</p>
  @code

   public class MyTailerListener extends TailerListenerAdapter {
       public void handle(String line) {
           System.out.println(line);
       }     }    
  
@endcode
   
 <h2>2. Using a Tailer</h2>
  You can create and use a Tailer in one of three ways: 
 <ul>
    <li>Using one of the static helper methods:
      <ul>
        <li><code>TailerListener)</code></li>
        <li><code>TailerListener, long)</code></li>
        <li><code>TailerListener, long, boolean)</code></li>
      </ul>
    </li>
    <li>Using an <code>java.util.concurrent.Executor</code></li>
    <li>Using an <code>Thread</code></li>
  </ul>
  An example of each of these is shown below.  
 <h3>2.1 Using the static helper method</h3>
  
 @code

       TailerListener listener = new MyTailerListener();
       Tailer tailer = Tailer.create(file, listener, delay); 
  
@endcode
        
 <h3>2.2 Use an Executor</h3>
   
 @code

       TailerListener listener = new MyTailerListener();
       Tailer tailer = new Tailer(file, listener, delay);
       // stupid executor impl. for demo purposes
       Executor executor = new Executor() {
           public void execute(Runnable command) {
               command.run();
            }
       };
       executor.execute(tailer); 
  
@endcode
              
 <h3>2.3 Use a Thread</h3>
  @code

       TailerListener listener = new MyTailerListener();
       Tailer tailer = new Tailer(file, listener, delay);
       Thread thread = new Thread(tailer);
       thread.setDaemon(true); // optional
       thread.start(); 
  
@endcode
  
 <h2>3. Stop Tailing</h3>
  <p>Remember to stop the tailer when you have done with it:</p>
  @code

       tailer.stop(); 
  
@endcode
 - seealso: TailerListener
 - seealso: TailerListenerAdapter
 @version $Id$
 @since 2.0
 */
@interface OrgApacheCommonsIoInputTailer : NSObject < JavaLangRunnable >

#pragma mark Public

/*!
 @brief Creates a Tailer for the given file, starting from the beginning, with the default delay of 1.0s.
 @param file The file to follow.
 @param listener the TailerListener to use.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener;

/*!
 @brief Creates a Tailer for the given file, starting from the beginning.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                    withLong:(jlong)delayMillis;

/*!
 @brief Creates a Tailer for the given file, with a delay other than the default 1.0s.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                    withLong:(jlong)delayMillis
                                 withBoolean:(jboolean)end;

/*!
 @brief Creates a Tailer for the given file, with a delay other than the default 1.0s.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param reOpen if true, close and reopen the file between reading chunks
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                    withLong:(jlong)delayMillis
                                 withBoolean:(jboolean)end
                                 withBoolean:(jboolean)reOpen;

/*!
 @brief Creates a Tailer for the given file, with a specified buffer size.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param reOpen if true, close and reopen the file between reading chunks
 @param bufSize Buffer size
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                    withLong:(jlong)delayMillis
                                 withBoolean:(jboolean)end
                                 withBoolean:(jboolean)reOpen
                                     withInt:(jint)bufSize;

/*!
 @brief Creates a Tailer for the given file, with a specified buffer size.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param bufSize Buffer size
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
   withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                    withLong:(jlong)delayMillis
                                 withBoolean:(jboolean)end
                                     withInt:(jint)bufSize;

/*!
 @brief Creates and starts a Tailer for the given file, starting at the beginning of the file
  with the default delay of 1.0s
 @param file the file to follow.
 @param listener the TailerListener to use.
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener;

/*!
 @brief Creates and starts a Tailer for the given file, starting at the beginning of the file
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                               withLong:(jlong)delayMillis;

/*!
 @brief Creates and starts a Tailer for the given file with default buffer size.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                               withLong:(jlong)delayMillis
                                            withBoolean:(jboolean)end;

/*!
 @brief Creates and starts a Tailer for the given file with default buffer size.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param reOpen whether to close/reopen the file between chunks
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                               withLong:(jlong)delayMillis
                                            withBoolean:(jboolean)end
                                            withBoolean:(jboolean)reOpen;

/*!
 @brief Creates and starts a Tailer for the given file.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param reOpen whether to close/reopen the file between chunks
 @param bufSize buffer size.
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                               withLong:(jlong)delayMillis
                                            withBoolean:(jboolean)end
                                            withBoolean:(jboolean)reOpen
                                                withInt:(jint)bufSize;

/*!
 @brief Creates and starts a Tailer for the given file.
 @param file the file to follow.
 @param listener the TailerListener to use.
 @param delayMillis the delay between checks of the file for new content in milliseconds.
 @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
 @param bufSize buffer size.
 @return The new tailer
 */
+ (OrgApacheCommonsIoInputTailer *)createWithJavaIoFile:(JavaIoFile *)file
              withOrgApacheCommonsIoInputTailerListener:(id<OrgApacheCommonsIoInputTailerListener>)listener
                                               withLong:(jlong)delayMillis
                                            withBoolean:(jboolean)end
                                                withInt:(jint)bufSize;

/*!
 @brief Return the delay in milliseconds.
 @return the delay in milliseconds.
 */
- (jlong)getDelay;

/*!
 @brief Return the file.
 @return the file
 */
- (JavaIoFile *)getFile;

/*!
 @brief Follows changes in the file, calling the TailerListener's handle method for each new line.
 */
- (void)run;

/*!
 @brief Allows the tailer to complete its current loop and return.
 */
- (void)stop;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputTailer)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withInt_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jint bufSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jint bufSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jint bufSize);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_withInt_(OrgApacheCommonsIoInputTailer *self, JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen, jint bufSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *new_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen, jint bufSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *create_OrgApacheCommonsIoInputTailer_initWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen, jint bufSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jint bufSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_withInt_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen, jint bufSize);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_withBoolean_withBoolean_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis, jboolean end, jboolean reOpen);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_withLong_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener, jlong delayMillis);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTailer *OrgApacheCommonsIoInputTailer_createWithJavaIoFile_withOrgApacheCommonsIoInputTailerListener_(JavaIoFile *file, id<OrgApacheCommonsIoInputTailerListener> listener);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputTailer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputTailer")
