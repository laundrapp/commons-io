//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/RandomAccessFile.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "org/apache/commons/io/Charsets.h"
#include "org/apache/commons/io/input/ReversedLinesFileReader.h"

@class OrgApacheCommonsIoInputReversedLinesFileReader_FilePart;

@interface OrgApacheCommonsIoInputReversedLinesFileReader () {
 @public
  jint blockSize_;
  JavaNioCharsetCharset *encoding_;
  JavaIoRandomAccessFile *randomAccessFile_;
  jlong totalByteLength_;
  jlong totalBlockCount_;
  IOSObjectArray *newLineSequences_;
  jint avoidNewlineSplitBufferSize_;
  jint byteDecrement_;
  OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *currentFilePart_;
  jboolean trailingNewlineOfFileSkipped_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader, encoding_, JavaNioCharsetCharset *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader, randomAccessFile_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader, newLineSequences_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader, currentFilePart_, OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *)

@interface OrgApacheCommonsIoInputReversedLinesFileReader_FilePart : NSObject {
 @public
  OrgApacheCommonsIoInputReversedLinesFileReader *this$0_;
  jlong no_;
  IOSByteArray *data_;
  IOSByteArray *leftOver_;
  jint currentLastBytePos_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart)

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart, leftOver_, IOSByteArray *)

__attribute__((unused)) static void OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self, OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart);

__attribute__((unused)) static OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *new_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *create_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart);

__attribute__((unused)) static OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_rollOver(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self);

__attribute__((unused)) static NSString *OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_readLine(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self);

__attribute__((unused)) static void OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_createLeftOver(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self);

__attribute__((unused)) static jint OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_getNewLineMatchByteCountWithByteArray_withInt_(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self, IOSByteArray *data, jint i);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart)

@implementation OrgApacheCommonsIoInputReversedLinesFileReader

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_(self, file);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                           withInt:(jint)blockSize
         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(self, file, blockSize, encoding);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                           withInt:(jint)blockSize
                      withNSString:(NSString *)encoding {
  OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withNSString_(self, file, blockSize, encoding);
  return self;
}

- (NSString *)readLine {
  NSString *line = OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_readLine(nil_chk(currentFilePart_));
  while (line == nil) {
    JreStrongAssign(&currentFilePart_, OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_rollOver(nil_chk(currentFilePart_)));
    if (currentFilePart_ != nil) {
      line = OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_readLine(currentFilePart_);
    }
    else {
      break;
    }
  }
  if ([@"" isEqual:line] && !trailingNewlineOfFileSkipped_) {
    trailingNewlineOfFileSkipped_ = true;
    line = [self readLine];
  }
  return line;
}

- (void)close {
  [((JavaIoRandomAccessFile *) nil_chk(randomAccessFile_)) close];
}

- (void)dealloc {
  RELEASE_(encoding_);
  RELEASE_(randomAccessFile_);
  RELEASE_(newLineSequences_);
  RELEASE_(currentFilePart_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_(OrgApacheCommonsIoInputReversedLinesFileReader *self, JavaIoFile *file) {
  OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withNSString_(self, file, 4096, [((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_defaultCharset())) description]);
}

OrgApacheCommonsIoInputReversedLinesFileReader *new_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_, file)
}

OrgApacheCommonsIoInputReversedLinesFileReader *create_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_, file)
}

void OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(OrgApacheCommonsIoInputReversedLinesFileReader *self, JavaIoFile *file, jint blockSize, JavaNioCharsetCharset *encoding) {
  NSObject_init(self);
  self->trailingNewlineOfFileSkipped_ = false;
  self->blockSize_ = blockSize;
  JreStrongAssign(&self->encoding_, encoding);
  JreStrongAssignAndConsume(&self->randomAccessFile_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(file, @"r"));
  self->totalByteLength_ = [self->randomAccessFile_ length];
  jint lastBlockLength = (jint) (self->totalByteLength_ % blockSize);
  if (lastBlockLength > 0) {
    self->totalBlockCount_ = self->totalByteLength_ / blockSize + 1;
  }
  else {
    self->totalBlockCount_ = self->totalByteLength_ / blockSize;
    if (self->totalByteLength_ > 0) {
      lastBlockLength = blockSize;
    }
  }
  JreStrongAssignAndConsume(&self->currentFilePart_, new_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(self, self->totalBlockCount_, lastBlockLength, nil));
  JavaNioCharsetCharset *charset = OrgApacheCommonsIoCharsets_toCharsetWithJavaNioCharsetCharset_(encoding);
  JavaNioCharsetCharsetEncoder *charsetEncoder = [((JavaNioCharsetCharset *) nil_chk(charset)) newEncoder];
  jfloat maxBytesPerChar = [((JavaNioCharsetCharsetEncoder *) nil_chk(charsetEncoder)) maxBytesPerChar];
  if (maxBytesPerChar == 1.0f) {
    self->byteDecrement_ = 1;
  }
  else if (charset == JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")) {
    self->byteDecrement_ = 1;
  }
  else if (charset == JavaNioCharsetCharset_forNameWithNSString_(@"Shift_JIS")) {
    self->byteDecrement_ = 1;
  }
  else if (charset == JavaNioCharsetCharset_forNameWithNSString_(@"UTF-16BE") || charset == JavaNioCharsetCharset_forNameWithNSString_(@"UTF-16LE")) {
    self->byteDecrement_ = 2;
  }
  else if (charset == JavaNioCharsetCharset_forNameWithNSString_(@"UTF-16")) {
    @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(@"For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)");
  }
  else {
    @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(JreStrcat("$@$", @"Encoding ", encoding, @" is not supported yet (feel free to submit a patch)"));
  }
  JreStrongAssignAndConsume(&self->newLineSequences_, [IOSObjectArray newArrayWithObjects:(id[]){ [@"\x0d\n" java_getBytesWithCharset:encoding], [@"\n" java_getBytesWithCharset:encoding], [@"\x0d" java_getBytesWithCharset:encoding] } count:3 type:IOSClass_byteArray(1)]);
  self->avoidNewlineSplitBufferSize_ = ((IOSByteArray *) nil_chk(IOSObjectArray_Get(self->newLineSequences_, 0)))->size_;
}

OrgApacheCommonsIoInputReversedLinesFileReader *new_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(JavaIoFile *file, jint blockSize, JavaNioCharsetCharset *encoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_withInt_withJavaNioCharsetCharset_, file, blockSize, encoding)
}

OrgApacheCommonsIoInputReversedLinesFileReader *create_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(JavaIoFile *file, jint blockSize, JavaNioCharsetCharset *encoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_withInt_withJavaNioCharsetCharset_, file, blockSize, encoding)
}

void OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withNSString_(OrgApacheCommonsIoInputReversedLinesFileReader *self, JavaIoFile *file, jint blockSize, NSString *encoding) {
  OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(self, file, blockSize, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding));
}

OrgApacheCommonsIoInputReversedLinesFileReader *new_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withNSString_(JavaIoFile *file, jint blockSize, NSString *encoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_withInt_withNSString_, file, blockSize, encoding)
}

OrgApacheCommonsIoInputReversedLinesFileReader *create_OrgApacheCommonsIoInputReversedLinesFileReader_initWithJavaIoFile_withInt_withNSString_(JavaIoFile *file, jint blockSize, NSString *encoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader, initWithJavaIoFile_withInt_withNSString_, file, blockSize, encoding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputReversedLinesFileReader)

@implementation OrgApacheCommonsIoInputReversedLinesFileReader_FilePart

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(data_);
  RELEASE_(leftOver_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self, OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->no_ = no;
  jint dataLength = length + (leftOverOfLastFilePart != nil ? leftOverOfLastFilePart->size_ : 0);
  JreStrongAssignAndConsume(&self->data_, [IOSByteArray newArrayWithLength:dataLength]);
  jlong off = (no - 1) * outer$->blockSize_;
  if (no > 0) {
    [((JavaIoRandomAccessFile *) nil_chk(outer$->randomAccessFile_)) seekWithLong:off];
    jint countRead = [outer$->randomAccessFile_ readWithByteArray:self->data_ withInt:0 withInt:length];
    if (countRead != length) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Count of requested bytes and actually read bytes don't match");
    }
  }
  if (leftOverOfLastFilePart != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(leftOverOfLastFilePart, 0, self->data_, length, leftOverOfLastFilePart->size_);
  }
  self->currentLastBytePos_ = self->data_->size_ - 1;
  JreStrongAssign(&self->leftOver_, nil);
}

OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *new_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart, initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_, outer$, no, length, leftOverOfLastFilePart)
}

OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *create_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(OrgApacheCommonsIoInputReversedLinesFileReader *outer$, jlong no, jint length, IOSByteArray *leftOverOfLastFilePart) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart, initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_, outer$, no, length, leftOverOfLastFilePart)
}

OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_rollOver(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self) {
  if (self->currentLastBytePos_ > -1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Current currentLastCharPos unexpectedly positive... last readLine() should have returned something! currentLastCharPos=", self->currentLastBytePos_));
  }
  if (self->no_ > 1) {
    return create_OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_initWithOrgApacheCommonsIoInputReversedLinesFileReader_withLong_withInt_withByteArray_(self->this$0_, self->no_ - 1, self->this$0_->blockSize_, self->leftOver_);
  }
  else {
    if (self->leftOver_ != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected leftover of the last block: leftOverOfThisFilePart=", [NSString java_stringWithBytes:self->leftOver_ charset:self->this$0_->encoding_]));
    }
    return nil;
  }
}

NSString *OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_readLine(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self) {
  NSString *line = nil;
  jint newLineMatchByteCount;
  jboolean isLastFilePart = self->no_ == 1;
  jint i = self->currentLastBytePos_;
  while (i > -1) {
    if (!isLastFilePart && i < self->this$0_->avoidNewlineSplitBufferSize_) {
      OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_createLeftOver(self);
      break;
    }
    if ((newLineMatchByteCount = OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_getNewLineMatchByteCountWithByteArray_withInt_(self, self->data_, i)) > 0) {
      jint lineStart = i + 1;
      jint lineLengthBytes = self->currentLastBytePos_ - lineStart + 1;
      if (lineLengthBytes < 0) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unexpected negative line length=", lineLengthBytes));
      }
      IOSByteArray *lineData = [IOSByteArray arrayWithLength:lineLengthBytes];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->data_, lineStart, lineData, 0, lineLengthBytes);
      line = [NSString java_stringWithBytes:lineData charset:self->this$0_->encoding_];
      self->currentLastBytePos_ = i - newLineMatchByteCount;
      break;
    }
    i -= self->this$0_->byteDecrement_;
    if (i < 0) {
      OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_createLeftOver(self);
      break;
    }
  }
  if (isLastFilePart && self->leftOver_ != nil) {
    line = [NSString java_stringWithBytes:self->leftOver_ charset:self->this$0_->encoding_];
    JreStrongAssign(&self->leftOver_, nil);
  }
  return line;
}

void OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_createLeftOver(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self) {
  jint lineLengthBytes = self->currentLastBytePos_ + 1;
  if (lineLengthBytes > 0) {
    JreStrongAssignAndConsume(&self->leftOver_, [IOSByteArray newArrayWithLength:lineLengthBytes]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->data_, 0, self->leftOver_, 0, lineLengthBytes);
  }
  else {
    JreStrongAssign(&self->leftOver_, nil);
  }
  self->currentLastBytePos_ = -1;
}

jint OrgApacheCommonsIoInputReversedLinesFileReader_FilePart_getNewLineMatchByteCountWithByteArray_withInt_(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart *self, IOSByteArray *data, jint i) {
  {
    IOSObjectArray *a__ = self->this$0_->newLineSequences_;
    IOSByteArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSByteArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSByteArray *newLineSequence = *b__++;
      jboolean match = true;
      for (jint j = ((IOSByteArray *) nil_chk(newLineSequence))->size_ - 1; j >= 0; j--) {
        jint k = i + j - (newLineSequence->size_ - 1);
        match &= (k >= 0 && IOSByteArray_Get(nil_chk(data), k) == IOSByteArray_Get(newLineSequence, j));
      }
      if (match) {
        return newLineSequence->size_;
      }
    }
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputReversedLinesFileReader_FilePart)
