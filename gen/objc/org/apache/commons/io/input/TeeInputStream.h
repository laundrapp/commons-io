//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/TeeInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputTeeInputStream")
#ifdef RESTRICT_OrgApacheCommonsIoInputTeeInputStream
#define INCLUDE_ALL_OrgApacheCommonsIoInputTeeInputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputTeeInputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputTeeInputStream

#if !defined (OrgApacheCommonsIoInputTeeInputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoInputTeeInputStream || defined(INCLUDE_OrgApacheCommonsIoInputTeeInputStream))
#define OrgApacheCommonsIoInputTeeInputStream_

#define RESTRICT_OrgApacheCommonsIoInputProxyInputStream 1
#define INCLUDE_OrgApacheCommonsIoInputProxyInputStream 1
#include "org/apache/commons/io/input/ProxyInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief InputStream proxy that transparently writes a copy of all bytes read
  from the proxied stream to a given OutputStream.Using <code>skip(long)</code>
  or <code>mark(int)</code>/<code>reset()</code> on the stream will result on some
  bytes from the input stream being skipped or duplicated in the output
  stream.
 <p>
  The proxied input stream is closed when the <code>close()</code> method is
  called on this proxy. It is configurable whether the associated output
  stream will also closed.
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoInputTeeInputStream : OrgApacheCommonsIoInputProxyInputStream

#pragma mark Public

/*!
 @brief Creates a TeeInputStream that proxies the given <code>InputStream</code>
  and copies all read bytes to the given <code>OutputStream</code>.The given
  output stream will not be closed when this stream gets closed.
 @param input input stream to be proxied
 @param branch output stream that will receive a copy of all bytes read
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)branch;

/*!
 @brief Creates a TeeInputStream that proxies the given <code>InputStream</code>
  and copies all read bytes to the given <code>OutputStream</code>.The given
  output stream will be closed when this stream gets closed if the
  closeBranch parameter is <code>true</code>.
 @param input input stream to be proxied
 @param branch output stream that will receive a copy of all bytes read
 @param closeBranch flag for closing also the output stream when this                     stream is closed
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)branch
                              withBoolean:(jboolean)closeBranch;

/*!
 @brief Closes the proxied input stream and, if so configured, the associated
  output stream.An exception thrown from one stream will not prevent
  closing of the other stream.
 @throw IOExceptionif either of the streams could not be closed
 */
- (void)close;

/*!
 @brief Reads a single byte from the proxied input stream and writes it to
  the associated output stream.
 @return next byte from the stream, or -1 if the stream has ended
 @throw IOExceptionif the stream could not be read (or written)
 */
- (jint)read;

/*!
 @brief Reads bytes from the proxied input stream and writes the read bytes
  to the associated output stream.
 @param bts byte buffer
 @return number of bytes read, or -1 if the stream has ended
 @throw IOExceptionif the stream could not be read (or written)
 */
- (jint)readWithByteArray:(IOSByteArray *)bts;

/*!
 @brief Reads bytes from the proxied input stream and writes the read bytes
  to the associated output stream.
 @param bts byte buffer
 @param st start offset within the buffer
 @param end maximum number of bytes to read
 @return number of bytes read, or -1 if the stream has ended
 @throw IOExceptionif the stream could not be read (or written)
 */
- (jint)readWithByteArray:(IOSByteArray *)bts
                  withInt:(jint)st
                  withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoInputTeeInputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(OrgApacheCommonsIoInputTeeInputStream *self, JavaIoInputStream *input, JavaIoOutputStream *branch);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTeeInputStream *new_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *branch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTeeInputStream *create_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *branch);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(OrgApacheCommonsIoInputTeeInputStream *self, JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch);

FOUNDATION_EXPORT OrgApacheCommonsIoInputTeeInputStream *new_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputTeeInputStream *create_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputTeeInputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputTeeInputStream")
