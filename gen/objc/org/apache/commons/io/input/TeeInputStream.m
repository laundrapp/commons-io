//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/TeeInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "org/apache/commons/io/input/ProxyInputStream.h"
#include "org/apache/commons/io/input/TeeInputStream.h"

@interface OrgApacheCommonsIoInputTeeInputStream () {
 @public
  /*!
   @brief The output stream that will receive a copy of all bytes read from the
  proxied input stream.
   */
  JavaIoOutputStream *branch_;
  /*!
   @brief Flag for closing also the associated output stream when this
  stream is closed.
   */
  jboolean closeBranch_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputTeeInputStream, branch_, JavaIoOutputStream *)

@implementation OrgApacheCommonsIoInputTeeInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)branch {
  OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(self, input, branch);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)branch
                              withBoolean:(jboolean)closeBranch {
  OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(self, input, branch, closeBranch);
  return self;
}

- (void)close {
  @try {
    [super close];
  }
  @finally {
    if (closeBranch_) {
      [((JavaIoOutputStream *) nil_chk(branch_)) close];
    }
  }
}

- (jint)read {
  jint ch = [super read];
  if (ch != -1) {
    [((JavaIoOutputStream *) nil_chk(branch_)) writeWithInt:ch];
  }
  return ch;
}

- (jint)readWithByteArray:(IOSByteArray *)bts
                  withInt:(jint)st
                  withInt:(jint)end {
  jint n = [super readWithByteArray:bts withInt:st withInt:end];
  if (n != -1) {
    [((JavaIoOutputStream *) nil_chk(branch_)) writeWithByteArray:bts withInt:st withInt:n];
  }
  return n;
}

- (jint)readWithByteArray:(IOSByteArray *)bts {
  jint n = [super readWithByteArray:bts];
  if (n != -1) {
    [((JavaIoOutputStream *) nil_chk(branch_)) writeWithByteArray:bts withInt:0 withInt:n];
  }
  return n;
}

- (void)dealloc {
  RELEASE_(branch_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(OrgApacheCommonsIoInputTeeInputStream *self, JavaIoInputStream *input, JavaIoOutputStream *branch) {
  OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(self, input, branch, false);
}

OrgApacheCommonsIoInputTeeInputStream *new_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *branch) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputTeeInputStream, initWithJavaIoInputStream_withJavaIoOutputStream_, input, branch)
}

OrgApacheCommonsIoInputTeeInputStream *create_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *branch) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputTeeInputStream, initWithJavaIoInputStream_withJavaIoOutputStream_, input, branch)
}

void OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(OrgApacheCommonsIoInputTeeInputStream *self, JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch) {
  OrgApacheCommonsIoInputProxyInputStream_initWithJavaIoInputStream_(self, input);
  JreStrongAssign(&self->branch_, branch);
  self->closeBranch_ = closeBranch;
}

OrgApacheCommonsIoInputTeeInputStream *new_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputTeeInputStream, initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_, input, branch, closeBranch)
}

OrgApacheCommonsIoInputTeeInputStream *create_OrgApacheCommonsIoInputTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_(JavaIoInputStream *input, JavaIoOutputStream *branch, jboolean closeBranch) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputTeeInputStream, initWithJavaIoInputStream_withJavaIoOutputStream_withBoolean_, input, branch, closeBranch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputTeeInputStream)
