//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReader")
#ifdef RESTRICT_OrgApacheCommonsIoInputXmlStreamReader
#define INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReader 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReader 1
#endif
#undef RESTRICT_OrgApacheCommonsIoInputXmlStreamReader

#if !defined (OrgApacheCommonsIoInputXmlStreamReader_) && (INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReader || defined(INCLUDE_OrgApacheCommonsIoInputXmlStreamReader))
#define OrgApacheCommonsIoInputXmlStreamReader_

#define RESTRICT_JavaIoReader 1
#define INCLUDE_JavaIoReader 1
#include "java/io/Reader.h"

@class IOSCharArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaNetURL;
@class JavaNetURLConnection;
@class JavaUtilRegexPattern;

/*!
 @brief Character stream that handles all the necessary Voodo to figure out the
  charset encoding of the XML document within the stream.
 <p>
  IMPORTANT: This class is not related in any way to the org.xml.sax.XMLReader.
  This one IS a character stream. 
 <p>
  All this has to be done without consuming characters from the stream, if not
  the XML parser will not recognized the document as a valid XML. This is not
  100% true, but it's close enough (UTF-8 BOM is not handled by all parsers
  right now, XmlStreamReader handles it and things work in all parsers). 
 <p>
  The XmlStreamReader class handles the charset encoding of XML documents in
  Files, raw streams and HTTP streams by offering a wide set of constructors. 
 <p>
  By default the charset encoding detection is lenient, the constructor with
  the lenient flag can be used for an script (following HTTP MIME and XML
  specifications). All this is nicely explained by Mark Pilgrim in his blog, <a href="http://diveintomark.org/archives/2004/02/13/xml-media-types">
  Determining the character encoding of a feed</a>.
  <p>
  Originally developed for <a href="http://rome.dev.java.net">ROME</a> under
  Apache License 2.0.
 @version $Id$
 - seealso: org.apache.commons.io.output.XmlStreamWriter
 @since 2.0
 */
@interface OrgApacheCommonsIoInputXmlStreamReader : JavaIoReader

#pragma mark Public

/*!
 @brief Creates a Reader for a File.
 <p>
  It looks for the UTF-8 BOM first, if none sniffs the XML prolog charset,
  if this is also missing defaults to UTF-8. 
 <p>
  It does a lenient charset encoding detection, check the constructor with
  the lenient parameter for details.
 @param file File to create a Reader from.
 @throw IOExceptionthrown if there is a problem reading the file.
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Creates a Reader for a raw InputStream.
 <p>
  It follows the same logic used for files. 
 <p>
  It does a lenient charset encoding detection, check the constructor with
  the lenient parameter for details.
 @param is InputStream to create a Reader from.
 @throw IOExceptionthrown if there is a problem reading the stream.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Creates a Reader for a raw InputStream.
 <p>
  It follows the same logic used for files. 
 <p>
  If lenient detection is indicated and the detection above fails as per
  specifications it then attempts the following: 
 <p>
  If the content type was 'text/html' it replaces it with 'text/xml' and
  tries the detection again. 
 <p>
  Else if the XML prolog had a charset encoding that encoding is used. 
 <p>
  Else if the content type had a charset encoding that encoding is used. 
 <p>
  Else 'UTF-8' is used. 
 <p>
  If lenient detection is indicated an XmlStreamReaderException is never
  thrown.
 @param is InputStream to create a Reader from.
 @param lenient indicates if the charset encoding detection should be         relaxed.
 @throw IOExceptionthrown if there is a problem reading the stream.
 @throw XmlStreamReaderExceptionthrown if the charset encoding could not
          be determined according to the specs.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                              withBoolean:(jboolean)lenient;

/*!
 @brief Creates a Reader for a raw InputStream.
 <p>
  It follows the same logic used for files. 
 <p>
  If lenient detection is indicated and the detection above fails as per
  specifications it then attempts the following: 
 <p>
  If the content type was 'text/html' it replaces it with 'text/xml' and
  tries the detection again. 
 <p>
  Else if the XML prolog had a charset encoding that encoding is used. 
 <p>
  Else if the content type had a charset encoding that encoding is used. 
 <p>
  Else 'UTF-8' is used. 
 <p>
  If lenient detection is indicated an XmlStreamReaderException is never
  thrown.
 @param is InputStream to create a Reader from.
 @param lenient indicates if the charset encoding detection should be         relaxed.
 @param defaultEncoding The default encoding
 @throw IOExceptionthrown if there is a problem reading the stream.
 @throw XmlStreamReaderExceptionthrown if the charset encoding could not
          be determined according to the specs.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                              withBoolean:(jboolean)lenient
                             withNSString:(NSString *)defaultEncoding;

/*!
 @brief Creates a Reader using an InputStream an the associated content-type
  header.
 <p>
  First it checks if the stream has BOM. If there is not BOM checks the
  content-type encoding. If there is not content-type encoding checks the
  XML prolog encoding. If there is not XML prolog encoding uses the default
  encoding mandated by the content-type MIME type. 
 <p>
  It does a lenient charset encoding detection, check the constructor with
  the lenient parameter for details.
 @param is InputStream to create the reader from.
 @param httpContentType content-type header to use for the resolution of         the charset encoding.
 @throw IOExceptionthrown if there is a problem reading the file.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                             withNSString:(NSString *)httpContentType;

/*!
 @brief Creates a Reader using an InputStream an the associated content-type
  header.This constructor is lenient regarding the encoding detection.
 <p>
  First it checks if the stream has BOM. If there is not BOM checks the
  content-type encoding. If there is not content-type encoding checks the
  XML prolog encoding. If there is not XML prolog encoding uses the default
  encoding mandated by the content-type MIME type. 
 <p>
  If lenient detection is indicated and the detection above fails as per
  specifications it then attempts the following: 
 <p>
  If the content type was 'text/html' it replaces it with 'text/xml' and
  tries the detection again. 
 <p>
  Else if the XML prolog had a charset encoding that encoding is used. 
 <p>
  Else if the content type had a charset encoding that encoding is used. 
 <p>
  Else 'UTF-8' is used. 
 <p>
  If lenient detection is indicated an XmlStreamReaderException is never
  thrown.
 @param is InputStream to create the reader from.
 @param httpContentType content-type header to use for the resolution of         the charset encoding.
 @param lenient indicates if the charset encoding detection should be         relaxed.
 @throw IOExceptionthrown if there is a problem reading the file.
 @throw XmlStreamReaderExceptionthrown if the charset encoding could not
          be determined according to the specs.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                             withNSString:(NSString *)httpContentType
                              withBoolean:(jboolean)lenient;

/*!
 @brief Creates a Reader using an InputStream an the associated content-type
  header.This constructor is lenient regarding the encoding detection.
 <p>
  First it checks if the stream has BOM. If there is not BOM checks the
  content-type encoding. If there is not content-type encoding checks the
  XML prolog encoding. If there is not XML prolog encoding uses the default
  encoding mandated by the content-type MIME type. 
 <p>
  If lenient detection is indicated and the detection above fails as per
  specifications it then attempts the following: 
 <p>
  If the content type was 'text/html' it replaces it with 'text/xml' and
  tries the detection again. 
 <p>
  Else if the XML prolog had a charset encoding that encoding is used. 
 <p>
  Else if the content type had a charset encoding that encoding is used. 
 <p>
  Else 'UTF-8' is used. 
 <p>
  If lenient detection is indicated an XmlStreamReaderException is never
  thrown.
 @param is InputStream to create the reader from.
 @param httpContentType content-type header to use for the resolution of         the charset encoding.
 @param lenient indicates if the charset encoding detection should be         relaxed.
 @param defaultEncoding The default encoding
 @throw IOExceptionthrown if there is a problem reading the file.
 @throw XmlStreamReaderExceptionthrown if the charset encoding could not
          be determined according to the specs.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                             withNSString:(NSString *)httpContentType
                              withBoolean:(jboolean)lenient
                             withNSString:(NSString *)defaultEncoding;

/*!
 @brief Creates a Reader using the InputStream of a URL.
 <p>
  If the URL is not of type HTTP and there is not 'content-type' header in
  the fetched data it uses the same logic used for Files. 
 <p>
  If the URL is a HTTP Url or there is a 'content-type' header in the
  fetched data it uses the same logic used for an InputStream with
  content-type. 
 <p>
  It does a lenient charset encoding detection, check the constructor with
  the lenient parameter for details.
 @param url URL to create a Reader from.
 @throw IOExceptionthrown if there is a problem reading the stream of
          the URL.
 */
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Creates a Reader using the InputStream of a URLConnection.
 <p>
  If the URLConnection is not of type HttpURLConnection and there is not
  'content-type' header in the fetched data it uses the same logic used for
  files. 
 <p>
  If the URLConnection is a HTTP Url or there is a 'content-type' header in
  the fetched data it uses the same logic used for an InputStream with
  content-type. 
 <p>
  It does a lenient charset encoding detection, check the constructor with
  the lenient parameter for details.
 @param conn URLConnection to create a Reader from.
 @param defaultEncoding The default encoding
 @throw IOExceptionthrown if there is a problem reading the stream of
          the URLConnection.
 */
- (instancetype)initWithJavaNetURLConnection:(JavaNetURLConnection *)conn
                                withNSString:(NSString *)defaultEncoding;

/*!
 @brief Closes the XmlStreamReader stream.
 @throw IOExceptionthrown if there was a problem closing the stream.
 */
- (void)close;

/*!
 @brief Returns the default encoding to use if none is set in HTTP content-type,
  XML prolog and the rules based on content-type are not adequate.
 <p>
  If it is NULL the content-type based rules are used.
 @return the default encoding to use.
 */
- (NSString *)getDefaultEncoding;

/*!
 @brief Returns the charset encoding of the XmlStreamReader.
 @return charset encoding.
 */
- (NSString *)getEncoding;

/*!
 @brief Invokes the underlying reader's <code>read(char[], int, int)</code> method.
 @param buf the buffer to read the characters into
 @param offset The start offset
 @param len The number of bytes to read
 @return the number of characters read or -1 if the end of stream
 @throw IOExceptionif an I/O error occurs
 */
- (jint)readWithCharArray:(IOSCharArray *)buf
                  withInt:(jint)offset
                  withInt:(jint)len;

#pragma mark Package-Private

/*!
 @brief Calculate the HTTP encoding.
 @param httpContentType The HTTP content type
 @param bomEnc BOM encoding
 @param xmlGuessEnc XML Guess encoding
 @param xmlEnc XML encoding
 @param lenient indicates if the charset encoding detection should be         relaxed.
 @return the HTTP encoding
 @throw IOExceptionthrown if there is a problem reading the stream.
 */
- (NSString *)calculateHttpEncodingWithNSString:(NSString *)httpContentType
                                   withNSString:(NSString *)bomEnc
                                   withNSString:(NSString *)xmlGuessEnc
                                   withNSString:(NSString *)xmlEnc
                                    withBoolean:(jboolean)lenient;

/*!
 @brief Calculate the raw encoding.
 @param bomEnc BOM encoding
 @param xmlGuessEnc XML Guess encoding
 @param xmlEnc XML encoding
 @return the raw encoding
 @throw IOExceptionthrown if there is a problem reading the stream.
 */
- (NSString *)calculateRawEncodingWithNSString:(NSString *)bomEnc
                                  withNSString:(NSString *)xmlGuessEnc
                                  withNSString:(NSString *)xmlEnc;

/*!
 @brief Returns charset parameter value, NULL if not present, NULL if
  httpContentType is NULL.
 @param httpContentType the HTTP content type
 @return The content type encoding (upcased)
 */
+ (NSString *)getContentTypeEncodingWithNSString:(NSString *)httpContentType;

/*!
 @brief Returns MIME type or NULL if httpContentType is NULL.
 @param httpContentType the HTTP content type
 @return The mime content type
 */
+ (NSString *)getContentTypeMimeWithNSString:(NSString *)httpContentType;

/*!
 @brief Indicates if the MIME type belongs to the APPLICATION XML family.
 @param mime The mime type
 @return true if the mime type belongs to the APPLICATION XML family,
  otherwise false
 */
+ (jboolean)isAppXmlWithNSString:(NSString *)mime;

/*!
 @brief Indicates if the MIME type belongs to the TEXT XML family.
 @param mime The mime type
 @return true if the mime type belongs to the TEXT XML family,
  otherwise false
 */
+ (jboolean)isTextXmlWithNSString:(NSString *)mime;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoInputXmlStreamReader)

inline JavaUtilRegexPattern *OrgApacheCommonsIoInputXmlStreamReader_get_ENCODING_PATTERN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *OrgApacheCommonsIoInputXmlStreamReader_ENCODING_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoInputXmlStreamReader, ENCODING_PATTERN, JavaUtilRegexPattern *)

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoFile_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoFile *file);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_(JavaIoInputStream *is) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_(JavaIoInputStream *is);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is, jboolean lenient);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *is, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *is, jboolean lenient);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_withNSString_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is, jboolean lenient, NSString *defaultEncoding);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_withNSString_(JavaIoInputStream *is, jboolean lenient, NSString *defaultEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withBoolean_withNSString_(JavaIoInputStream *is, jboolean lenient, NSString *defaultEncoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURL_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaNetURL *url);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURL_(JavaNetURL *url) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURLConnection_withNSString_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaNetURLConnection *conn, NSString *defaultEncoding);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURLConnection_withNSString_(JavaNetURLConnection *conn, NSString *defaultEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaNetURLConnection_withNSString_(JavaNetURLConnection *conn, NSString *defaultEncoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is, NSString *httpContentType);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *is, NSString *httpContentType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *is, NSString *httpContentType);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_withNSString_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is, NSString *httpContentType, jboolean lenient, NSString *defaultEncoding);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_withNSString_(JavaIoInputStream *is, NSString *httpContentType, jboolean lenient, NSString *defaultEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_withNSString_(JavaIoInputStream *is, NSString *httpContentType, jboolean lenient, NSString *defaultEncoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_(OrgApacheCommonsIoInputXmlStreamReader *self, JavaIoInputStream *is, NSString *httpContentType, jboolean lenient);

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *new_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_(JavaIoInputStream *is, NSString *httpContentType, jboolean lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoInputXmlStreamReader *create_OrgApacheCommonsIoInputXmlStreamReader_initWithJavaIoInputStream_withNSString_withBoolean_(JavaIoInputStream *is, NSString *httpContentType, jboolean lenient);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoInputXmlStreamReader_getContentTypeMimeWithNSString_(NSString *httpContentType);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoInputXmlStreamReader_getContentTypeEncodingWithNSString_(NSString *httpContentType);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoInputXmlStreamReader_isAppXmlWithNSString_(NSString *mime);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoInputXmlStreamReader_isTextXmlWithNSString_(NSString *mime);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoInputXmlStreamReader)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoInputXmlStreamReader")
