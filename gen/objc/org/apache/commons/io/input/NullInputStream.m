//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/NullInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/commons/io/input/NullInputStream.h"

@interface OrgApacheCommonsIoInputNullInputStream () {
 @public
  jlong size_;
  jlong position_;
  jlong mark_;
  jlong readlimit_;
  jboolean eof_;
  jboolean throwEofException_;
  jboolean markSupported_;
}

@end

__attribute__((unused)) static jint OrgApacheCommonsIoInputNullInputStream_doEndOfFile(OrgApacheCommonsIoInputNullInputStream *self);

@implementation OrgApacheCommonsIoInputNullInputStream

- (instancetype __nonnull)initWithLong:(jlong)size {
  OrgApacheCommonsIoInputNullInputStream_initWithLong_(self, size);
  return self;
}

- (instancetype __nonnull)initWithLong:(jlong)size
                           withBoolean:(jboolean)markSupported
                           withBoolean:(jboolean)throwEofException {
  OrgApacheCommonsIoInputNullInputStream_initWithLong_withBoolean_withBoolean_(self, size, markSupported, throwEofException);
  return self;
}

- (jlong)getPosition {
  return position_;
}

- (jlong)getSize {
  return size_;
}

- (jint)available {
  jlong avail = size_ - position_;
  if (avail <= 0) {
    return 0;
  }
  else if (avail > JavaLangInteger_MAX_VALUE) {
    return JavaLangInteger_MAX_VALUE;
  }
  else {
    return (jint) avail;
  }
}

- (void)close {
  eof_ = false;
  position_ = 0;
  mark_ = -1;
}

- (void)markWithInt:(jint)readlimit {
  @synchronized(self) {
    if (!markSupported_) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Mark not supported");
    }
    mark_ = position_;
    self->readlimit_ = readlimit;
  }
}

- (jboolean)markSupported {
  return markSupported_;
}

- (jint)read {
  if (eof_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Read after end of file");
  }
  if (position_ == size_) {
    return OrgApacheCommonsIoInputNullInputStream_doEndOfFile(self);
  }
  position_++;
  return [self processByte];
}

- (jint)readWithByteArray:(IOSByteArray *)bytes {
  return [self readWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
}

- (jint)readWithByteArray:(IOSByteArray *)bytes
                  withInt:(jint)offset
                  withInt:(jint)length {
  if (eof_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Read after end of file");
  }
  if (position_ == size_) {
    return OrgApacheCommonsIoInputNullInputStream_doEndOfFile(self);
  }
  position_ += length;
  jint returnLength = length;
  if (position_ > size_) {
    returnLength = length - (jint) (position_ - size_);
    position_ = size_;
  }
  [self processBytesWithByteArray:bytes withInt:offset withInt:returnLength];
  return returnLength;
}

- (void)reset {
  @synchronized(self) {
    if (!markSupported_) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Mark not supported");
    }
    if (mark_ < 0) {
      @throw create_JavaIoIOException_initWithNSString_(@"No position has been marked");
    }
    if (position_ > mark_ + readlimit_) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$JC", @"Marked position [", mark_, @"] is no longer valid - passed the read limit [", readlimit_, ']'));
    }
    position_ = mark_;
    eof_ = false;
  }
}

- (jlong)skipWithLong:(jlong)numberOfBytes {
  if (eof_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Skip after end of file");
  }
  if (position_ == size_) {
    return OrgApacheCommonsIoInputNullInputStream_doEndOfFile(self);
  }
  position_ += numberOfBytes;
  jlong returnLength = numberOfBytes;
  if (position_ > size_) {
    returnLength = numberOfBytes - (position_ - size_);
    position_ = size_;
  }
  return returnLength;
}

- (jint)processByte {
  return 0;
}

- (void)processBytesWithByteArray:(IOSByteArray *)bytes
                          withInt:(jint)offset
                          withInt:(jint)length {
}

@end

void OrgApacheCommonsIoInputNullInputStream_initWithLong_(OrgApacheCommonsIoInputNullInputStream *self, jlong size) {
  OrgApacheCommonsIoInputNullInputStream_initWithLong_withBoolean_withBoolean_(self, size, true, false);
}

OrgApacheCommonsIoInputNullInputStream *new_OrgApacheCommonsIoInputNullInputStream_initWithLong_(jlong size) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputNullInputStream, initWithLong_, size)
}

OrgApacheCommonsIoInputNullInputStream *create_OrgApacheCommonsIoInputNullInputStream_initWithLong_(jlong size) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputNullInputStream, initWithLong_, size)
}

void OrgApacheCommonsIoInputNullInputStream_initWithLong_withBoolean_withBoolean_(OrgApacheCommonsIoInputNullInputStream *self, jlong size, jboolean markSupported, jboolean throwEofException) {
  JavaIoInputStream_init(self);
  self->mark_ = -1;
  self->size_ = size;
  self->markSupported_ = markSupported;
  self->throwEofException_ = throwEofException;
}

OrgApacheCommonsIoInputNullInputStream *new_OrgApacheCommonsIoInputNullInputStream_initWithLong_withBoolean_withBoolean_(jlong size, jboolean markSupported, jboolean throwEofException) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputNullInputStream, initWithLong_withBoolean_withBoolean_, size, markSupported, throwEofException)
}

OrgApacheCommonsIoInputNullInputStream *create_OrgApacheCommonsIoInputNullInputStream_initWithLong_withBoolean_withBoolean_(jlong size, jboolean markSupported, jboolean throwEofException) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputNullInputStream, initWithLong_withBoolean_withBoolean_, size, markSupported, throwEofException)
}

jint OrgApacheCommonsIoInputNullInputStream_doEndOfFile(OrgApacheCommonsIoInputNullInputStream *self) {
  self->eof_ = true;
  if (self->throwEofException_) {
    @throw create_JavaIoEOFException_init();
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputNullInputStream)
