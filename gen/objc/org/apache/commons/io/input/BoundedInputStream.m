//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/input/BoundedInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Math.h"
#include "org/apache/commons/io/input/BoundedInputStream.h"

@interface OrgApacheCommonsIoInputBoundedInputStream () {
 @public
  /*!
   @brief the wrapped input stream
   */
  JavaIoInputStream *in_;
  /*!
   @brief the max length to provide
   */
  jlong max_;
  /*!
   @brief the number of bytes already returned
   */
  jlong pos_;
  /*!
   @brief the marked position
   */
  jlong mark_;
  /*!
   @brief flag if close shoud be propagated
   */
  jboolean propagateClose_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoInputBoundedInputStream, in_, JavaIoInputStream *)

@implementation OrgApacheCommonsIoInputBoundedInputStream

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                           withLong:(jlong)size {
  OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_withLong_(self, inArg, size);
  return self;
}

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (jint)read {
  if (max_ >= 0 && pos_ >= max_) {
    return -1;
  }
  jint result = [((JavaIoInputStream *) nil_chk(in_)) read];
  pos_++;
  return result;
}

- (jint)readWithByteArray:(IOSByteArray *)b {
  return [self readWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (max_ >= 0 && pos_ >= max_) {
    return -1;
  }
  jlong maxRead = max_ >= 0 ? JavaLangMath_minWithLong_withLong_(len, max_ - pos_) : len;
  jint bytesRead = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:b withInt:off withInt:(jint) maxRead];
  if (bytesRead == -1) {
    return -1;
  }
  pos_ += bytesRead;
  return bytesRead;
}

- (jlong)skipWithLong:(jlong)n {
  jlong toSkip = max_ >= 0 ? JavaLangMath_minWithLong_withLong_(n, max_ - pos_) : n;
  jlong skippedBytes = [((JavaIoInputStream *) nil_chk(in_)) skipWithLong:toSkip];
  pos_ += skippedBytes;
  return skippedBytes;
}

- (jint)available {
  if (max_ >= 0 && pos_ >= max_) {
    return 0;
  }
  return [((JavaIoInputStream *) nil_chk(in_)) available];
}

- (NSString *)description {
  return [((JavaIoInputStream *) nil_chk(in_)) description];
}

- (void)close {
  if (propagateClose_) {
    [((JavaIoInputStream *) nil_chk(in_)) close];
  }
}

- (void)reset {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(in_)) reset];
    pos_ = mark_;
  }
}

- (void)markWithInt:(jint)readlimit {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(in_)) markWithInt:readlimit];
    mark_ = pos_;
  }
}

- (jboolean)markSupported {
  return [((JavaIoInputStream *) nil_chk(in_)) markSupported];
}

- (jboolean)isPropagateClose {
  return propagateClose_;
}

- (void)setPropagateCloseWithBoolean:(jboolean)propagateClose {
  self->propagateClose_ = propagateClose;
}

- (void)dealloc {
  RELEASE_(in_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_withLong_(OrgApacheCommonsIoInputBoundedInputStream *self, JavaIoInputStream *inArg, jlong size) {
  JavaIoInputStream_init(self);
  self->pos_ = 0;
  self->mark_ = -1;
  self->propagateClose_ = true;
  self->max_ = size;
  JreStrongAssign(&self->in_, inArg);
}

OrgApacheCommonsIoInputBoundedInputStream *new_OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_withLong_(JavaIoInputStream *inArg, jlong size) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputBoundedInputStream, initWithJavaIoInputStream_withLong_, inArg, size)
}

OrgApacheCommonsIoInputBoundedInputStream *create_OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_withLong_(JavaIoInputStream *inArg, jlong size) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputBoundedInputStream, initWithJavaIoInputStream_withLong_, inArg, size)
}

void OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_(OrgApacheCommonsIoInputBoundedInputStream *self, JavaIoInputStream *inArg) {
  OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_withLong_(self, inArg, -1);
}

OrgApacheCommonsIoInputBoundedInputStream *new_OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoInputBoundedInputStream, initWithJavaIoInputStream_, inArg)
}

OrgApacheCommonsIoInputBoundedInputStream *create_OrgApacheCommonsIoInputBoundedInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoInputBoundedInputStream, initWithJavaIoInputStream_, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoInputBoundedInputStream)
