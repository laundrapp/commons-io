//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/IOUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoIOUtils")
#ifdef RESTRICT_OrgApacheCommonsIoIOUtils
#define INCLUDE_ALL_OrgApacheCommonsIoIOUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoIOUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsIoIOUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoIOUtils_) && (INCLUDE_ALL_OrgApacheCommonsIoIOUtils || defined(INCLUDE_OrgApacheCommonsIoIOUtils))
#define OrgApacheCommonsIoIOUtils_

@class IOSByteArray;
@class IOSCharArray;
@class JavaIoBufferedReader;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaNetServerSocket;
@class JavaNetSocket;
@class JavaNetURI;
@class JavaNetURL;
@class JavaNetURLConnection;
@class JavaNioChannelsSelector;
@class JavaNioCharsetCharset;
@class OrgApacheCommonsIoLineIterator;
@protocol JavaIoCloseable;
@protocol JavaLangCharSequence;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief General IO stream manipulation utilities.
 <p>
  This class provides static utility methods for input/output operations. 
 <ul>
  <li>closeQuietly - these methods close a stream ignoring nulls and exceptions 
 <li>toXxx/read - these methods read data from a stream 
 <li>write - these methods write data to a stream 
 <li>copy - these methods copy all the data from one stream to another 
 <li>contentEquals - these methods compare the content of two streams 
 </ul>
  <p>
  The byte-to-char methods and char-to-byte methods involve a conversion step.
  Two methods are provided in each case, one that uses the platform default
  encoding and the other which allows you to specify an encoding. You are
  encouraged to always specify an encoding because relying on the platform
  default can lead to unexpected results, for example when moving from
  development to production. 
 <p>
  All the methods in this class that read a stream are buffered internally.
  This means that there is no cause to use a <code>BufferedInputStream</code>
  or <code>BufferedReader</code>. The default buffer size of 4K has been shown
  to be efficient in tests. 
 <p>
  Wherever possible, the methods in this class do <em>not</em> flush or close
  the stream. This is to avoid making non-portable assumptions about the
  streams' origin and further use. Thus the caller is still responsible for
  closing streams after use. 
 <p>
  Origin of code: Excalibur.
 @version $Id$
 */
@interface OrgApacheCommonsIoIOUtils : NSObject

#pragma mark Public

/*!
 @brief Instances should NOT be constructed in standard programming.
 */
- (instancetype __nonnull)init;

/*!
 @brief Closes a URLConnection.
 @param conn the connection to close.
 @since 2.4
 */
+ (void)closeWithJavaNetURLConnection:(JavaNetURLConnection *)conn;

/*!
 @brief Unconditionally close a <code>Closeable</code>.
 <p>
  Equivalent to <code>Closeable.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    Closeable closeable = null;
    try {
        closeable = new FileReader("foo.txt");
        // process closeable
        closeable.close();
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(closeable);
    } 
  
@endcode
 @param closeable the object to close, may be null or already closed
 @since 2.0
 */
+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable;

/*!
 @brief Unconditionally close an <code>InputStream</code>.
 <p>
  Equivalent to <code>InputStream.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    byte[] data = new byte[1024];
    InputStream in = null;
    try {
        in = new FileInputStream("foo.txt");
        in.read(data);
        in.close(); //close errors are handled
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(in);
    } 
  
@endcode
 @param input the InputStream to close, may be null or already closed
 */
+ (void)closeQuietlyWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Unconditionally close an <code>OutputStream</code>.
 <p>
  Equivalent to <code>OutputStream.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

  byte[] data = "Hello, World".getBytes();
  OutputStream out = null;
  try {
      out = new FileOutputStream("foo.txt");
      out.write(data);
      out.close(); //close errors are handled
  } catch (IOException e) {
      // error handling
  } finally {
      IOUtils.closeQuietly(out);
  } 
  
@endcode
 @param output the OutputStream to close, may be null or already closed
 */
+ (void)closeQuietlyWithJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Unconditionally close an <code>Reader</code>.
 <p>
  Equivalent to <code>Reader.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    char[] data = new char[1024];
    Reader in = null;
    try {
        in = new FileReader("foo.txt");
        in.read(data);
        in.close(); //close errors are handled
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(in);
    } 
  
@endcode
 @param input the Reader to close, may be null or already closed
 */
+ (void)closeQuietlyWithJavaIoReader:(JavaIoReader *)input;

/*!
 @brief Unconditionally close a <code>Selector</code>.
 <p>
  Equivalent to <code>Selector.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    Selector selector = null;
    try {
        selector = Selector.open();
        // process socket       
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(selector);
    } 
  
@endcode
 @param selector the Selector to close, may be null or already closed
 @since 2.2
 */
+ (void)closeQuietlyWithJavaNioChannelsSelector:(JavaNioChannelsSelector *)selector;

/*!
 @brief Unconditionally close a <code>ServerSocket</code>.
 <p>
  Equivalent to <code>ServerSocket.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    ServerSocket socket = null;
    try {
        socket = new ServerSocket();
        // process socket
        socket.close();
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(socket);
    } 
  
@endcode
 @param sock the ServerSocket to close, may be null or already closed
 @since 2.2
 */
+ (void)closeQuietlyWithJavaNetServerSocket:(JavaNetServerSocket *)sock;

/*!
 @brief Unconditionally close a <code>Socket</code>.
 <p>
  Equivalent to <code>Socket.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    Socket socket = null;
    try {
        socket = new Socket("http://www.foo.com/", 80);
        // process socket
        socket.close();
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(socket);
    } 
  
@endcode
 @param sock the Socket to close, may be null or already closed
 @since 2.0
 */
+ (void)closeQuietlyWithJavaNetSocket:(JavaNetSocket *)sock;

/*!
 @brief Unconditionally close a <code>Writer</code>.
 <p>
  Equivalent to <code>Writer.close()</code>, except any exceptions will be ignored.
  This is typically used in finally blocks. 
 <p>
  Example code: 
 @code

    Writer out = null;
    try {
        out = new StringWriter();
        out.write("Hello World");
        out.close(); //close errors are handled
    } catch (Exception e) {
        // error handling
    } finally {
        IOUtils.closeQuietly(out);
    } 
  
@endcode
 @param output the Writer to close, may be null or already closed
 */
+ (void)closeQuietlyWithJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Compare the contents of two Streams to determine if they are equal or
  not.
 <p>
  This method buffers the input internally using 
 <code>BufferedInputStream</code> if they are not already buffered.
 @param input1 the first stream
 @param input2 the second stream
 @return true if the content of the streams are equal or they both don't
  exist, false otherwise
 @throw NullPointerExceptionif either input is null
 @throw IOExceptionif an I/O error occurs
 */
+ (jboolean)contentEqualsWithJavaIoInputStream:(JavaIoInputStream *)input1
                         withJavaIoInputStream:(JavaIoInputStream *)input2;

/*!
 @brief Compare the contents of two Readers to determine if they are equal or
  not.
 <p>
  This method buffers the input internally using 
 <code>BufferedReader</code> if they are not already buffered.
 @param input1 the first reader
 @param input2 the second reader
 @return true if the content of the readers are equal or they both don't
  exist, false otherwise
 @throw NullPointerExceptionif either input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (jboolean)contentEqualsWithJavaIoReader:(JavaIoReader *)input1
                         withJavaIoReader:(JavaIoReader *)input2;

/*!
 @brief Compare the contents of two Readers to determine if they are equal or
  not, ignoring EOL characters.
 <p>
  This method buffers the input internally using 
 <code>BufferedReader</code> if they are not already buffered.
 @param input1 the first reader
 @param input2 the second reader
 @return true if the content of the readers are equal (ignoring EOL differences),  false otherwise
 @throw NullPointerExceptionif either input is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jboolean)contentEqualsIgnoreEOLWithJavaIoReader:(JavaIoReader *)input1
                                  withJavaIoReader:(JavaIoReader *)input2;

/*!
 @brief Copy bytes from an <code>InputStream</code> to an 
 <code>OutputStream</code>.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  Large streams (over 2GB) will return a bytes copied value of 
 <code>-1</code> after the copy has completed since the correct
  number of bytes cannot be returned as an int. For large streams
  use the <code>copyLarge(InputStream, OutputStream)</code> method.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @return the number of bytes copied, or -1 if &gt; Integer.MAX_VALUE
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (jint)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
             withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from an <code>InputStream</code> to chars on a 
 <code>Writer</code> using the default character encoding of the platform.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  This method uses <code>InputStreamReader</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from an <code>InputStream</code> to chars on a 
 <code>Writer</code> using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  This method uses <code>InputStreamReader</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoWriter:(JavaIoWriter *)output
          withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from an <code>InputStream</code> to chars on a 
 <code>Writer</code> using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>InputStreamReader</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoWriter:(JavaIoWriter *)output
                       withNSString:(NSString *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>Reader</code> to bytes on an 
 <code>OutputStream</code> using the default character encoding of the
  platform, and calling flush.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
  Due to the implementation of OutputStreamWriter, this method performs a
  flush. 
 <p>
  This method uses <code>OutputStreamWriter</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)copy__WithJavaIoReader:(JavaIoReader *)input
        withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>Reader</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding, and
  calling flush.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  </p>
  <p>
  Due to the implementation of OutputStreamWriter, this method performs a
  flush. 
 </p>
  <p>
  This method uses <code>OutputStreamWriter</code>.
  </p>
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)copy__WithJavaIoReader:(JavaIoReader *)input
        withJavaIoOutputStream:(JavaIoOutputStream *)output
     withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>Reader</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding, and
  calling flush.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  Due to the implementation of OutputStreamWriter, this method performs a
  flush. 
 <p>
  This method uses <code>OutputStreamWriter</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)copy__WithJavaIoReader:(JavaIoReader *)input
        withJavaIoOutputStream:(JavaIoOutputStream *)output
                  withNSString:(NSString *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>Reader</code> to a <code>Writer</code>.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
  Large streams (over 2GB) will return a chars copied value of 
 <code>-1</code> after the copy has completed since the correct
  number of chars cannot be returned as an int. For large streams
  use the <code>copyLarge(Reader, Writer)</code> method.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @return the number of characters copied, or -1 if &gt; Integer.MAX_VALUE
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (jint)copy__WithJavaIoReader:(JavaIoReader *)input
              withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  The buffer size is given by <code>DEFAULT_BUFFER_SIZE</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @return the number of bytes copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.3
 */
+ (jlong)copyLargeWithJavaIoInputStream:(JavaIoInputStream *)input
                 withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>.
 <p>
  This method uses the provided buffer, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @param buffer the buffer to use for the copy
 @return the number of bytes copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoInputStream:(JavaIoInputStream *)input
                 withJavaIoOutputStream:(JavaIoOutputStream *)output
                          withByteArray:(IOSByteArray *)buffer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy some or all bytes from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>, optionally skipping input bytes.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
  The buffer size is given by <code>DEFAULT_BUFFER_SIZE</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @param inputOffset : number of bytes to skip from input before copying          -ve values are ignored
 @param length : number of bytes to copy. -ve means all
 @return the number of bytes copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoInputStream:(JavaIoInputStream *)input
                 withJavaIoOutputStream:(JavaIoOutputStream *)output
                               withLong:(jlong)inputOffset
                               withLong:(jlong)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy some or all bytes from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>, optionally skipping input bytes.
 <p>
  This method uses the provided buffer, so there is no need to use a 
 <code>BufferedInputStream</code>.
  <p>
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @param inputOffset : number of bytes to skip from input before copying          -ve values are ignored
 @param length : number of bytes to copy. -ve means all
 @param buffer the buffer to use for the copy
 @return the number of bytes copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoInputStream:(JavaIoInputStream *)input
                 withJavaIoOutputStream:(JavaIoOutputStream *)output
                               withLong:(jlong)inputOffset
                               withLong:(jlong)length
                          withByteArray:(IOSByteArray *)buffer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a large (over 2GB) <code>Reader</code> to a <code>Writer</code>.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
  The buffer size is given by <code>DEFAULT_BUFFER_SIZE</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @return the number of characters copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.3
 */
+ (jlong)copyLargeWithJavaIoReader:(JavaIoReader *)input
                  withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a large (over 2GB) <code>Reader</code> to a <code>Writer</code>.
 <p>
  This method uses the provided buffer, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param buffer the buffer to be used for the copy
 @return the number of characters copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoReader:(JavaIoReader *)input
                  withJavaIoWriter:(JavaIoWriter *)output
                     withCharArray:(IOSCharArray *)buffer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy some or all chars from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>, optionally skipping input chars.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
  The buffer size is given by <code>DEFAULT_BUFFER_SIZE</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param inputOffset : number of chars to skip from input before copying          -ve values are ignored
 @param length : number of chars to copy. -ve means all
 @return the number of chars copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoReader:(JavaIoReader *)input
                  withJavaIoWriter:(JavaIoWriter *)output
                          withLong:(jlong)inputOffset
                          withLong:(jlong)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy some or all chars from a large (over 2GB) <code>InputStream</code> to an 
 <code>OutputStream</code>, optionally skipping input chars.
 <p>
  This method uses the provided buffer, so there is no need to use a 
 <code>BufferedReader</code>.
  <p>
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param inputOffset : number of chars to skip from input before copying          -ve values are ignored
 @param length : number of chars to copy. -ve means all
 @param buffer the buffer to be used for the copy
 @return the number of chars copied
 @throw NullPointerExceptionif the input or output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.2
 */
+ (jlong)copyLargeWithJavaIoReader:(JavaIoReader *)input
                  withJavaIoWriter:(JavaIoWriter *)output
                          withLong:(jlong)inputOffset
                          withLong:(jlong)length
                     withCharArray:(IOSCharArray *)buffer OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Return an Iterator for the lines in an <code>InputStream</code>, using
  the character encoding specified (or default encoding if null).
 <p>
  <code>LineIterator</code> holds a reference to the open 
 <code>InputStream</code> specified here. When you have finished with
  the iterator you should close the stream to free internal resources.
  This can be done by closing the stream directly, or by calling 
 <code>LineIterator.close()</code> or <code>LineIterator.closeQuietly(LineIterator)</code>.
  <p>
  The recommended usage pattern is: 
 @code

  try {
    LineIterator it = IOUtils.lineIterator(stream, charset);
    while (it.hasNext()) {
      String line = it.nextLine();
      /// do something with line
    }
  } finally {
    IOUtils.closeQuietly(stream);
  } 
  
@endcode
 @param input the  <code> InputStream </code>  to read from, not null
 @param encoding the encoding to use, null means platform default
 @return an Iterator of the lines in the reader, never null
 @throw IllegalArgumentExceptionif the input is null
 @throw IOExceptionif an I/O error occurs, such as if the encoding is invalid
 @since 2.3
 */
+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoInputStream:(JavaIoInputStream *)input
                                            withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Return an Iterator for the lines in an <code>InputStream</code>, using
  the character encoding specified (or default encoding if null).
 <p>
  <code>LineIterator</code> holds a reference to the open 
 <code>InputStream</code> specified here. When you have finished with
  the iterator you should close the stream to free internal resources.
  This can be done by closing the stream directly, or by calling 
 <code>LineIterator.close()</code> or <code>LineIterator.closeQuietly(LineIterator)</code>.
  <p>
  The recommended usage pattern is: 
 @code

  try {
    LineIterator it = IOUtils.lineIterator(stream, "UTF-8");
    while (it.hasNext()) {
      String line = it.nextLine();
      /// do something with line
    }
  } finally {
    IOUtils.closeQuietly(stream);
  } 
  
@endcode
 @param input the  <code> InputStream </code>  to read from, not null
 @param encoding the encoding to use, null means platform default
 @return an Iterator of the lines in the reader, never null
 @throw IllegalArgumentExceptionif the input is null
 @throw IOExceptionif an I/O error occurs, such as if the encoding is invalid
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.2
 */
+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoInputStream:(JavaIoInputStream *)input
                                                         withNSString:(NSString *)encoding;

/*!
 @brief Return an Iterator for the lines in a <code>Reader</code>.
 <p>
  <code>LineIterator</code> holds a reference to the open 
 <code>Reader</code> specified here. When you have finished with the
  iterator you should close the reader to free internal resources.
  This can be done by closing the reader directly, or by calling 
 <code>LineIterator.close()</code> or <code>LineIterator.closeQuietly(LineIterator)</code>.
  <p>
  The recommended usage pattern is: 
 @code

  try {
    LineIterator it = IOUtils.lineIterator(reader);
    while (it.hasNext()) {
      String line = it.nextLine();
      /// do something with line
    }
  } finally {
    IOUtils.closeQuietly(reader);
  } 
  
@endcode
 @param reader the  <code> Reader </code>  to read from, not null
 @return an Iterator of the lines in the reader, never null
 @throw IllegalArgumentExceptionif the reader is null
 @since 1.2
 */
+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Read bytes from an input stream.
 This implementation guarantees that it will read as many bytes
  as possible before giving up; this may not always be the case for
  subclasses of <code>InputStream</code>.
 @param input where to read input from
 @param buffer destination
 @return actual length read; may be less than requested if EOF was reached
 @throw IOExceptionif a read error occurs
 @since 2.2
 */
+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)input
                    withByteArray:(IOSByteArray *)buffer;

/*!
 @brief Read bytes from an input stream.
 This implementation guarantees that it will read as many bytes
  as possible before giving up; this may not always be the case for
  subclasses of <code>InputStream</code>.
 @param input where to read input from
 @param buffer destination
 @param offset inital offset into buffer
 @param length length to read, must be  > = 0
 @return actual length read; may be less than requested if EOF was reached
 @throw IOExceptionif a read error occurs
 @since 2.2
 */
+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)input
                    withByteArray:(IOSByteArray *)buffer
                          withInt:(jint)offset
                          withInt:(jint)length;

/*!
 @brief Read characters from an input character stream.
 This implementation guarantees that it will read as many characters
  as possible before giving up; this may not always be the case for
  subclasses of <code>Reader</code>.
 @param input where to read input from
 @param buffer destination
 @return actual length read; may be less than requested if EOF was reached
 @throw IOExceptionif a read error occurs
 @since 2.2
 */
+ (jint)readWithJavaIoReader:(JavaIoReader *)input
               withCharArray:(IOSCharArray *)buffer;

/*!
 @brief Read characters from an input character stream.
 This implementation guarantees that it will read as many characters
  as possible before giving up; this may not always be the case for
  subclasses of <code>Reader</code>.
 @param input where to read input from
 @param buffer destination
 @param offset inital offset into buffer
 @param length length to read, must be  > = 0
 @return actual length read; may be less than requested if EOF was reached
 @throw IOExceptionif a read error occurs
 @since 2.2
 */
+ (jint)readWithJavaIoReader:(JavaIoReader *)input
               withCharArray:(IOSCharArray *)buffer
                     withInt:(jint)offset
                     withInt:(jint)length;

/*!
 @brief Read the requested number of bytes or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>int, int)</code> may
  not read as many bytes as requested (most likely because of reaching EOF).
 @param input where to read input from
 @param buffer destination
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif length is negative
 @throw EOFExceptionif the number of bytes read was incorrect
 @since 2.2
 */
+ (void)readFullyWithJavaIoInputStream:(JavaIoInputStream *)input
                         withByteArray:(IOSByteArray *)buffer;

/*!
 @brief Read the requested number of bytes or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>int, int)</code> may
  not read as many bytes as requested (most likely because of reaching EOF).
 @param input where to read input from
 @param buffer destination
 @param offset inital offset into buffer
 @param length length to read, must be  > = 0
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif length is negative
 @throw EOFExceptionif the number of bytes read was incorrect
 @since 2.2
 */
+ (void)readFullyWithJavaIoInputStream:(JavaIoInputStream *)input
                         withByteArray:(IOSByteArray *)buffer
                               withInt:(jint)offset
                               withInt:(jint)length;

/*!
 @brief Read the requested number of characters or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>int, int)</code> may
  not read as many characters as requested (most likely because of reaching EOF).
 @param input where to read input from
 @param buffer destination
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif length is negative
 @throw EOFExceptionif the number of characters read was incorrect
 @since 2.2
 */
+ (void)readFullyWithJavaIoReader:(JavaIoReader *)input
                    withCharArray:(IOSCharArray *)buffer;

/*!
 @brief Read the requested number of characters or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>int, int)</code> may
  not read as many characters as requested (most likely because of reaching EOF).
 @param input where to read input from
 @param buffer destination
 @param offset inital offset into buffer
 @param length length to read, must be  > = 0
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif length is negative
 @throw EOFExceptionif the number of characters read was incorrect
 @since 2.2
 */
+ (void)readFullyWithJavaIoReader:(JavaIoReader *)input
                    withCharArray:(IOSCharArray *)buffer
                          withInt:(jint)offset
                          withInt:(jint)length;

/*!
 @brief Get the contents of an <code>InputStream</code> as a list of Strings,
  one entry per line, using the default character encoding of the platform.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from, not null
 @return the list of Strings, never null
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (id<JavaUtilList>)readLinesWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Get the contents of an <code>InputStream</code> as a list of Strings,
  one entry per line, using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from, not null
 @param encoding the encoding to use, null means platform default
 @return the list of Strings, never null
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (id<JavaUtilList>)readLinesWithJavaIoInputStream:(JavaIoInputStream *)input
                         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Get the contents of an <code>InputStream</code> as a list of Strings,
  one entry per line, using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from, not null
 @param encoding the encoding to use, null means platform default
 @return the list of Strings, never null
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (id<JavaUtilList>)readLinesWithJavaIoInputStream:(JavaIoInputStream *)input
                                      withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of a <code>Reader</code> as a list of Strings,
  one entry per line.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from, not null
 @return the list of Strings, never null
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (id<JavaUtilList>)readLinesWithJavaIoReader:(JavaIoReader *)input;

/*!
 @brief Skip bytes from an input byte stream.
 This implementation guarantees that it will read as many bytes
  as possible before giving up; this may not always be the case for
  subclasses of <code>Reader</code>.
 @param input byte stream to skip
 @param toSkip number of bytes to skip.
 @return number of bytes actually skipped.
 - seealso: InputStream#skip(long)
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif toSkip is negative
 @since 2.0
 */
+ (jlong)skipWithJavaIoInputStream:(JavaIoInputStream *)input
                          withLong:(jlong)toSkip;

/*!
 @brief Skip characters from an input character stream.
 This implementation guarantees that it will read as many characters
  as possible before giving up; this may not always be the case for
  subclasses of <code>Reader</code>.
 @param input character stream to skip
 @param toSkip number of characters to skip.
 @return number of characters actually skipped.
 - seealso: Reader#skip(long)
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif toSkip is negative
 @since 2.0
 */
+ (jlong)skipWithJavaIoReader:(JavaIoReader *)input
                     withLong:(jlong)toSkip;

/*!
 @brief Skip the requested number of bytes or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>InputStream.skip(long)</code> may
  not skip as many bytes as requested (most likely because of reaching EOF).
 @param input stream to skip
 @param toSkip the number of bytes to skip
 - seealso: InputStream#skip(long)
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif toSkip is negative
 @throw EOFExceptionif the number of bytes skipped was incorrect
 @since 2.0
 */
+ (void)skipFullyWithJavaIoInputStream:(JavaIoInputStream *)input
                              withLong:(jlong)toSkip;

/*!
 @brief Skip the requested number of characters or fail if there are not enough left.
 <p>
  This allows for the possibility that <code>Reader.skip(long)</code> may
  not skip as many characters as requested (most likely because of reaching EOF).
 @param input stream to skip
 @param toSkip the number of characters to skip
 - seealso: Reader#skip(long)
 @throw IOExceptionif there is a problem reading the file
 @throw IllegalArgumentExceptionif toSkip is negative
 @throw EOFExceptionif the number of characters skipped was incorrect
 @since 2.0
 */
+ (void)skipFullyWithJavaIoReader:(JavaIoReader *)input
                         withLong:(jlong)toSkip;

/*!
 @brief Fetches entire contents of an <code>InputStream</code> and represent
  same data as result InputStream.
 <p>
  This method is useful where, 
 <ul>
  <li>Source InputStream is slow.</li>
  <li>It has network resources associated, so we cannot keep it open for
  long time.</li>
  <li>It has network timeout associated.</li>
  </ul>
  It can be used in favor of <code>toByteArray(InputStream)</code>, since it
  avoids unnecessary allocation and copy of byte[].<br>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input Stream to be fully buffered.
 @return A fully buffered stream.
 @throw IOExceptionif an I/O error occurs
 @since 2.0
 */
+ (JavaIoInputStream *)toBufferedInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Returns the given reader if it is a <code>BufferedReader</code>, otherwise creates a toBufferedReader for the given
  reader.
 @param reader the reader to wrap or return
 @return the given reader or a new <code>BufferedReader</code> for the given reader
 @since 2.2
 */
+ (JavaIoBufferedReader *)toBufferedReaderWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from
 @return the requested byte array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 */
+ (IOSByteArray *)toByteArrayWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.
 Use this method instead of <code>toByteArray(InputStream)</code>
  when <code>InputStream</code> size is known
 @param input the  <code> InputStream </code>  to read from
 @param size the size of  <code> InputStream </code>
 @return the requested byte array
 @throw IOExceptionif an I/O error occurs or <code>InputStream</code> size differ from parameter size
 @throw IllegalArgumentExceptionif size is less than zero
 @since 2.1
 */
+ (IOSByteArray *)toByteArrayWithJavaIoInputStream:(JavaIoInputStream *)input
                                           withInt:(jint)size;

/*!
 @brief Get contents of an <code>InputStream</code> as a <code>byte[]</code>.
 Use this method instead of <code>toByteArray(InputStream)</code>
  when <code>InputStream</code> size is known. 
 <b>NOTE:</b> the method checks that the length can safely be cast to an int without truncation
  before using <code>int)</code> to read into the byte array.
  (Arrays can have no more than Integer.MAX_VALUE entries anyway)
 @param input the  <code> InputStream </code>  to read from
 @param size the size of  <code> InputStream </code>
 @return the requested byte array
 @throw IOExceptionif an I/O error occurs or <code>InputStream</code> size differ from parameter size
 @throw IllegalArgumentExceptionif size is less than zero or size is greater than Integer.MAX_VALUE
 - seealso: IOUtils#toByteArray(java.io.InputStream, int)
 @since 2.1
 */
+ (IOSByteArray *)toByteArrayWithJavaIoInputStream:(JavaIoInputStream *)input
                                          withLong:(jlong)size;

/*!
 @brief Get the contents of a <code>Reader</code> as a <code>byte[]</code>
  using the default character encoding of the platform.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from
 @return the requested byte array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 */
+ (IOSByteArray *)toByteArrayWithJavaIoReader:(JavaIoReader *)input;

/*!
 @brief Get the contents of a <code>Reader</code> as a <code>byte[]</code>
  using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested byte array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (IOSByteArray *)toByteArrayWithJavaIoReader:(JavaIoReader *)input
                    withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Get the contents of a <code>Reader</code> as a <code>byte[]</code>
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested byte array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (IOSByteArray *)toByteArrayWithJavaIoReader:(JavaIoReader *)input
                                 withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of a <code>String</code> as a <code>byte[]</code>
  using the default character encoding of the platform.
 <p>
  This is the same as <code>String.getBytes()</code>.
 @param input the  <code> String </code>  to convert
 @return the requested byte array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs (never occurs)
 */
+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)input;

/*!
 @brief Get the contents of a <code>URI</code> as a <code>byte[]</code>.
 @param uri the 
  <code> URI </code>  to read
 @return the requested byte array
 @throw NullPointerException
 if the uri is null
 @throw IOException
 if an I/O exception occurs
 @since 2.4
 */
+ (IOSByteArray *)toByteArrayWithJavaNetURI:(JavaNetURI *)uri;

/*!
 @brief Get the contents of a <code>URL</code> as a <code>byte[]</code>.
 @param url the 
  <code> URL </code>  to read
 @return the requested byte array
 @throw NullPointerException
 if the input is null
 @throw IOException
 if an I/O exception occurs
 @since 2.4
 */
+ (IOSByteArray *)toByteArrayWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Get the contents of a <code>URLConnection</code> as a <code>byte[]</code>.
 @param urlConn the 
  <code> URLConnection </code>  to read
 @return the requested byte array
 @throw NullPointerException
 if the urlConn is null
 @throw IOException
 if an I/O exception occurs
 @since 2.4
 */
+ (IOSByteArray *)toByteArrayWithJavaNetURLConnection:(JavaNetURLConnection *)urlConn;

/*!
 @brief Get the contents of an <code>InputStream</code> as a character array
  using the default character encoding of the platform.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param is the  <code> InputStream </code>  to read from
 @return the requested character array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (IOSCharArray *)toCharArrayWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Get the contents of an <code>InputStream</code> as a character array
  using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param is the  <code> InputStream </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested character array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (IOSCharArray *)toCharArrayWithJavaIoInputStream:(JavaIoInputStream *)is
                         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Get the contents of an <code>InputStream</code> as a character array
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param is the  <code> InputStream </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested character array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (IOSCharArray *)toCharArrayWithJavaIoInputStream:(JavaIoInputStream *)is
                                      withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of a <code>Reader</code> as a character array.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from
 @return the requested character array
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (IOSCharArray *)toCharArrayWithJavaIoReader:(JavaIoReader *)input;

/*!
 @brief Convert the specified CharSequence to an input stream, encoded as bytes
  using the default character encoding of the platform.
 @param input the CharSequence to convert
 @return an input stream
 @since 2.0
 */
+ (JavaIoInputStream *)toInputStreamWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

/*!
 @brief Convert the specified CharSequence to an input stream, encoded as bytes
  using the specified character encoding.
 @param input the CharSequence to convert
 @param encoding the encoding to use, null means platform default
 @return an input stream
 @since 2.3
 */
+ (JavaIoInputStream *)toInputStreamWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Convert the specified CharSequence to an input stream, encoded as bytes
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
 @param input the CharSequence to convert
 @param encoding the encoding to use, null means platform default
 @return an input stream
 @throw IOExceptionif the encoding is invalid
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 2.0
 */
+ (JavaIoInputStream *)toInputStreamWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                                withNSString:(NSString *)encoding;

/*!
 @brief Convert the specified string to an input stream, encoded as bytes
  using the default character encoding of the platform.
 @param input the string to convert
 @return an input stream
 @since 1.1
 */
+ (JavaIoInputStream *)toInputStreamWithNSString:(NSString *)input;

/*!
 @brief Convert the specified string to an input stream, encoded as bytes
  using the specified character encoding.
 @param input the string to convert
 @param encoding the encoding to use, null means platform default
 @return an input stream
 @since 2.3
 */
+ (JavaIoInputStream *)toInputStreamWithNSString:(NSString *)input
                       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Convert the specified string to an input stream, encoded as bytes
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
 @param input the string to convert
 @param encoding the encoding to use, null means platform default
 @return an input stream
 @throw IOExceptionif the encoding is invalid
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (JavaIoInputStream *)toInputStreamWithNSString:(NSString *)input
                                    withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of a <code>byte[]</code> as a String
  using the default character encoding of the platform.
 @param input the byte array to read from
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs (never occurs)
 */
+ (NSString *)toStringWithByteArray:(IOSByteArray *)input;

/*!
 @brief Get the contents of a <code>byte[]</code> as a String
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
 @param input the byte array to read from
 @param encoding the encoding to use, null means platform default
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs (never occurs)
 */
+ (NSString *)toStringWithByteArray:(IOSByteArray *)input
                       withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of an <code>InputStream</code> as a String
  using the default character encoding of the platform.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 */
+ (NSString *)toStringWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Get the contents of an <code>InputStream</code> as a String
  using the specified character encoding.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
  </p>
 @param input the  <code> InputStream </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (NSString *)toStringWithJavaIoInputStream:(JavaIoInputStream *)input
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Get the contents of an <code>InputStream</code> as a String
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input the  <code> InputStream </code>  to read from
 @param encoding the encoding to use, null means platform default
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 */
+ (NSString *)toStringWithJavaIoInputStream:(JavaIoInputStream *)input
                               withNSString:(NSString *)encoding;

/*!
 @brief Get the contents of a <code>Reader</code> as a String.
 <p>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedReader</code>.
 @param input the  <code> Reader </code>  to read from
 @return the requested String
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 */
+ (NSString *)toStringWithJavaIoReader:(JavaIoReader *)input;

/*!
 @brief Gets the contents at the given URI.
 @param uri The URI source.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @since 2.1
 */
+ (NSString *)toStringWithJavaNetURI:(JavaNetURI *)uri;

/*!
 @brief Gets the contents at the given URI.
 @param uri The URI source.
 @param encoding The encoding name for the URL contents.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @since 2.3.
 */
+ (NSString *)toStringWithJavaNetURI:(JavaNetURI *)uri
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Gets the contents at the given URI.
 @param uri The URI source.
 @param encoding The encoding name for the URL contents.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 2.1
 */
+ (NSString *)toStringWithJavaNetURI:(JavaNetURI *)uri
                        withNSString:(NSString *)encoding;

/*!
 @brief Gets the contents at the given URL.
 @param url The URL source.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @since 2.1
 */
+ (NSString *)toStringWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Gets the contents at the given URL.
 @param url The URL source.
 @param encoding The encoding name for the URL contents.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @since 2.3
 */
+ (NSString *)toStringWithJavaNetURL:(JavaNetURL *)url
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Gets the contents at the given URL.
 @param url The URL source.
 @param encoding The encoding name for the URL contents.
 @return The contents of the URL as a String.
 @throw IOExceptionif an I/O exception occurs.
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 2.1
 */
+ (NSString *)toStringWithJavaNetURL:(JavaNetURL *)url
                        withNSString:(NSString *)encoding;

/*!
 @brief Writes bytes from a <code>byte[]</code> to an <code>OutputStream</code>.
 @param data the byte array to write, do not modify during output,  null ignored
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithByteArray:(IOSByteArray *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>
  using the default character encoding of the platform.
 <p>
  This method uses <code>String.String(byte[])</code>.
 @param data the byte array to write, do not modify during output,  null ignored
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithByteArray:(IOSByteArray *)data
          withJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>
  using the specified character encoding.
 <p>
  This method uses <code>String)</code>.
 @param data the byte array to write, do not modify during output,  null ignored
 @param output the  <code> Writer </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)writeWithByteArray:(IOSByteArray *)data
          withJavaIoWriter:(JavaIoWriter *)output
 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>
  using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>String)</code>.
 @param data the byte array to write, do not modify during output,  null ignored
 @param output the  <code> Writer </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)writeWithByteArray:(IOSByteArray *)data
          withJavaIoWriter:(JavaIoWriter *)output
              withNSString:(NSString *)encoding;

/*!
 @brief Writes chars from a <code>char[]</code> to bytes on an 
 <code>OutputStream</code>.
 <p>
  This method uses <code>String.String(char[])</code> and 
 <code>String.getBytes()</code>.
 @param data the char array to write, do not modify during output,  null ignored
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithCharArray:(IOSCharArray *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes chars from a <code>char[]</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  This method uses <code>String.String(char[])</code> and 
 <code>String.getBytes(String)</code>.
 @param data the char array to write, do not modify during output,  null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)writeWithCharArray:(IOSCharArray *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)output
 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes chars from a <code>char[]</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>String.String(char[])</code> and 
 <code>String.getBytes(String)</code>.
 @param data the char array to write, do not modify during output,  null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)writeWithCharArray:(IOSCharArray *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)output
              withNSString:(NSString *)encoding;

/*!
 @brief Writes chars from a <code>char[]</code> to a <code>Writer</code>
  using the default character encoding of the platform.
 @param data the char array to write, do not modify during output,  null ignored
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithCharArray:(IOSCharArray *)data
          withJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Writes chars from a <code>CharSequence</code> to bytes on an 
 <code>OutputStream</code> using the default character encoding of the
  platform.
 <p>
  This method uses <code>String.getBytes()</code>.
 @param data the  <code> CharSequence </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.0
 */
+ (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes chars from a <code>CharSequence</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  This method uses <code>String.getBytes(String)</code>.
 @param data the  <code> CharSequence </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withJavaIoOutputStream:(JavaIoOutputStream *)output
            withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes chars from a <code>CharSequence</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>String.getBytes(String)</code>.
 @param data the  <code> CharSequence </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 2.0
 */
+ (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withJavaIoOutputStream:(JavaIoOutputStream *)output
                         withNSString:(NSString *)encoding;

/*!
 @brief Writes chars from a <code>CharSequence</code> to a <code>Writer</code>.
 @param data the  <code> CharSequence </code>  to write, null ignored
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.0
 */
+ (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)data
                     withJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Writes chars from a <code>String</code> to bytes on an 
 <code>OutputStream</code> using the default character encoding of the
  platform.
 <p>
  This method uses <code>String.getBytes()</code>.
 @param data the  <code> String </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithNSString:(NSString *)data
   withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes chars from a <code>String</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  This method uses <code>String.getBytes(String)</code>.
 @param data the  <code> String </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)writeWithNSString:(NSString *)data
   withJavaIoOutputStream:(JavaIoOutputStream *)output
withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes chars from a <code>String</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>String.getBytes(String)</code>.
 @param data the  <code> String </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)writeWithNSString:(NSString *)data
   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withNSString:(NSString *)encoding;

/*!
 @brief Writes chars from a <code>String</code> to a <code>Writer</code>.
 @param data the  <code> String </code>  to write, null ignored
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithNSString:(NSString *)data
         withJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Writes chars from a <code>StringBuffer</code> to bytes on an 
 <code>OutputStream</code> using the default character encoding of the
  platform.
 <p>
  This method uses <code>String.getBytes()</code>.
 @param data the  <code> StringBuffer </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithJavaLangStringBuffer:(JavaLangStringBuffer *)data
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes chars from a <code>StringBuffer</code> to bytes on an 
 <code>OutputStream</code> using the specified character encoding.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
  <p>
  This method uses <code>String.getBytes(String)</code>.
 @param data the  <code> StringBuffer </code>  to write, null ignored
 @param output the  <code> OutputStream </code>  to write to
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)writeWithJavaLangStringBuffer:(JavaLangStringBuffer *)data
               withJavaIoOutputStream:(JavaIoOutputStream *)output
                         withNSString:(NSString *)encoding;

/*!
 @brief Writes chars from a <code>StringBuffer</code> to a <code>Writer</code>.
 @param data the  <code> StringBuffer </code>  to write, null ignored
 @param output the  <code> Writer </code>  to write to
 @throw NullPointerExceptionif output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeWithJavaLangStringBuffer:(JavaLangStringBuffer *)data
                     withJavaIoWriter:(JavaIoWriter *)output;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  an <code>OutputStream</code> line by line, using the default character
  encoding of the platform and the specified line ending.
 @param lines the lines to write, null entries produce blank lines
 @param lineEnding the line separator to use, null is system default
 @param output the  <code> OutputStream </code>  to write to, not null, not closed
 @throw NullPointerExceptionif the output is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeLinesWithJavaUtilCollection:(id<JavaUtilCollection>)lines
                            withNSString:(NSString *)lineEnding
                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  an <code>OutputStream</code> line by line, using the specified character
  encoding and the specified line ending.
 @param lines the lines to write, null entries produce blank lines
 @param lineEnding the line separator to use, null is system default
 @param output the  <code> OutputStream </code>  to write to, not null, not closed
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the output is null
 @throw IOExceptionif an I/O error occurs
 @since 2.3
 */
+ (void)writeLinesWithJavaUtilCollection:(id<JavaUtilCollection>)lines
                            withNSString:(NSString *)lineEnding
                  withJavaIoOutputStream:(JavaIoOutputStream *)output
               withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  an <code>OutputStream</code> line by line, using the specified character
  encoding and the specified line ending.
 <p>
  Character encoding names can be found at 
 <a href="http://www.iana.org/assignments/character-sets">IANA</a>.
 @param lines the lines to write, null entries produce blank lines
 @param lineEnding the line separator to use, null is system default
 @param output the  <code> OutputStream </code>  to write to, not null, not closed
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the output is null
 @throw IOExceptionif an I/O error occurs
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (void)writeLinesWithJavaUtilCollection:(id<JavaUtilCollection>)lines
                            withNSString:(NSString *)lineEnding
                  withJavaIoOutputStream:(JavaIoOutputStream *)output
                            withNSString:(NSString *)encoding;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to a 
 <code>Writer</code> line by line, using the specified line ending.
 @param lines the lines to write, null entries produce blank lines
 @param lineEnding the line separator to use, null is system default
 @param writer the  <code> Writer </code>  to write to, not null, not closed
 @throw NullPointerExceptionif the input is null
 @throw IOExceptionif an I/O error occurs
 @since 1.1
 */
+ (void)writeLinesWithJavaUtilCollection:(id<JavaUtilCollection>)lines
                            withNSString:(NSString *)lineEnding
                        withJavaIoWriter:(JavaIoWriter *)writer;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoIOUtils)

/*!
 @brief The Unix directory separator character.
 */
inline jchar OrgApacheCommonsIoIOUtils_get_DIR_SEPARATOR_UNIX(void);
#define OrgApacheCommonsIoIOUtils_DIR_SEPARATOR_UNIX '/'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoIOUtils, DIR_SEPARATOR_UNIX, jchar)

/*!
 @brief The Windows directory separator character.
 */
inline jchar OrgApacheCommonsIoIOUtils_get_DIR_SEPARATOR_WINDOWS(void);
#define OrgApacheCommonsIoIOUtils_DIR_SEPARATOR_WINDOWS '\\'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoIOUtils, DIR_SEPARATOR_WINDOWS, jchar)

/*!
 @brief The system directory separator character.
 */
inline jchar OrgApacheCommonsIoIOUtils_get_DIR_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jchar OrgApacheCommonsIoIOUtils_DIR_SEPARATOR;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheCommonsIoIOUtils, DIR_SEPARATOR, jchar)

/*!
 @brief The Unix line separator string.
 */
inline NSString *OrgApacheCommonsIoIOUtils_get_LINE_SEPARATOR_UNIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_LINE_SEPARATOR_UNIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoIOUtils, LINE_SEPARATOR_UNIX, NSString *)

/*!
 @brief The Windows line separator string.
 */
inline NSString *OrgApacheCommonsIoIOUtils_get_LINE_SEPARATOR_WINDOWS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_LINE_SEPARATOR_WINDOWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoIOUtils, LINE_SEPARATOR_WINDOWS, NSString *)

/*!
 @brief The system line separator string.
 */
inline NSString *OrgApacheCommonsIoIOUtils_get_LINE_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_LINE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoIOUtils, LINE_SEPARATOR, NSString *)

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_init(OrgApacheCommonsIoIOUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsIoIOUtils *new_OrgApacheCommonsIoIOUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoIOUtils *create_OrgApacheCommonsIoIOUtils_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeWithJavaNetURLConnection_(JavaNetURLConnection *conn);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoReader_(JavaIoReader *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoWriter_(JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaNetSocket_(JavaNetSocket *sock);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaNioChannelsSelector_(JavaNioChannelsSelector *selector);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaNetServerSocket_(JavaNetServerSocket *sock);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toBufferedInputStreamWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT JavaIoBufferedReader *OrgApacheCommonsIoIOUtils_toBufferedReaderWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoInputStream_withLong_(JavaIoInputStream *input, jlong size);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoInputStream_withInt_(JavaIoInputStream *input, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoReader_(JavaIoReader *input);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoReader_withJavaNioCharsetCharset_(JavaIoReader *input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoReader_withNSString_(JavaIoReader *input, NSString *encoding);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithNSString_(NSString *input);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaNetURI_(JavaNetURI *uri);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoIOUtils_toByteArrayWithJavaNetURLConnection_(JavaNetURLConnection *urlConn);

FOUNDATION_EXPORT IOSCharArray *OrgApacheCommonsIoIOUtils_toCharArrayWithJavaIoInputStream_(JavaIoInputStream *is);

FOUNDATION_EXPORT IOSCharArray *OrgApacheCommonsIoIOUtils_toCharArrayWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *is, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT IOSCharArray *OrgApacheCommonsIoIOUtils_toCharArrayWithJavaIoInputStream_withNSString_(JavaIoInputStream *is, NSString *encoding);

FOUNDATION_EXPORT IOSCharArray *OrgApacheCommonsIoIOUtils_toCharArrayWithJavaIoReader_(JavaIoReader *input);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaIoInputStream_withNSString_(JavaIoInputStream *input, NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaIoReader_(JavaIoReader *input);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURI_(JavaNetURI *uri);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURI_withJavaNioCharsetCharset_(JavaNetURI *uri, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURI_withNSString_(JavaNetURI *uri, NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURL_withJavaNioCharsetCharset_(JavaNetURL *url, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithJavaNetURL_withNSString_(JavaNetURL *url, NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithByteArray_(IOSByteArray *input);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoIOUtils_toStringWithByteArray_withNSString_(IOSByteArray *input, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoIOUtils_readLinesWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoIOUtils_readLinesWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoIOUtils_readLinesWithJavaIoInputStream_withNSString_(JavaIoInputStream *input, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoIOUtils_readLinesWithJavaIoReader_(JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoIOUtils_lineIteratorWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoIOUtils_lineIteratorWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoIOUtils_lineIteratorWithJavaIoInputStream_withNSString_(JavaIoInputStream *input, NSString *encoding);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithJavaLangCharSequence_(id<JavaLangCharSequence> input);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithJavaLangCharSequence_withJavaNioCharsetCharset_(id<JavaLangCharSequence> input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> input, NSString *encoding);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithNSString_(NSString *input);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithNSString_withJavaNioCharsetCharset_(NSString *input, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoIOUtils_toInputStreamWithNSString_withNSString_(NSString *input, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithByteArray_withJavaIoOutputStream_(IOSByteArray *data, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithByteArray_withJavaIoWriter_(IOSByteArray *data, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithByteArray_withJavaIoWriter_withJavaNioCharsetCharset_(IOSByteArray *data, JavaIoWriter *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithByteArray_withJavaIoWriter_withNSString_(IOSByteArray *data, JavaIoWriter *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithCharArray_withJavaIoWriter_(IOSCharArray *data, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithCharArray_withJavaIoOutputStream_(IOSCharArray *data, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithCharArray_withJavaIoOutputStream_withJavaNioCharsetCharset_(IOSCharArray *data, JavaIoOutputStream *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithCharArray_withJavaIoOutputStream_withNSString_(IOSCharArray *data, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangCharSequence_withJavaIoWriter_(id<JavaLangCharSequence> data, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangCharSequence_withJavaIoOutputStream_(id<JavaLangCharSequence> data, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangCharSequence_withJavaIoOutputStream_withJavaNioCharsetCharset_(id<JavaLangCharSequence> data, JavaIoOutputStream *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangCharSequence_withJavaIoOutputStream_withNSString_(id<JavaLangCharSequence> data, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithNSString_withJavaIoWriter_(NSString *data, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithNSString_withJavaIoOutputStream_(NSString *data, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithNSString_withJavaIoOutputStream_withJavaNioCharsetCharset_(NSString *data, JavaIoOutputStream *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithNSString_withJavaIoOutputStream_withNSString_(NSString *data, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangStringBuffer_withJavaIoWriter_(JavaLangStringBuffer *data, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangStringBuffer_withJavaIoOutputStream_(JavaLangStringBuffer *data, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeWithJavaLangStringBuffer_withJavaIoOutputStream_withNSString_(JavaLangStringBuffer *data, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeLinesWithJavaUtilCollection_withNSString_withJavaIoOutputStream_(id<JavaUtilCollection> lines, NSString *lineEnding, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeLinesWithJavaUtilCollection_withNSString_withJavaIoOutputStream_withJavaNioCharsetCharset_(id<JavaUtilCollection> lines, NSString *lineEnding, JavaIoOutputStream *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeLinesWithJavaUtilCollection_withNSString_withJavaIoOutputStream_withNSString_(id<JavaUtilCollection> lines, NSString *lineEnding, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_writeLinesWithJavaUtilCollection_withNSString_withJavaIoWriter_(id<JavaUtilCollection> lines, NSString *lineEnding, JavaIoWriter *writer);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoInputStream_withJavaIoOutputStream_withByteArray_(JavaIoInputStream *input, JavaIoOutputStream *output, IOSByteArray *buffer);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoInputStream_withJavaIoOutputStream_withLong_withLong_(JavaIoInputStream *input, JavaIoOutputStream *output, jlong inputOffset, jlong length);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoInputStream_withJavaIoOutputStream_withLong_withLong_withByteArray_(JavaIoInputStream *input, JavaIoOutputStream *output, jlong inputOffset, jlong length, IOSByteArray *buffer);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoWriter_(JavaIoInputStream *input, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoWriter_withJavaNioCharsetCharset_(JavaIoInputStream *input, JavaIoWriter *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoWriter_withNSString_(JavaIoInputStream *input, JavaIoWriter *output, NSString *encoding);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_copy__WithJavaIoReader_withJavaIoWriter_(JavaIoReader *input, JavaIoWriter *output);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoReader_withJavaIoWriter_(JavaIoReader *input, JavaIoWriter *output);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoReader_withJavaIoWriter_withCharArray_(JavaIoReader *input, JavaIoWriter *output, IOSCharArray *buffer);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoReader_withJavaIoWriter_withLong_withLong_(JavaIoReader *input, JavaIoWriter *output, jlong inputOffset, jlong length);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoReader_withJavaIoWriter_withLong_withLong_withCharArray_(JavaIoReader *input, JavaIoWriter *output, jlong inputOffset, jlong length, IOSCharArray *buffer);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoReader_withJavaIoOutputStream_(JavaIoReader *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoReader_withJavaIoOutputStream_withJavaNioCharsetCharset_(JavaIoReader *input, JavaIoOutputStream *output, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_copy__WithJavaIoReader_withJavaIoOutputStream_withNSString_(JavaIoReader *input, JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoIOUtils_contentEqualsWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *input1, JavaIoInputStream *input2);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoIOUtils_contentEqualsWithJavaIoReader_withJavaIoReader_(JavaIoReader *input1, JavaIoReader *input2);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoIOUtils_contentEqualsIgnoreEOLWithJavaIoReader_withJavaIoReader_(JavaIoReader *input1, JavaIoReader *input2);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_skipWithJavaIoInputStream_withLong_(JavaIoInputStream *input, jlong toSkip);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoIOUtils_skipWithJavaIoReader_withLong_(JavaIoReader *input, jlong toSkip);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_skipFullyWithJavaIoInputStream_withLong_(JavaIoInputStream *input, jlong toSkip);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_skipFullyWithJavaIoReader_withLong_(JavaIoReader *input, jlong toSkip);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_readWithJavaIoReader_withCharArray_withInt_withInt_(JavaIoReader *input, IOSCharArray *buffer, jint offset, jint length);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_readWithJavaIoReader_withCharArray_(JavaIoReader *input, IOSCharArray *buffer);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_readWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *input, IOSByteArray *buffer, jint offset, jint length);

FOUNDATION_EXPORT jint OrgApacheCommonsIoIOUtils_readWithJavaIoInputStream_withByteArray_(JavaIoInputStream *input, IOSByteArray *buffer);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_readFullyWithJavaIoReader_withCharArray_withInt_withInt_(JavaIoReader *input, IOSCharArray *buffer, jint offset, jint length);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_readFullyWithJavaIoReader_withCharArray_(JavaIoReader *input, IOSCharArray *buffer);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *input, IOSByteArray *buffer, jint offset, jint length);

FOUNDATION_EXPORT void OrgApacheCommonsIoIOUtils_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *input, IOSByteArray *buffer);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoIOUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoIOUtils")
