//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FileCleaningTracker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFileCleaningTracker")
#ifdef RESTRICT_OrgApacheCommonsIoFileCleaningTracker
#define INCLUDE_ALL_OrgApacheCommonsIoFileCleaningTracker 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFileCleaningTracker 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFileCleaningTracker

#if !defined (OrgApacheCommonsIoFileCleaningTracker_) && (INCLUDE_ALL_OrgApacheCommonsIoFileCleaningTracker || defined(INCLUDE_OrgApacheCommonsIoFileCleaningTracker))
#define OrgApacheCommonsIoFileCleaningTracker_

@class JavaIoFile;
@class JavaLangRefReferenceQueue;
@class JavaLangThread;
@class OrgApacheCommonsIoFileDeleteStrategy;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief Keeps track of files awaiting deletion, and deletes them when an associated
  marker object is reclaimed by the garbage collector.
 <p>
  This utility creates a background thread to handle file deletion.
  Each file to be deleted is registered with a handler object.
  When the handler object is garbage collected, the file is deleted. 
 <p>
  In an environment with multiple class loaders (a servlet container, for
  example), you should consider stopping the background thread if it is no
  longer needed. This is done by invoking the method 
 <code>exitWhenFinished</code>, typically in 
 <code>javax.servlet.ServletContextListener</code> or similar.
 @version $Id$
 */
@interface OrgApacheCommonsIoFileCleaningTracker : NSObject {
 @public
  /*!
   @brief Queue of <code>Tracker</code> instances being watched.
   */
  JavaLangRefReferenceQueue *q_;
  /*!
   @brief Collection of <code>Tracker</code> instances in existence.
   */
  id<JavaUtilCollection> trackers_;
  /*!
   @brief Collection of File paths that failed to delete.
   */
  id<JavaUtilList> deleteFailures_;
  /*!
   @brief Whether to terminate the thread when the tracking is complete.
   */
  volatile_jboolean exitWhenFinished_;
  /*!
   @brief The thread that will clean up registered files.
   */
  JavaLangThread *reaper_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Call this method to cause the file cleaner thread to terminate when
  there are no more objects being tracked for deletion.
 <p>
  In a simple environment, you don't need this method as the file cleaner
  thread will simply exit when the JVM exits. In a more complex environment,
  with multiple class loaders (such as an application server), you should be
  aware that the file cleaner thread will continue running even if the class
  loader it was started from terminates. This can consitute a memory leak. 
 <p>
  For example, suppose that you have developed a web application, which
  contains the commons-io jar file in your WEB-INF/lib directory. In other
  words, the FileCleaner class is loaded through the class loader of your
  web application. If the web application is terminated, but the servlet
  container is still running, then the file cleaner thread will still exist,
  posing a memory leak. 
 <p>
  This method allows the thread to be terminated. Simply call this method
  in the resource cleanup code, such as <code>javax.servlet.ServletContextListener</code>.
  Once called, no new objects can be tracked by the file cleaner.
 */
- (void)exitWhenFinished;

/*!
 @brief Return the file paths that failed to delete.
 @return the file paths that failed to delete
 @since 2.0
 */
- (id<JavaUtilList>)getDeleteFailures;

/*!
 @brief Retrieve the number of files currently being tracked, and therefore
  awaiting deletion.
 @return the number of files being tracked
 */
- (jint)getTrackCount;

/*!
 @brief Track the specified file, using the provided marker, deleting the file
  when the marker instance is garbage collected.
 The <code>normal</code> deletion strategy will be used.
 @param file the file to be tracked, not null
 @param marker the marker object used to track the file, not null
 @throw NullPointerExceptionif the file is null
 */
- (void)trackWithJavaIoFile:(JavaIoFile *)file
                     withId:(id)marker;

/*!
 @brief Track the specified file, using the provided marker, deleting the file
  when the marker instance is garbage collected.
 The speified deletion strategy is used.
 @param file the file to be tracked, not null
 @param marker the marker object used to track the file, not null
 @param deleteStrategy the strategy to delete the file, null means normal
 @throw NullPointerExceptionif the file is null
 */
- (void)trackWithJavaIoFile:(JavaIoFile *)file
                     withId:(id)marker
withOrgApacheCommonsIoFileDeleteStrategy:(OrgApacheCommonsIoFileDeleteStrategy *)deleteStrategy;

/*!
 @brief Track the specified file, using the provided marker, deleting the file
  when the marker instance is garbage collected.
 The <code>normal</code> deletion strategy will be used.
 @param path the full path to the file to be tracked, not null
 @param marker the marker object used to track the file, not null
 @throw NullPointerExceptionif the path is null
 */
- (void)trackWithNSString:(NSString *)path
                   withId:(id)marker;

/*!
 @brief Track the specified file, using the provided marker, deleting the file
  when the marker instance is garbage collected.
 The speified deletion strategy is used.
 @param path the full path to the file to be tracked, not null
 @param marker the marker object used to track the file, not null
 @param deleteStrategy the strategy to delete the file, null means normal
 @throw NullPointerExceptionif the path is null
 */
- (void)trackWithNSString:(NSString *)path
                   withId:(id)marker
withOrgApacheCommonsIoFileDeleteStrategy:(OrgApacheCommonsIoFileDeleteStrategy *)deleteStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFileCleaningTracker)

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker, q_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker, trackers_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker, deleteFailures_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFileCleaningTracker, reaper_, JavaLangThread *)

FOUNDATION_EXPORT void OrgApacheCommonsIoFileCleaningTracker_init(OrgApacheCommonsIoFileCleaningTracker *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFileCleaningTracker *new_OrgApacheCommonsIoFileCleaningTracker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFileCleaningTracker *create_OrgApacheCommonsIoFileCleaningTracker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileCleaningTracker)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFileCleaningTracker")
