//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/LockableFileWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "org/apache/commons/io/Charsets.h"
#include "org/apache/commons/io/FileUtils.h"
#include "org/apache/commons/io/IOUtils.h"
#include "org/apache/commons/io/output/LockableFileWriter.h"

@interface OrgApacheCommonsIoOutputLockableFileWriter () {
 @public
  /*!
   @brief The writer to decorate.
   */
  JavaIoWriter *out_;
  /*!
   @brief The lock file.
   */
  JavaIoFile *lockFile_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputLockableFileWriter, out_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputLockableFileWriter, lockFile_, JavaIoFile *)

/*!
 @brief The extension for the lock file.
 */
inline NSString *OrgApacheCommonsIoOutputLockableFileWriter_get_LCK(void);
static NSString *OrgApacheCommonsIoOutputLockableFileWriter_LCK = @".lck";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoOutputLockableFileWriter, LCK, NSString *)

__attribute__((unused)) static void OrgApacheCommonsIoOutputLockableFileWriter_testLockDirWithJavaIoFile_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *lockDir);

__attribute__((unused)) static void OrgApacheCommonsIoOutputLockableFileWriter_createLock(OrgApacheCommonsIoOutputLockableFileWriter *self);

__attribute__((unused)) static JavaIoWriter *OrgApacheCommonsIoOutputLockableFileWriter_initWriterWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append);

@implementation OrgApacheCommonsIoOutputLockableFileWriter

- (instancetype)initWithNSString:(NSString *)fileName {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(self, fileName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fileName
                     withBoolean:(jboolean)append {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(self, fileName, append);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fileName
                     withBoolean:(jboolean)append
                    withNSString:(NSString *)lockDir {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(self, fileName, append, lockDir);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(self, file);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                       withBoolean:(jboolean)append {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(self, file, append);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                       withBoolean:(jboolean)append
                      withNSString:(NSString *)lockDir {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(self, file, append, lockDir);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(self, file, encoding);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)encoding {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(self, file, encoding);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                       withBoolean:(jboolean)append
                      withNSString:(NSString *)lockDir {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(self, file, encoding, append, lockDir);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)encoding
                       withBoolean:(jboolean)append
                      withNSString:(NSString *)lockDir {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(self, file, encoding, append, lockDir);
  return self;
}

- (void)close {
  @try {
    [((JavaIoWriter *) nil_chk(out_)) close];
  }
  @finally {
    [((JavaIoFile *) nil_chk(lockFile_)) delete__];
  }
}

- (void)writeWithInt:(jint)idx {
  [((JavaIoWriter *) nil_chk(out_)) writeWithInt:idx];
}

- (void)writeWithCharArray:(IOSCharArray *)chr {
  [((JavaIoWriter *) nil_chk(out_)) writeWithCharArray:chr];
}

- (void)writeWithCharArray:(IOSCharArray *)chr
                   withInt:(jint)st
                   withInt:(jint)end {
  [((JavaIoWriter *) nil_chk(out_)) writeWithCharArray:chr withInt:st withInt:end];
}

- (void)writeWithNSString:(NSString *)str {
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:str];
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)st
                  withInt:(jint)end {
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:str withInt:st withInt:end];
}

- (void)flush {
  [((JavaIoWriter *) nil_chk(out_)) flush];
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(lockFile_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(self, fileName, false, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(NSString *fileName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_, fileName)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(NSString *fileName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_, fileName)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName, jboolean append) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(self, fileName, append, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(NSString *fileName, jboolean append) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_withBoolean_, fileName, append)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(NSString *fileName, jboolean append) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_withBoolean_, fileName, append)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName, jboolean append, NSString *lockDir) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(self, create_JavaIoFile_initWithNSString_(fileName), append, lockDir);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(NSString *fileName, jboolean append, NSString *lockDir) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_withBoolean_withNSString_, fileName, append, lockDir)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(NSString *fileName, jboolean append, NSString *lockDir) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithNSString_withBoolean_withNSString_, fileName, append, lockDir)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(self, file, false, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_, file)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_, file)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, jboolean append) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(self, file, append, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withBoolean_, file, append)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withBoolean_, file, append)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, jboolean append, NSString *lockDir) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(self, file, JavaNioCharsetCharset_defaultCharset(), append, lockDir);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(JavaIoFile *file, jboolean append, NSString *lockDir) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withBoolean_withNSString_, file, append, lockDir)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(JavaIoFile *file, jboolean append, NSString *lockDir) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withBoolean_withNSString_, file, append, lockDir)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(self, file, encoding, false, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withJavaNioCharsetCharset_, file, encoding)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withJavaNioCharsetCharset_, file, encoding)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, NSString *encoding) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(self, file, encoding, false, nil);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withNSString_, file, encoding)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withNSString_, file, encoding)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir) {
  JavaIoWriter_init(self);
  file = [((JavaIoFile *) nil_chk(file)) getAbsoluteFile];
  if ([((JavaIoFile *) nil_chk(file)) getParentFile] != nil) {
    OrgApacheCommonsIoFileUtils_forceMkdirWithJavaIoFile_([file getParentFile]);
  }
  if ([file isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(@"File specified is a directory");
  }
  if (lockDir == nil) {
    lockDir = JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir");
  }
  JavaIoFile *lockDirFile = create_JavaIoFile_initWithNSString_(lockDir);
  OrgApacheCommonsIoFileUtils_forceMkdirWithJavaIoFile_(lockDirFile);
  OrgApacheCommonsIoOutputLockableFileWriter_testLockDirWithJavaIoFile_(self, lockDirFile);
  JreStrongAssignAndConsume(&self->lockFile_, new_JavaIoFile_initWithJavaIoFile_withNSString_(lockDirFile, JreStrcat("$$", [file getName], OrgApacheCommonsIoOutputLockableFileWriter_LCK)));
  OrgApacheCommonsIoOutputLockableFileWriter_createLock(self);
  JreStrongAssign(&self->out_, OrgApacheCommonsIoOutputLockableFileWriter_initWriterWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(self, file, encoding, append));
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_, file, encoding, append, lockDir)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_, file, encoding, append, lockDir)
}

void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir) {
  OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(self, file, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding), append, lockDir);
}

OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withNSString_withBoolean_withNSString_, file, encoding, append, lockDir)
}

OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputLockableFileWriter, initWithJavaIoFile_withNSString_withBoolean_withNSString_, file, encoding, append, lockDir)
}

void OrgApacheCommonsIoOutputLockableFileWriter_testLockDirWithJavaIoFile_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *lockDir) {
  if (![((JavaIoFile *) nil_chk(lockDir)) exists]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Could not find lockDir: ", [lockDir getAbsolutePath]));
  }
  if (![lockDir canWrite]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Could not write to lockDir: ", [lockDir getAbsolutePath]));
  }
}

void OrgApacheCommonsIoOutputLockableFileWriter_createLock(OrgApacheCommonsIoOutputLockableFileWriter *self) {
  @synchronized(OrgApacheCommonsIoOutputLockableFileWriter_class_()) {
    if (![((JavaIoFile *) nil_chk(self->lockFile_)) createNewFile]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Can't write file, lock ", [self->lockFile_ getAbsolutePath], @" exists"));
    }
    [self->lockFile_ deleteOnExit];
  }
}

JavaIoWriter *OrgApacheCommonsIoOutputLockableFileWriter_initWriterWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append) {
  jboolean fileExistedAlready = [((JavaIoFile *) nil_chk(file)) exists];
  JavaIoOutputStream *stream = nil;
  JavaIoWriter *writer = nil;
  @try {
    stream = create_JavaIoFileOutputStream_initWithNSString_withBoolean_([file getAbsolutePath], append);
    writer = create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(stream, OrgApacheCommonsIoCharsets_toCharsetWithJavaNioCharsetCharset_(encoding));
  }
  @catch (JavaIoIOException *ex) {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoWriter_(writer);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(stream);
    OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(self->lockFile_);
    if (fileExistedAlready == false) {
      OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(file);
    }
    @throw ex;
  }
  @catch (JavaLangRuntimeException *ex) {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoWriter_(writer);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(stream);
    OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(self->lockFile_);
    if (fileExistedAlready == false) {
      OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(file);
    }
    @throw ex;
  }
  return writer;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputLockableFileWriter)
