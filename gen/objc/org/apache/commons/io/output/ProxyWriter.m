//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ProxyWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "org/apache/commons/io/output/ProxyWriter.h"

@implementation OrgApacheCommonsIoOutputProxyWriter

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)proxy {
  OrgApacheCommonsIoOutputProxyWriter_initWithJavaIoWriter_(self, proxy);
  return self;
}

- (JavaIoWriter *)appendWithChar:(jchar)c {
  @try {
    [self beforeWriteWithInt:1];
    [((JavaIoWriter *) nil_chk(out_)) appendWithChar:c];
    [self afterWriteWithInt:1];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
  return self;
}

- (JavaIoWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                         withInt:(jint)start
                                         withInt:(jint)end {
  @try {
    [self beforeWriteWithInt:end - start];
    [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:csq withInt:start withInt:end];
    [self afterWriteWithInt:end - start];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
  return self;
}

- (JavaIoWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  @try {
    jint len = 0;
    if (csq != nil) {
      len = [csq java_length];
    }
    [self beforeWriteWithInt:len];
    [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:csq];
    [self afterWriteWithInt:len];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
  return self;
}

- (void)writeWithInt:(jint)idx {
  @try {
    [self beforeWriteWithInt:1];
    [((JavaIoWriter *) nil_chk(out_)) writeWithInt:idx];
    [self afterWriteWithInt:1];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)writeWithCharArray:(IOSCharArray *)chr {
  @try {
    jint len = 0;
    if (chr != nil) {
      len = chr->size_;
    }
    [self beforeWriteWithInt:len];
    [((JavaIoWriter *) nil_chk(out_)) writeWithCharArray:chr];
    [self afterWriteWithInt:len];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)writeWithCharArray:(IOSCharArray *)chr
                   withInt:(jint)st
                   withInt:(jint)len {
  @try {
    [self beforeWriteWithInt:len];
    [((JavaIoWriter *) nil_chk(out_)) writeWithCharArray:chr withInt:st withInt:len];
    [self afterWriteWithInt:len];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)writeWithNSString:(NSString *)str {
  @try {
    jint len = 0;
    if (str != nil) {
      len = [str java_length];
    }
    [self beforeWriteWithInt:len];
    [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:str];
    [self afterWriteWithInt:len];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)st
                  withInt:(jint)len {
  @try {
    [self beforeWriteWithInt:len];
    [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:str withInt:st withInt:len];
    [self afterWriteWithInt:len];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)flush {
  @try {
    [((JavaIoWriter *) nil_chk(out_)) flush];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)close {
  @try {
    [((JavaIoWriter *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    [self handleIOExceptionWithJavaIoIOException:e];
  }
}

- (void)beforeWriteWithInt:(jint)n {
}

- (void)afterWriteWithInt:(jint)n {
}

- (void)handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  @throw nil_chk(e);
}

@end

void OrgApacheCommonsIoOutputProxyWriter_initWithJavaIoWriter_(OrgApacheCommonsIoOutputProxyWriter *self, JavaIoWriter *proxy) {
  JavaIoFilterWriter_initWithJavaIoWriter_(self, proxy);
}

OrgApacheCommonsIoOutputProxyWriter *new_OrgApacheCommonsIoOutputProxyWriter_initWithJavaIoWriter_(JavaIoWriter *proxy) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputProxyWriter, initWithJavaIoWriter_, proxy)
}

OrgApacheCommonsIoOutputProxyWriter *create_OrgApacheCommonsIoOutputProxyWriter_initWithJavaIoWriter_(JavaIoWriter *proxy) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputProxyWriter, initWithJavaIoWriter_, proxy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputProxyWriter)
