//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/XmlStreamWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/io/input/XmlStreamReader.h"
#include "org/apache/commons/io/output/XmlStreamWriter.h"

@interface OrgApacheCommonsIoOutputXmlStreamWriter () {
 @public
  JavaIoOutputStream *out_;
  NSString *defaultEncoding_;
  JavaIoStringWriter *xmlPrologWriter_;
  JavaIoWriter *writer_;
  NSString *encoding_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputXmlStreamWriter, out_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputXmlStreamWriter, defaultEncoding_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputXmlStreamWriter, xmlPrologWriter_, JavaIoStringWriter *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputXmlStreamWriter, writer_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputXmlStreamWriter, encoding_, NSString *)

inline jint OrgApacheCommonsIoOutputXmlStreamWriter_get_BUFFER_SIZE(void);
#define OrgApacheCommonsIoOutputXmlStreamWriter_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoOutputXmlStreamWriter, BUFFER_SIZE, jint)

__attribute__((unused)) static void OrgApacheCommonsIoOutputXmlStreamWriter_detectEncodingWithCharArray_withInt_withInt_(OrgApacheCommonsIoOutputXmlStreamWriter *self, IOSCharArray *cbuf, jint off, jint len);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoOutputXmlStreamWriter)

JavaUtilRegexPattern *OrgApacheCommonsIoOutputXmlStreamWriter_ENCODING_PATTERN;

@implementation OrgApacheCommonsIoOutputXmlStreamWriter

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_(self, outArg);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                              withNSString:(NSString *)defaultEncoding {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(self, outArg, defaultEncoding);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_(self, file);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)defaultEncoding {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_withNSString_(self, file, defaultEncoding);
  return self;
}

- (NSString *)getEncoding {
  return encoding_;
}

- (NSString *)getDefaultEncoding {
  return defaultEncoding_;
}

- (void)close {
  if (writer_ == nil) {
    JreStrongAssign(&encoding_, defaultEncoding_);
    JreStrongAssignAndConsume(&writer_, new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(out_, encoding_));
    [writer_ writeWithNSString:[((JavaIoStringWriter *) nil_chk(xmlPrologWriter_)) description]];
  }
  [((JavaIoWriter *) nil_chk(writer_)) close];
}

- (void)flush {
  if (writer_ != nil) {
    [writer_ flush];
  }
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  if (xmlPrologWriter_ != nil) {
    OrgApacheCommonsIoOutputXmlStreamWriter_detectEncodingWithCharArray_withInt_withInt_(self, cbuf, off, len);
  }
  else {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:cbuf withInt:off withInt:len];
  }
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(defaultEncoding_);
  RELEASE_(xmlPrologWriter_);
  RELEASE_(writer_);
  RELEASE_(encoding_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoOutputXmlStreamWriter class]) {
    JreStrongAssign(&OrgApacheCommonsIoOutputXmlStreamWriter_ENCODING_PATTERN, JreLoadStatic(OrgApacheCommonsIoInputXmlStreamReader, ENCODING_PATTERN));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoOutputXmlStreamWriter)
  }
}

@end

void OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_(OrgApacheCommonsIoOutputXmlStreamWriter *self, JavaIoOutputStream *outArg) {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(self, outArg, nil);
}

OrgApacheCommonsIoOutputXmlStreamWriter *new_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoOutputStream_, outArg)
}

OrgApacheCommonsIoOutputXmlStreamWriter *create_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoOutputStream_, outArg)
}

void OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(OrgApacheCommonsIoOutputXmlStreamWriter *self, JavaIoOutputStream *outArg, NSString *defaultEncoding) {
  JavaIoWriter_init(self);
  JreStrongAssignAndConsume(&self->xmlPrologWriter_, new_JavaIoStringWriter_initWithInt_(OrgApacheCommonsIoOutputXmlStreamWriter_BUFFER_SIZE));
  JreStrongAssign(&self->out_, outArg);
  JreStrongAssign(&self->defaultEncoding_, defaultEncoding != nil ? defaultEncoding : @"UTF-8");
}

OrgApacheCommonsIoOutputXmlStreamWriter *new_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *defaultEncoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoOutputStream_withNSString_, outArg, defaultEncoding)
}

OrgApacheCommonsIoOutputXmlStreamWriter *create_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *defaultEncoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoOutputStream_withNSString_, outArg, defaultEncoding)
}

void OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_(OrgApacheCommonsIoOutputXmlStreamWriter *self, JavaIoFile *file) {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_withNSString_(self, file, nil);
}

OrgApacheCommonsIoOutputXmlStreamWriter *new_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoFile_, file)
}

OrgApacheCommonsIoOutputXmlStreamWriter *create_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoFile_, file)
}

void OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_withNSString_(OrgApacheCommonsIoOutputXmlStreamWriter *self, JavaIoFile *file, NSString *defaultEncoding) {
  OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoOutputStream_withNSString_(self, create_JavaIoFileOutputStream_initWithJavaIoFile_(file), defaultEncoding);
}

OrgApacheCommonsIoOutputXmlStreamWriter *new_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *defaultEncoding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoFile_withNSString_, file, defaultEncoding)
}

OrgApacheCommonsIoOutputXmlStreamWriter *create_OrgApacheCommonsIoOutputXmlStreamWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *defaultEncoding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputXmlStreamWriter, initWithJavaIoFile_withNSString_, file, defaultEncoding)
}

void OrgApacheCommonsIoOutputXmlStreamWriter_detectEncodingWithCharArray_withInt_withInt_(OrgApacheCommonsIoOutputXmlStreamWriter *self, IOSCharArray *cbuf, jint off, jint len) {
  jint size = len;
  JavaLangStringBuffer *xmlProlog = [((JavaIoStringWriter *) nil_chk(self->xmlPrologWriter_)) getBuffer];
  if ([((JavaLangStringBuffer *) nil_chk(xmlProlog)) java_length] + len > OrgApacheCommonsIoOutputXmlStreamWriter_BUFFER_SIZE) {
    size = OrgApacheCommonsIoOutputXmlStreamWriter_BUFFER_SIZE - [xmlProlog java_length];
  }
  [((JavaIoStringWriter *) nil_chk(self->xmlPrologWriter_)) writeWithCharArray:cbuf withInt:off withInt:size];
  if ([xmlProlog java_length] >= 5) {
    if ([((NSString *) nil_chk([xmlProlog substringWithInt:0 withInt:5])) isEqual:@"<?xml"]) {
      jint xmlPrologEnd = [xmlProlog indexOfWithNSString:@"?>"];
      if (xmlPrologEnd > 0) {
        JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(OrgApacheCommonsIoOutputXmlStreamWriter_ENCODING_PATTERN)) matcherWithJavaLangCharSequence:[xmlProlog substringWithInt:0 withInt:xmlPrologEnd]];
        if ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
          JreStrongAssign(&self->encoding_, [((NSString *) nil_chk([m groupWithInt:1])) uppercaseString]);
          JreStrongAssign(&self->encoding_, [((NSString *) nil_chk(self->encoding_)) java_substring:1 endIndex:[self->encoding_ java_length] - 1]);
        }
        else {
          JreStrongAssign(&self->encoding_, self->defaultEncoding_);
        }
      }
      else {
        if ([xmlProlog java_length] >= OrgApacheCommonsIoOutputXmlStreamWriter_BUFFER_SIZE) {
          JreStrongAssign(&self->encoding_, self->defaultEncoding_);
        }
      }
    }
    else {
      JreStrongAssign(&self->encoding_, self->defaultEncoding_);
    }
    if (self->encoding_ != nil) {
      JreStrongAssign(&self->xmlPrologWriter_, nil);
      JreStrongAssignAndConsume(&self->writer_, new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(self->out_, self->encoding_));
      [self->writer_ writeWithNSString:[xmlProlog description]];
      if (len > size) {
        [((JavaIoWriter *) nil_chk(self->writer_)) writeWithCharArray:cbuf withInt:off + size withInt:len - size];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputXmlStreamWriter)
