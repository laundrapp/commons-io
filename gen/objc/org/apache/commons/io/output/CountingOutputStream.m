//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/CountingOutputStream.java
//

#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/io/output/CountingOutputStream.h"
#include "org/apache/commons/io/output/ProxyOutputStream.h"

@interface OrgApacheCommonsIoOutputCountingOutputStream () {
 @public
  /*!
   @brief The count of bytes that have passed.
   */
  jlong count_;
}

@end

@implementation OrgApacheCommonsIoOutputCountingOutputStream

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  OrgApacheCommonsIoOutputCountingOutputStream_initWithJavaIoOutputStream_(self, outArg);
  return self;
}

- (void)beforeWriteWithInt:(jint)n {
  @synchronized(self) {
    count_ += n;
  }
}

- (jint)getCount {
  jlong result = [self getByteCount];
  if (result > JavaLangInteger_MAX_VALUE) {
    @throw create_JavaLangArithmeticException_initWithNSString_(JreStrcat("$J$", @"The byte count ", result, @" is too large to be converted to an int"));
  }
  return (jint) result;
}

- (jint)resetCount {
  jlong result = [self resetByteCount];
  if (result > JavaLangInteger_MAX_VALUE) {
    @throw create_JavaLangArithmeticException_initWithNSString_(JreStrcat("$J$", @"The byte count ", result, @" is too large to be converted to an int"));
  }
  return (jint) result;
}

- (jlong)getByteCount {
  @synchronized(self) {
    return self->count_;
  }
}

- (jlong)resetByteCount {
  @synchronized(self) {
    jlong tmp = self->count_;
    self->count_ = 0;
    return tmp;
  }
}

@end

void OrgApacheCommonsIoOutputCountingOutputStream_initWithJavaIoOutputStream_(OrgApacheCommonsIoOutputCountingOutputStream *self, JavaIoOutputStream *outArg) {
  OrgApacheCommonsIoOutputProxyOutputStream_initWithJavaIoOutputStream_(self, outArg);
  self->count_ = 0;
}

OrgApacheCommonsIoOutputCountingOutputStream *new_OrgApacheCommonsIoOutputCountingOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputCountingOutputStream, initWithJavaIoOutputStream_, outArg)
}

OrgApacheCommonsIoOutputCountingOutputStream *create_OrgApacheCommonsIoOutputCountingOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputCountingOutputStream, initWithJavaIoOutputStream_, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputCountingOutputStream)
