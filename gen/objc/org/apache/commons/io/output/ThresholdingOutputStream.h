//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputThresholdingOutputStream")
#ifdef RESTRICT_OrgApacheCommonsIoOutputThresholdingOutputStream
#define INCLUDE_ALL_OrgApacheCommonsIoOutputThresholdingOutputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputThresholdingOutputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputThresholdingOutputStream

#if !defined (OrgApacheCommonsIoOutputThresholdingOutputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputThresholdingOutputStream || defined(INCLUDE_OrgApacheCommonsIoOutputThresholdingOutputStream))
#define OrgApacheCommonsIoOutputThresholdingOutputStream_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;

/*!
 @brief An output stream which triggers an event when a specified number of bytes of
  data have been written to it.The event can be used, for example, to throw
  an exception if a maximum has been reached, or to switch the underlying
  stream type when the threshold is exceeded.
 <p>
  This class overrides all <code>OutputStream</code> methods. However, these
  overrides ultimately call the corresponding methods in the underlying output
  stream implementation. 
 <p>
  NOTE: This implementation may trigger the event <em>before</em> the threshold
  is actually reached, since it triggers when a pending write operation would
  cause the threshold to be exceeded.
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputThresholdingOutputStream : JavaIoOutputStream

#pragma mark Public

/*!
 @brief Constructs an instance of this class which will trigger an event at the
  specified threshold.
 @param threshold The number of bytes at which to trigger an event.
 */
- (instancetype)initWithInt:(jint)threshold;

/*!
 @brief Closes this output stream and releases any system resources associated
  with this stream.
 @throw IOExceptionif an error occurs.
 */
- (void)close;

/*!
 @brief Flushes this output stream and forces any buffered output bytes to be
  written out.
 @throw IOExceptionif an error occurs.
 */
- (void)flush;

/*!
 @brief Returns the number of bytes that have been written to this output stream.
 @return The number of bytes written.
 */
- (jlong)getByteCount;

/*!
 @brief Returns the threshold, in bytes, at which an event will be triggered.
 @return The threshold point, in bytes.
 */
- (jint)getThreshold;

/*!
 @brief Determines whether or not the configured threshold has been exceeded for
  this output stream.
 @return <code>true</code> if the threshold has been reached;
          <code>false</code> otherwise.
 */
- (jboolean)isThresholdExceeded;

/*!
 @brief Writes <code>b.length</code> bytes from the specified byte array to this
  output stream.
 @param b The array of bytes to be written.
 @throw IOExceptionif an error occurs.
 */
- (void)writeWithByteArray:(IOSByteArray *)b;

/*!
 @brief Writes <code>len</code> bytes from the specified byte array starting at
  offset <code>off</code> to this output stream.
 @param b The byte array from which the data will be written.
 @param off The start offset in the byte array.
 @param len The number of bytes to write.
 @throw IOExceptionif an error occurs.
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes the specified byte to this output stream.
 @param b The byte to be written.
 @throw IOExceptionif an error occurs.
 */
- (void)writeWithInt:(jint)b;

#pragma mark Protected

/*!
 @brief Checks to see if writing the specified number of bytes would cause the
  configured threshold to be exceeded.If so, triggers an event to allow
  a concrete implementation to take action on this.
 @param count The number of bytes about to be written to the underlying               output stream.
 @throw IOExceptionif an error occurs.
 */
- (void)checkThresholdWithInt:(jint)count;

/*!
 @brief Returns the underlying output stream, to which the corresponding 
 <code>OutputStream</code> methods in this class will ultimately delegate.
 @return The underlying output stream.
 @throw IOExceptionif an error occurs.
 */
- (JavaIoOutputStream *)getStream;

/*!
 @brief Resets the byteCount to zero.You can call this from  
 <code>thresholdReached()</code> if you want the event to be triggered again.
 */
- (void)resetByteCount;

/*!
 @brief Indicates that the configured threshold has been reached, and that a
  subclass should take whatever action necessary on this event.This may
  include changing the underlying output stream.
 @throw IOExceptionif an error occurs.
 */
- (void)thresholdReached;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputThresholdingOutputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputThresholdingOutputStream_initWithInt_(OrgApacheCommonsIoOutputThresholdingOutputStream *self, jint threshold);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputThresholdingOutputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputThresholdingOutputStream")
