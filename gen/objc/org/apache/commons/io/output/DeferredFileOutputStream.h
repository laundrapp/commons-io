//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputDeferredFileOutputStream")
#ifdef RESTRICT_OrgApacheCommonsIoOutputDeferredFileOutputStream
#define INCLUDE_ALL_OrgApacheCommonsIoOutputDeferredFileOutputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputDeferredFileOutputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputDeferredFileOutputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoOutputDeferredFileOutputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputDeferredFileOutputStream || defined(INCLUDE_OrgApacheCommonsIoOutputDeferredFileOutputStream))
#define OrgApacheCommonsIoOutputDeferredFileOutputStream_

#define RESTRICT_OrgApacheCommonsIoOutputThresholdingOutputStream 1
#define INCLUDE_OrgApacheCommonsIoOutputThresholdingOutputStream 1
#include "org/apache/commons/io/output/ThresholdingOutputStream.h"

@class IOSByteArray;
@class JavaIoFile;
@class JavaIoOutputStream;

/*!
 @brief An output stream which will retain data in memory until a specified
  threshold is reached, and only then commit it to disk.If the stream is
  closed before the threshold is reached, the data will not be written to
  disk at all.
 <p>
  This class originated in FileUpload processing. In this use case, you do
  not know in advance the size of the file being uploaded. If the file is small
  you want to store it in memory (for speed), but if the file is large you want
  to store it to file (to avoid memory issues).
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputDeferredFileOutputStream : OrgApacheCommonsIoOutputThresholdingOutputStream

#pragma mark Public

/*!
 @brief Constructs an instance of this class which will trigger an event at the
  specified threshold, and save data to a file beyond that point.
 @param threshold The number of bytes at which to trigger an event.
 @param outputFile The file to which data is saved beyond the threshold.
 */
- (instancetype __nonnull)initWithInt:(jint)threshold
                       withJavaIoFile:(JavaIoFile *)outputFile;

/*!
 @brief Constructs an instance of this class which will trigger an event at the
  specified threshold, and save data to a temporary file beyond that point.
 @param threshold The number of bytes at which to trigger an event.
 @param prefix Prefix to use for the temporary file.
 @param suffix Suffix to use for the temporary file.
 @param directory Temporary file directory.
 @since 1.4
 */
- (instancetype __nonnull)initWithInt:(jint)threshold
                         withNSString:(NSString *)prefix
                         withNSString:(NSString *)suffix
                       withJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Closes underlying output stream, and mark this as closed
 @throw IOExceptionif an error occurs.
 */
- (void)close;

/*!
 @brief Returns the data for this output stream as an array of bytes, assuming
  that the data has been retained in memory.If the data was written to
  disk, this method returns <code>null</code>.
 @return The data for this output stream, or <code>null</code> if no such
          data is available.
 */
- (IOSByteArray *)getData;

/*!
 @brief Returns either the output file specified in the constructor or
  the temporary file created or null.
 <p>
  If the constructor specifying the file is used then it returns that
  same output file, even when threshold has not been reached. 
 <p>
  If constructor specifying a temporary file prefix/suffix is used
  then the temporary file created once the threshold is reached is returned
  If the threshold was not reached then <code>null</code> is returned.
 @return The file for this output stream, or <code>null</code> if no such
          file exists.
 */
- (JavaIoFile *)getFile;

/*!
 @brief Determines whether or not the data for this output stream has been
  retained in memory.
 @return <code>true</code> if the data is available in memory;
          <code>false</code> otherwise.
 */
- (jboolean)isInMemory;

/*!
 @brief Writes the data from this output stream to the specified output stream,
  after it has been closed.
 @param outArg output stream to write to.
 @throw IOExceptionif this stream is not yet closed or an error occurs.
 */
- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Protected

/*!
 @brief Returns the current output stream.This may be memory based or disk
  based, depending on the current state with respect to the threshold.
 @return The underlying output stream.
 @throw IOExceptionif an error occurs.
 */
- (JavaIoOutputStream *)getStream;

/*!
 @brief Switches the underlying output stream from a memory based stream to one
  that is backed by disk.This is the point at which we realise that too
  much data is being written to keep in memory, so we elect to switch to
  disk-based storage.
 @throw IOExceptionif an error occurs.
 */
- (void)thresholdReached;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputDeferredFileOutputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, JavaIoFile *outputFile);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(jint threshold, JavaIoFile *outputFile) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(jint threshold, JavaIoFile *outputFile);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputDeferredFileOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputDeferredFileOutputStream")
