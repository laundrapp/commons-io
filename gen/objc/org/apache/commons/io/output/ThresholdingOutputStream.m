//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "org/apache/commons/io/output/ThresholdingOutputStream.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheCommonsIoOutputThresholdingOutputStream () {
 @public
  /*!
   @brief The threshold at which the event will be triggered.
   */
  jint threshold_;
  /*!
   @brief The number of bytes written to the output stream.
   */
  jlong written_;
  /*!
   @brief Whether or not the configured threshold has been exceeded.
   */
  jboolean thresholdExceeded_;
}

@end

@implementation OrgApacheCommonsIoOutputThresholdingOutputStream

- (instancetype __nonnull)initWithInt:(jint)threshold {
  OrgApacheCommonsIoOutputThresholdingOutputStream_initWithInt_(self, threshold);
  return self;
}

- (void)writeWithInt:(jint)b {
  [self checkThresholdWithInt:1];
  [((JavaIoOutputStream *) nil_chk([self getStream])) writeWithInt:b];
  written_++;
}

- (void)writeWithByteArray:(IOSByteArray *)b {
  [self checkThresholdWithInt:((IOSByteArray *) nil_chk(b))->size_];
  [((JavaIoOutputStream *) nil_chk([self getStream])) writeWithByteArray:b];
  written_ += b->size_;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  [self checkThresholdWithInt:len];
  [((JavaIoOutputStream *) nil_chk([self getStream])) writeWithByteArray:b withInt:off withInt:len];
  written_ += len;
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk([self getStream])) flush];
}

- (void)close {
  @try {
    [self flush];
  }
  @catch (JavaIoIOException *ignored) {
  }
  [((JavaIoOutputStream *) nil_chk([self getStream])) close];
}

- (jint)getThreshold {
  return threshold_;
}

- (jlong)getByteCount {
  return written_;
}

- (jboolean)isThresholdExceeded {
  return written_ > threshold_;
}

- (void)checkThresholdWithInt:(jint)count {
  if (!thresholdExceeded_ && written_ + count > threshold_) {
    thresholdExceeded_ = true;
    [self thresholdReached];
  }
}

- (void)resetByteCount {
  self->thresholdExceeded_ = false;
  self->written_ = 0;
}

@end

void OrgApacheCommonsIoOutputThresholdingOutputStream_initWithInt_(OrgApacheCommonsIoOutputThresholdingOutputStream *self, jint threshold) {
  JavaIoOutputStream_init(self);
  self->threshold_ = threshold;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputThresholdingOutputStream)
