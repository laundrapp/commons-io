//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/TaggedOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputTaggedOutputStream")
#ifdef RESTRICT_OrgApacheCommonsIoOutputTaggedOutputStream
#define INCLUDE_ALL_OrgApacheCommonsIoOutputTaggedOutputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputTaggedOutputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputTaggedOutputStream

#if !defined (OrgApacheCommonsIoOutputTaggedOutputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputTaggedOutputStream || defined(INCLUDE_OrgApacheCommonsIoOutputTaggedOutputStream))
#define OrgApacheCommonsIoOutputTaggedOutputStream_

#define RESTRICT_OrgApacheCommonsIoOutputProxyOutputStream 1
#define INCLUDE_OrgApacheCommonsIoOutputProxyOutputStream 1
#include "org/apache/commons/io/output/ProxyOutputStream.h"

@class JavaIoIOException;
@class JavaIoOutputStream;
@class JavaLangException;

/*!
 @brief An output stream decorator that tags potential exceptions so that the
  stream that caused the exception can easily be identified.This is
  done by using the <code>TaggedIOException</code> class to wrap all thrown 
 <code>IOException</code>s.
 See below for an example of using this class. 
 @code

  TaggedOutputStream stream = new TaggedOutputStream(...);
  try {
      // Processing that may throw an IOException either from this stream
      // or from some other IO activity like temporary files, etc.
      writeToStream(stream);
  } catch (IOException e) {
      if (stream.isCauseOf(e)) {
          // The exception was caused by this stream.
          // Use e.getCause() to get the original exception.
      } else {
          // The exception was caused by something else.
      }    }    
  
@endcode
  <p>
  Alternatively, the <code>throwIfCauseOf(Exception)</code> method can be
  used to let higher levels of code handle the exception caused by this
  stream while other processing errors are being taken care of at this
  lower level. 
 @code

  TaggedOutputStream stream = new TaggedOutputStream(...);
  try {
      writeToStream(stream);
  } catch (IOException e) {
      stream.throwIfCauseOf(e);
      // ... or process the exception that was caused by something else
  } 
  
@endcode
 - seealso: TaggedIOException
 @since 2.0
 */
@interface OrgApacheCommonsIoOutputTaggedOutputStream : OrgApacheCommonsIoOutputProxyOutputStream

#pragma mark Public

/*!
 @brief Creates a tagging decorator for the given output stream.
 @param proxy output stream to be decorated
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)proxy;

/*!
 @brief Tests if the given exception was caused by this stream.
 @param exception an exception
 @return <code>true</code> if the exception was thrown by this stream,
          <code>false</code> otherwise
 */
- (jboolean)isCauseOfWithJavaLangException:(JavaLangException *)exception;

/*!
 @brief Re-throws the original exception thrown by this stream.This method
  first checks whether the given exception is a <code>TaggedIOException</code>
  wrapper created by this decorator, and then unwraps and throws the
  original wrapped exception.
 Returns normally if the exception was
  not thrown by this stream.
 @param exception an exception
 @throw IOExceptionoriginal exception, if any, thrown by this stream
 */
- (void)throwIfCauseOfWithJavaLangException:(JavaLangException *)exception;

#pragma mark Protected

/*!
 @brief Tags any IOExceptions thrown, wrapping and re-throwing.
 @param e The IOException thrown
 @throw IOExceptionif an I/O error occurs
 */
- (void)handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputTaggedOutputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputTaggedOutputStream_initWithJavaIoOutputStream_(OrgApacheCommonsIoOutputTaggedOutputStream *self, JavaIoOutputStream *proxy);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputTaggedOutputStream *new_OrgApacheCommonsIoOutputTaggedOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *proxy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputTaggedOutputStream *create_OrgApacheCommonsIoOutputTaggedOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *proxy);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputTaggedOutputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputTaggedOutputStream")
