//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/Writer.h"
#include "java/lang/Math.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "org/apache/commons/io/output/WriterOutputStream.h"

@interface OrgApacheCommonsIoOutputWriterOutputStream () {
 @public
  JavaIoWriter *writer_;
  JavaNioCharsetCharsetDecoder *decoder_;
  jboolean writeImmediately_;
  /*!
   @brief ByteBuffer used as input for the decoder.This buffer can be small
  as it is used only to transfer the received data to the
  decoder.
   */
  JavaNioByteBuffer *decoderIn_;
  /*!
   @brief CharBuffer used as output for the decoder.It should be
  somewhat larger as we write from this buffer to the
  underlying Writer.
   */
  JavaNioCharBuffer *decoderOut_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputWriterOutputStream, writer_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputWriterOutputStream, decoder_, JavaNioCharsetCharsetDecoder *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputWriterOutputStream, decoderIn_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputWriterOutputStream, decoderOut_, JavaNioCharBuffer *)

inline jint OrgApacheCommonsIoOutputWriterOutputStream_get_DEFAULT_BUFFER_SIZE(void);
#define OrgApacheCommonsIoOutputWriterOutputStream_DEFAULT_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoOutputWriterOutputStream, DEFAULT_BUFFER_SIZE, jint)

__attribute__((unused)) static void OrgApacheCommonsIoOutputWriterOutputStream_processInputWithBoolean_(OrgApacheCommonsIoOutputWriterOutputStream *self, jboolean endOfInput);

__attribute__((unused)) static void OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(OrgApacheCommonsIoOutputWriterOutputStream *self);

@implementation OrgApacheCommonsIoOutputWriterOutputStream

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
    withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_(self, writer, decoder);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
    withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder
                             withInt:(jint)bufferSize
                         withBoolean:(jboolean)writeImmediately {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(self, writer, decoder, bufferSize, writeImmediately);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                             withInt:(jint)bufferSize
                         withBoolean:(jboolean)writeImmediately {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(self, writer, charset, bufferSize, writeImmediately);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_(self, writer, charset);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
                        withNSString:(NSString *)charsetName
                             withInt:(jint)bufferSize
                         withBoolean:(jboolean)writeImmediately {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_withInt_withBoolean_(self, writer, charsetName, bufferSize, writeImmediately);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
                        withNSString:(NSString *)charsetName {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_(self, writer, charsetName);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_(self, writer);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  while (len > 0) {
    jint c = JavaLangMath_minWithInt_withInt_(len, [((JavaNioByteBuffer *) nil_chk(decoderIn_)) remaining]);
    [decoderIn_ putWithByteArray:b withInt:off withInt:c];
    OrgApacheCommonsIoOutputWriterOutputStream_processInputWithBoolean_(self, false);
    len -= c;
    off += c;
  }
  if (writeImmediately_) {
    OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(self);
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b {
  [self writeWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (void)writeWithInt:(jint)b {
  [self writeWithByteArray:[IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) b } count:1] withInt:0 withInt:1];
}

- (void)flush {
  OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(self);
  [((JavaIoWriter *) nil_chk(writer_)) flush];
}

- (void)close {
  OrgApacheCommonsIoOutputWriterOutputStream_processInputWithBoolean_(self, true);
  OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(self);
  [((JavaIoWriter *) nil_chk(writer_)) close];
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(decoder_);
  RELEASE_(decoderIn_);
  RELEASE_(decoderOut_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(self, writer, decoder, OrgApacheCommonsIoOutputWriterOutputStream_DEFAULT_BUFFER_SIZE, false);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_(JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_, writer, decoder)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_(JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_, writer, decoder)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder, jint bufferSize, jboolean writeImmediately) {
  JavaIoOutputStream_init(self);
  JreStrongAssign(&self->decoderIn_, JavaNioByteBuffer_allocateWithInt_(128));
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->decoder_, decoder);
  self->writeImmediately_ = writeImmediately;
  JreStrongAssign(&self->decoderOut_, JavaNioCharBuffer_allocateWithInt_(bufferSize));
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_, writer, decoder, bufferSize, writeImmediately)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(JavaIoWriter *writer, JavaNioCharsetCharsetDecoder *decoder, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_, writer, decoder, bufferSize, writeImmediately)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, JavaNioCharsetCharset *charset, jint bufferSize, jboolean writeImmediately) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharsetDecoder_withInt_withBoolean_(self, writer, [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)])) replaceWithWithNSString:@"?"], bufferSize, writeImmediately);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(JavaIoWriter *writer, JavaNioCharsetCharset *charset, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_, writer, charset, bufferSize, writeImmediately)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(JavaIoWriter *writer, JavaNioCharsetCharset *charset, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_, writer, charset, bufferSize, writeImmediately)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, JavaNioCharsetCharset *charset) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(self, writer, charset, OrgApacheCommonsIoOutputWriterOutputStream_DEFAULT_BUFFER_SIZE, false);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_(JavaIoWriter *writer, JavaNioCharsetCharset *charset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharset_, writer, charset)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_(JavaIoWriter *writer, JavaNioCharsetCharset *charset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withJavaNioCharsetCharset_, writer, charset)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_withInt_withBoolean_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, NSString *charsetName, jint bufferSize, jboolean writeImmediately) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(self, writer, JavaNioCharsetCharset_forNameWithNSString_(charsetName), bufferSize, writeImmediately);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_withInt_withBoolean_(JavaIoWriter *writer, NSString *charsetName, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withNSString_withInt_withBoolean_, writer, charsetName, bufferSize, writeImmediately)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_withInt_withBoolean_(JavaIoWriter *writer, NSString *charsetName, jint bufferSize, jboolean writeImmediately) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withNSString_withInt_withBoolean_, writer, charsetName, bufferSize, writeImmediately)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer, NSString *charsetName) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_withInt_withBoolean_(self, writer, charsetName, OrgApacheCommonsIoOutputWriterOutputStream_DEFAULT_BUFFER_SIZE, false);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_(JavaIoWriter *writer, NSString *charsetName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withNSString_, writer, charsetName)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withNSString_(JavaIoWriter *writer, NSString *charsetName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_withNSString_, writer, charsetName)
}

void OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_(OrgApacheCommonsIoOutputWriterOutputStream *self, JavaIoWriter *writer) {
  OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_withJavaNioCharsetCharset_withInt_withBoolean_(self, writer, JavaNioCharsetCharset_defaultCharset(), OrgApacheCommonsIoOutputWriterOutputStream_DEFAULT_BUFFER_SIZE, false);
}

OrgApacheCommonsIoOutputWriterOutputStream *new_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_, writer)
}

OrgApacheCommonsIoOutputWriterOutputStream *create_OrgApacheCommonsIoOutputWriterOutputStream_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputWriterOutputStream, initWithJavaIoWriter_, writer)
}

void OrgApacheCommonsIoOutputWriterOutputStream_processInputWithBoolean_(OrgApacheCommonsIoOutputWriterOutputStream *self, jboolean endOfInput) {
  [((JavaNioByteBuffer *) nil_chk(self->decoderIn_)) flip];
  JavaNioCharsetCoderResult *coderResult;
  while (true) {
    coderResult = [((JavaNioCharsetCharsetDecoder *) nil_chk(self->decoder_)) decodeWithJavaNioByteBuffer:self->decoderIn_ withJavaNioCharBuffer:self->decoderOut_ withBoolean:endOfInput];
    if ([((JavaNioCharsetCoderResult *) nil_chk(coderResult)) isOverflow]) {
      OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(self);
    }
    else if ([coderResult isUnderflow]) {
      break;
    }
    else {
      @throw create_JavaIoIOException_initWithNSString_(@"Unexpected coder result");
    }
  }
  [self->decoderIn_ compact];
}

void OrgApacheCommonsIoOutputWriterOutputStream_flushOutput(OrgApacheCommonsIoOutputWriterOutputStream *self) {
  if ([((JavaNioCharBuffer *) nil_chk(self->decoderOut_)) position] > 0) {
    [((JavaIoWriter *) nil_chk(self->writer_)) writeWithCharArray:[self->decoderOut_ array] withInt:0 withInt:[self->decoderOut_ position]];
    [self->decoderOut_ rewind];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputWriterOutputStream)
