//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/LockableFileWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputLockableFileWriter")
#ifdef RESTRICT_OrgApacheCommonsIoOutputLockableFileWriter
#define INCLUDE_ALL_OrgApacheCommonsIoOutputLockableFileWriter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputLockableFileWriter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputLockableFileWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoOutputLockableFileWriter_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputLockableFileWriter || defined(INCLUDE_OrgApacheCommonsIoOutputLockableFileWriter))
#define OrgApacheCommonsIoOutputLockableFileWriter_

#define RESTRICT_JavaIoWriter 1
#define INCLUDE_JavaIoWriter 1
#include "java/io/Writer.h"

@class IOSCharArray;
@class JavaIoFile;
@class JavaNioCharsetCharset;

/*!
 @brief FileWriter that will create and honor lock files to allow simple
  cross thread file lock handling.
 <p>
  This class provides a simple alternative to <code>FileWriter</code>
  that will use a lock file to prevent duplicate writes. 
 <p>
  <b>N.B.</b> the lock file is deleted when <code>close()</code> is called
  - or if the main file cannot be opened initially.
  In the (unlikely) event that the lockfile cannot be deleted, 
  this is not reported, and subsequent requests using
  the same lockfile will fail. 
 <p>
  By default, the file will be overwritten, but this may be changed to append.
  The lock directory may be specified, but defaults to the system property 
 <code>java.io.tmpdir</code>.
  The encoding may also be specified, and defaults to the platform default.
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputLockableFileWriter : JavaIoWriter

#pragma mark Public

/*!
 @brief Constructs a LockableFileWriter.
 If the file exists, it is overwritten.
 @param file the file to write to, not null
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Constructs a LockableFileWriter.
 @param file the file to write to, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                 withBoolean:(jboolean)append;

/*!
 @brief Constructs a LockableFileWriter.
 @param file the file to write to, not null
 @param append true if content should be appended, false to overwrite
 @param lockDir the directory in which the lock file should be held
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                 withBoolean:(jboolean)append
                                withNSString:(NSString *)lockDir;

/*!
 @brief Constructs a LockableFileWriter with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Constructs a LockableFileWriter with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, null means platform default
 @param append true if content should be appended, false to overwrite
 @param lockDir the directory in which the lock file should be held
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                                 withBoolean:(jboolean)append
                                withNSString:(NSString *)lockDir;

/*!
 @brief Constructs a LockableFileWriter with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, null means platform default
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding;

/*!
 @brief Constructs a LockableFileWriter with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, null means platform default
 @param append true if content should be appended, false to overwrite
 @param lockDir the directory in which the lock file should be held
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding
                                 withBoolean:(jboolean)append
                                withNSString:(NSString *)lockDir;

/*!
 @brief Constructs a LockableFileWriter.
 If the file exists, it is overwritten.
 @param fileName the file to write to, not null
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName;

/*!
 @brief Constructs a LockableFileWriter.
 @param fileName file to write to, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName
                               withBoolean:(jboolean)append;

/*!
 @brief Constructs a LockableFileWriter.
 @param fileName the file to write to, not null
 @param append true if content should be appended, false to overwrite
 @param lockDir the directory in which the lock file should be held
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName
                               withBoolean:(jboolean)append
                              withNSString:(NSString *)lockDir;

/*!
 @brief Closes the file writer and deletes the lockfile (if possible).
 @throw IOExceptionif an I/O error occurs
 */
- (void)close;

/*!
 @brief Flush the stream.
 @throw IOExceptionif an I/O error occurs
 */
- (void)flush;

/*!
 @brief Write the characters from an array.
 @param chr the characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)chr;

/*!
 @brief Write the specified characters from an array.
 @param chr the characters to write
 @param st The start offset
 @param end The number of characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)chr
                   withInt:(jint)st
                   withInt:(jint)end;

/*!
 @brief Write a character.
 @param idx the character to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithInt:(jint)idx;

/*!
 @brief Write the characters from a string.
 @param str the string to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)str;

/*!
 @brief Write the specified characters from a string.
 @param str the string to write
 @param st The start offset
 @param end The number of characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)st
                  withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputLockableFileWriter)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(NSString *fileName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_(NSString *fileName);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(NSString *fileName, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_(NSString *fileName, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, NSString *fileName, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(NSString *fileName, jboolean append, NSString *lockDir) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithNSString_withBoolean_withNSString_(NSString *fileName, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(JavaIoFile *file, jboolean append, NSString *lockDir) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withBoolean_withNSString_(JavaIoFile *file, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_withNSString_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(OrgApacheCommonsIoOutputLockableFileWriter *self, JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *new_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputLockableFileWriter *create_OrgApacheCommonsIoOutputLockableFileWriter_initWithJavaIoFile_withNSString_withBoolean_withNSString_(JavaIoFile *file, NSString *encoding, jboolean append, NSString *lockDir);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputLockableFileWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputLockableFileWriter")
