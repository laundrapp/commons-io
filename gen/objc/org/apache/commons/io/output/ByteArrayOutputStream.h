//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputByteArrayOutputStream")
#ifdef RESTRICT_OrgApacheCommonsIoOutputByteArrayOutputStream
#define INCLUDE_ALL_OrgApacheCommonsIoOutputByteArrayOutputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputByteArrayOutputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputByteArrayOutputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoOutputByteArrayOutputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputByteArrayOutputStream || defined(INCLUDE_OrgApacheCommonsIoOutputByteArrayOutputStream))
#define OrgApacheCommonsIoOutputByteArrayOutputStream_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;

/*!
 @brief This class implements an output stream in which the data is 
  written into a byte array.The buffer automatically grows as data 
  is written to it.
 <p> 
  The data can be retrieved using <code>toByteArray()</code> and 
 <code>toString()</code>.
  <p>
  Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
  this class can be called after the stream has been closed without
  generating an <tt>IOException</tt>.
  <p>
  This is an alternative implementation of the <code>java.io.ByteArrayOutputStream</code>
  class. The original implementation only allocates 32 bytes at the beginning.
  As this class is designed for heavy duty it starts at 1024 bytes. In contrast
  to the original it doesn't reallocate the whole memory block but allocates
  additional buffers. This way no buffers need to be garbage collected and
  the contents don't have to be copied to the new buffer. This class is
  designed to behave exactly like the original. The only exception is the
  deprecated toString(int) method that has been ignored.
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputByteArrayOutputStream : JavaIoOutputStream

#pragma mark Public

/*!
 @brief Creates a new byte array output stream.The buffer capacity is 
  initially 1024 bytes, though its size increases if necessary.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new byte array output stream, with a buffer capacity of 
  the specified size, in bytes.
 @param size the initial size
 @throw IllegalArgumentExceptionif size is negative
 */
- (instancetype __nonnull)initWithInt:(jint)size;

/*!
 @brief Closing a <tt>ByteArrayOutputStream</tt> has no effect.The methods in
  this class can be called after the stream has been closed without
  generating an <tt>IOException</tt>.
 @throw IOExceptionnever (this method should not declare this exception
  but it has to now due to backwards compatability)
 */
- (void)close;

/*!
 - seealso: java.io.ByteArrayOutputStream
 */
- (void)reset;

/*!
 @brief Return the current size of the byte array.
 @return the current size of the byte array
 */
- (jint)size;

/*!
 @brief Fetches entire contents of an <code>InputStream</code> and represent
  same data as result InputStream.
 <p>
  This method is useful where, 
 <ul>
  <li>Source InputStream is slow.</li>
  <li>It has network resources associated, so we cannot keep it open for
  long time.</li>
  <li>It has network timeout associated.</li>
  </ul>
  It can be used in favor of <code>toByteArray()</code>, since it
  avoids unnecessary allocation and copy of byte[].<br>
  This method buffers the input internally, so there is no need to use a 
 <code>BufferedInputStream</code>.
 @param input Stream to be fully buffered.
 @return A fully buffered stream.
 @throw IOExceptionif an I/O error occurs
 @since 2.0
 */
+ (JavaIoInputStream *)toBufferedInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Gets the curent contents of this byte stream as a byte array.
 The result is independent of this stream.
 @return the current contents of this output stream, as a byte array
 - seealso: java.io.ByteArrayOutputStream
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief Gets the curent contents of this byte stream as a string.
 @return the contents of the byte array as a String
 - seealso: java.io.ByteArrayOutputStream
 */
- (NSString *)description;

/*!
 @brief Gets the curent contents of this byte stream as a string
  using the specified encoding.
 @param enc the name of the character encoding
 @return the string converted from the byte array
 @throw UnsupportedEncodingExceptionif the encoding is not supported
 - seealso: java.io.ByteArrayOutputStream
 */
- (NSString *)toStringWithNSString:(NSString *)enc;

/*!
 @brief Write the bytes to byte array.
 @param b the bytes to write
 @param off The start offset
 @param len The number of bytes to write
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes the entire contents of the specified input stream to this
  byte stream.Bytes from the input stream are read directly into the
  internal buffers of this streams.
 @param inArg the input stream to read from
 @return total number of bytes read from the input stream
          (and written to this stream)
 @throw IOExceptionif an I/O error occurs while reading the input stream
 @since 1.4
 */
- (jint)writeWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Write a byte to byte array.
 @param b the byte to write
 */
- (void)writeWithInt:(jint)b;

/*!
 @brief Writes the entire contents of this byte stream to the
  specified output stream.
 @param outArg the output stream to write to
 @throw IOExceptionif an I/O error occurs, such as if the stream is closed
 - seealso: java.io.ByteArrayOutputStream
 */
- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoOutputByteArrayOutputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputByteArrayOutputStream_init(OrgApacheCommonsIoOutputByteArrayOutputStream *self);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputByteArrayOutputStream *new_OrgApacheCommonsIoOutputByteArrayOutputStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputByteArrayOutputStream *create_OrgApacheCommonsIoOutputByteArrayOutputStream_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(OrgApacheCommonsIoOutputByteArrayOutputStream *self, jint size);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputByteArrayOutputStream *new_OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputByteArrayOutputStream *create_OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(jint size);

FOUNDATION_EXPORT JavaIoInputStream *OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStreamWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputByteArrayOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputByteArrayOutputStream")
