//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputFileWriterWithEncoding")
#ifdef RESTRICT_OrgApacheCommonsIoOutputFileWriterWithEncoding
#define INCLUDE_ALL_OrgApacheCommonsIoOutputFileWriterWithEncoding 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputFileWriterWithEncoding 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputFileWriterWithEncoding

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoOutputFileWriterWithEncoding_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputFileWriterWithEncoding || defined(INCLUDE_OrgApacheCommonsIoOutputFileWriterWithEncoding))
#define OrgApacheCommonsIoOutputFileWriterWithEncoding_

#define RESTRICT_JavaIoWriter 1
#define INCLUDE_JavaIoWriter 1
#include "java/io/Writer.h"

@class IOSCharArray;
@class JavaIoFile;
@class JavaNioCharsetCharset;
@class JavaNioCharsetCharsetEncoder;

/*!
 @brief Writer of files that allows the encoding to be set.
 <p>
  This class provides a simple alternative to <code>FileWriter</code>
  that allows an encoding to be set. Unfortunately, it cannot subclass 
 <code>FileWriter</code>.
  <p>
  By default, the file will be overwritten, but this may be changed to append. 
 <p>
  The encoding must be specified using either the name of the <code>Charset</code>,
  the <code>Charset</code>, or a <code>CharsetEncoder</code>. If the default encoding
  is required then use the <code>java.io.FileWriter</code> directly, rather than
  this implementation. 
 <p>
 @since 1.4
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputFileWriterWithEncoding : JavaIoWriter

#pragma mark Public

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                                 withBoolean:(jboolean)append;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
            withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
            withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoding
                                 withBoolean:(jboolean)append;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param file the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding
                                 withBoolean:(jboolean)append;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                               withBoolean:(jboolean)append;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
          withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
          withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoding
                               withBoolean:(jboolean)append;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
                              withNSString:(NSString *)encoding;

/*!
 @brief Constructs a FileWriterWithEncoding with a file encoding.
 @param filename the name of the file to write to, not null
 @param encoding the encoding to use, not null
 @param append true if content should be appended, false to overwrite
 @throw NullPointerExceptionif the file name or encoding is null
 @throw IOExceptionin case of an I/O error
 */
- (instancetype __nonnull)initWithNSString:(NSString *)filename
                              withNSString:(NSString *)encoding
                               withBoolean:(jboolean)append;

/*!
 @brief Close the stream.
 @throw IOExceptionif an I/O error occurs
 */
- (void)close;

/*!
 @brief Flush the stream.
 @throw IOExceptionif an I/O error occurs
 */
- (void)flush;

/*!
 @brief Write the characters from an array.
 @param chr the characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)chr;

/*!
 @brief Write the specified characters from an array.
 @param chr the characters to write
 @param st The start offset
 @param end The number of characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)chr
                   withInt:(jint)st
                   withInt:(jint)end;

/*!
 @brief Write a character.
 @param idx the character to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithInt:(jint)idx;

/*!
 @brief Write the characters from a string.
 @param str the string to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)str;

/*!
 @brief Write the specified characters from a string.
 @param str the string to write
 @param st The start offset
 @param end The number of characters to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)st
                  withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputFileWriterWithEncoding)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, NSString *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_(NSString *filename, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, NSString *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_withBoolean_(NSString *filename, NSString *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withNSString_withBoolean_(NSString *filename, NSString *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_(NSString *filename, JavaNioCharsetCharset *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_(NSString *filename, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_withBoolean_(NSString *filename, JavaNioCharsetCharset *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharset_withBoolean_(NSString *filename, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, JavaNioCharsetCharsetEncoder *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_(NSString *filename, JavaNioCharsetCharsetEncoder *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_(NSString *filename, JavaNioCharsetCharsetEncoder *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, NSString *filename, JavaNioCharsetCharsetEncoder *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_withBoolean_(NSString *filename, JavaNioCharsetCharsetEncoder *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithNSString_withJavaNioCharsetCharsetEncoder_withBoolean_(NSString *filename, JavaNioCharsetCharsetEncoder *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, NSString *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_(JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_(JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_withBoolean_(OrgApacheCommonsIoOutputFileWriterWithEncoding *self, JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding, jboolean append);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *new_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_withBoolean_(JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputFileWriterWithEncoding *create_OrgApacheCommonsIoOutputFileWriterWithEncoding_initWithJavaIoFile_withJavaNioCharsetCharsetEncoder_withBoolean_(JavaIoFile *file, JavaNioCharsetCharsetEncoder *encoding, jboolean append);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputFileWriterWithEncoding)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputFileWriterWithEncoding")
