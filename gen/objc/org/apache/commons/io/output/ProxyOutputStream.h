//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ProxyOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputProxyOutputStream")
#ifdef RESTRICT_OrgApacheCommonsIoOutputProxyOutputStream
#define INCLUDE_ALL_OrgApacheCommonsIoOutputProxyOutputStream 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoOutputProxyOutputStream 1
#endif
#undef RESTRICT_OrgApacheCommonsIoOutputProxyOutputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoOutputProxyOutputStream_) && (INCLUDE_ALL_OrgApacheCommonsIoOutputProxyOutputStream || defined(INCLUDE_OrgApacheCommonsIoOutputProxyOutputStream))
#define OrgApacheCommonsIoOutputProxyOutputStream_

#define RESTRICT_JavaIoFilterOutputStream 1
#define INCLUDE_JavaIoFilterOutputStream 1
#include "java/io/FilterOutputStream.h"

@class IOSByteArray;
@class JavaIoIOException;
@class JavaIoOutputStream;

/*!
 @brief A Proxy stream which acts as expected, that is it passes the method 
  calls on to the proxied stream and doesn't change which methods are 
  being called.It is an alternative base class to FilterOutputStream
  to increase reusability.
 <p>
  See the protected methods for ways in which a subclass can easily decorate
  a stream with custom pre-, post- or error processing functionality.
 @version $Id$
 */
@interface OrgApacheCommonsIoOutputProxyOutputStream : JavaIoFilterOutputStream

#pragma mark Public

/*!
 @brief Constructs a new ProxyOutputStream.
 @param proxy the OutputStream to delegate to
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)proxy;

/*!
 @brief Invokes the delegate's <code>close()</code> method.
 @throw IOExceptionif an I/O error occurs
 */
- (void)close;

/*!
 @brief Invokes the delegate's <code>flush()</code> method.
 @throw IOExceptionif an I/O error occurs
 */
- (void)flush;

/*!
 @brief Invokes the delegate's <code>write(byte[])</code> method.
 @param bts the bytes to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithByteArray:(IOSByteArray *)bts;

/*!
 @brief Invokes the delegate's <code>write(byte[])</code> method.
 @param bts the bytes to write
 @param st The start offset
 @param end The number of bytes to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithByteArray:(IOSByteArray *)bts
                   withInt:(jint)st
                   withInt:(jint)end;

/*!
 @brief Invokes the delegate's <code>write(int)</code> method.
 @param idx the byte to write
 @throw IOExceptionif an I/O error occurs
 */
- (void)writeWithInt:(jint)idx;

#pragma mark Protected

/*!
 @brief Invoked by the write methods after the proxied call has returned
  successfully.The number of bytes written (1 for the 
 <code>write(int)</code> method, buffer length for <code>write(byte[])</code>,
  etc.) is given as an argument.
 <p>
  Subclasses can override this method to add common post-processing
  functionality without having to override all the write methods.
  The default implementation does nothing.
 @since 2.0
 @param n number of bytes written
 @throw IOExceptionif the post-processing fails
 */
- (void)afterWriteWithInt:(jint)n;

/*!
 @brief Invoked by the write methods before the call is proxied.The number
  of bytes to be written (1 for the <code>write(int)</code> method, buffer
  length for <code>write(byte[])</code>, etc.) is given as an argument.
 <p>
  Subclasses can override this method to add common pre-processing
  functionality without having to override all the write methods.
  The default implementation does nothing.
 @since 2.0
 @param n number of bytes to be written
 @throw IOExceptionif the pre-processing fails
 */
- (void)beforeWriteWithInt:(jint)n;

/*!
 @brief Handle any IOExceptions thrown.
 <p>
  This method provides a point to implement custom exception
  handling. The default behaviour is to re-throw the exception.
 @param e The IOException thrown
 @throw IOExceptionif an I/O error occurs
 @since 2.0
 */
- (void)handleIOExceptionWithJavaIoIOException:(JavaIoIOException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoOutputProxyOutputStream)

FOUNDATION_EXPORT void OrgApacheCommonsIoOutputProxyOutputStream_initWithJavaIoOutputStream_(OrgApacheCommonsIoOutputProxyOutputStream *self, JavaIoOutputStream *proxy);

FOUNDATION_EXPORT OrgApacheCommonsIoOutputProxyOutputStream *new_OrgApacheCommonsIoOutputProxyOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *proxy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoOutputProxyOutputStream *create_OrgApacheCommonsIoOutputProxyOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *proxy);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoOutputProxyOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoOutputProxyOutputStream")
