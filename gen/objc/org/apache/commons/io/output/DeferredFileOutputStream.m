//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/io/IOUtils.h"
#include "org/apache/commons/io/output/ByteArrayOutputStream.h"
#include "org/apache/commons/io/output/DeferredFileOutputStream.h"
#include "org/apache/commons/io/output/ThresholdingOutputStream.h"

@interface OrgApacheCommonsIoOutputDeferredFileOutputStream () {
 @public
  /*!
   @brief The output stream to which data will be written prior to the theshold
  being reached.
   */
  OrgApacheCommonsIoOutputByteArrayOutputStream *memoryOutputStream_;
  /*!
   @brief The output stream to which data will be written at any given time.This
  will always be one of <code>memoryOutputStream</code> or 
 <code>diskOutputStream</code>.
   */
  JavaIoOutputStream *currentOutputStream_;
  /*!
   @brief The file to which output will be directed if the threshold is exceeded.
   */
  JavaIoFile *outputFile_;
  /*!
   @brief The temporary file prefix.
   */
  NSString *prefix_;
  /*!
   @brief The temporary file suffix.
   */
  NSString *suffix_;
  /*!
   @brief The directory to use for temporary files.
   */
  JavaIoFile *directory_;
  /*!
   @brief True when close() has been called successfully.
   */
  jboolean closed_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, memoryOutputStream_, OrgApacheCommonsIoOutputByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, currentOutputStream_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, outputFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, prefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, suffix_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputDeferredFileOutputStream, directory_, JavaIoFile *)

__attribute__((unused)) static void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory);

__attribute__((unused)) static OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory);

@implementation OrgApacheCommonsIoOutputDeferredFileOutputStream

- (instancetype)initWithInt:(jint)threshold
             withJavaIoFile:(JavaIoFile *)outputFile {
  OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(self, threshold, outputFile);
  return self;
}

- (instancetype)initWithInt:(jint)threshold
               withNSString:(NSString *)prefix
               withNSString:(NSString *)suffix
             withJavaIoFile:(JavaIoFile *)directory {
  OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(self, threshold, prefix, suffix, directory);
  return self;
}

- (JavaIoOutputStream *)getStream {
  return currentOutputStream_;
}

- (void)thresholdReached {
  if (prefix_ != nil) {
    JreStrongAssign(&outputFile_, JavaIoFile_createTempFileWithNSString_withNSString_withJavaIoFile_(prefix_, suffix_, directory_));
  }
  JavaIoFileOutputStream *fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(outputFile_);
  [((OrgApacheCommonsIoOutputByteArrayOutputStream *) nil_chk(memoryOutputStream_)) writeToWithJavaIoOutputStream:fos];
  JreStrongAssign(&currentOutputStream_, fos);
  JreStrongAssign(&memoryOutputStream_, nil);
}

- (jboolean)isInMemory {
  return ![self isThresholdExceeded];
}

- (IOSByteArray *)getData {
  if (memoryOutputStream_ != nil) {
    return [memoryOutputStream_ toByteArray];
  }
  return nil;
}

- (JavaIoFile *)getFile {
  return outputFile_;
}

- (void)close {
  [super close];
  closed_ = true;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (!closed_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Stream not closed");
  }
  if ([self isInMemory]) {
    [((OrgApacheCommonsIoOutputByteArrayOutputStream *) nil_chk(memoryOutputStream_)) writeToWithJavaIoOutputStream:outArg];
  }
  else {
    JavaIoFileInputStream *fis = create_JavaIoFileInputStream_initWithJavaIoFile_(outputFile_);
    @try {
      OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoOutputStream_(fis, outArg);
    }
    @finally {
      OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(fis);
    }
  }
}

- (void)dealloc {
  RELEASE_(memoryOutputStream_);
  RELEASE_(currentOutputStream_);
  RELEASE_(outputFile_);
  RELEASE_(prefix_);
  RELEASE_(suffix_);
  RELEASE_(directory_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, JavaIoFile *outputFile) {
  OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(self, threshold, outputFile, nil, nil, nil);
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(jint threshold, JavaIoFile *outputFile) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withJavaIoFile_, threshold, outputFile)
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_(jint threshold, JavaIoFile *outputFile) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withJavaIoFile_, threshold, outputFile)
}

void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(self, threshold, nil, prefix, suffix, directory);
  if (prefix == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Temporary file prefix is missing");
  }
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withNSString_withNSString_withJavaIoFile_, threshold, prefix, suffix, directory)
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withNSString_withNSString_withJavaIoFile_(jint threshold, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withNSString_withNSString_withJavaIoFile_, threshold, prefix, suffix, directory)
}

void OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(OrgApacheCommonsIoOutputDeferredFileOutputStream *self, jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  OrgApacheCommonsIoOutputThresholdingOutputStream_initWithInt_(self, threshold);
  self->closed_ = false;
  JreStrongAssign(&self->outputFile_, outputFile);
  JreStrongAssignAndConsume(&self->memoryOutputStream_, new_OrgApacheCommonsIoOutputByteArrayOutputStream_init());
  JreStrongAssign(&self->currentOutputStream_, self->memoryOutputStream_);
  JreStrongAssign(&self->prefix_, prefix);
  JreStrongAssign(&self->suffix_, suffix);
  JreStrongAssign(&self->directory_, directory);
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *new_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_, threshold, outputFile, prefix, suffix, directory)
}

OrgApacheCommonsIoOutputDeferredFileOutputStream *create_OrgApacheCommonsIoOutputDeferredFileOutputStream_initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_(jint threshold, JavaIoFile *outputFile, NSString *prefix, NSString *suffix, JavaIoFile *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputDeferredFileOutputStream, initWithInt_withJavaIoFile_withNSString_withNSString_withJavaIoFile_, threshold, outputFile, prefix, suffix, directory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputDeferredFileOutputStream)
