//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/SequenceInputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "org/apache/commons/io/input/ClosedInputStream.h"
#include "org/apache/commons/io/output/ByteArrayOutputStream.h"

@interface OrgApacheCommonsIoOutputByteArrayOutputStream () {
 @public
  /*!
   @brief The list of buffers, which grows and never reduces.
   */
  id<JavaUtilList> buffers_;
  /*!
   @brief The index of the current buffer.
   */
  jint currentBufferIndex_;
  /*!
   @brief The total count of bytes in all the filled buffers.
   */
  jint filledBufferSum_;
  /*!
   @brief The current buffer.
   */
  IOSByteArray *currentBuffer_;
  /*!
   @brief The total count of bytes written.
   */
  jint count_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputByteArrayOutputStream, buffers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoOutputByteArrayOutputStream, currentBuffer_, IOSByteArray *)

/*!
 @brief A singleton empty byte array.
 */
inline IOSByteArray *OrgApacheCommonsIoOutputByteArrayOutputStream_get_EMPTY_BYTE_ARRAY(void);
static IOSByteArray *OrgApacheCommonsIoOutputByteArrayOutputStream_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoOutputByteArrayOutputStream, EMPTY_BYTE_ARRAY, IOSByteArray *)

__attribute__((unused)) static void OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(OrgApacheCommonsIoOutputByteArrayOutputStream *self, jint newcount);

__attribute__((unused)) static JavaIoInputStream *OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStream(OrgApacheCommonsIoOutputByteArrayOutputStream *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoOutputByteArrayOutputStream)

@implementation OrgApacheCommonsIoOutputByteArrayOutputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsIoOutputByteArrayOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)size {
  OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(self, size);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  if ((off < 0) || (off > ((IOSByteArray *) nil_chk(b))->size_) || (len < 0) || ((off + len) > b->size_) || ((off + len) < 0)) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  else if (len == 0) {
    return;
  }
  @synchronized(self) {
    jint newcount = count_ + len;
    jint remaining = len;
    jint inBufferPos = count_ - filledBufferSum_;
    while (remaining > 0) {
      jint part = JavaLangMath_minWithInt_withInt_(remaining, ((IOSByteArray *) nil_chk(currentBuffer_))->size_ - inBufferPos);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, off + len - remaining, currentBuffer_, inBufferPos, part);
      remaining -= part;
      if (remaining > 0) {
        OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(self, newcount);
        inBufferPos = 0;
      }
    }
    count_ = newcount;
  }
}

- (void)writeWithInt:(jint)b {
  @synchronized(self) {
    jint inBufferPos = count_ - filledBufferSum_;
    if (inBufferPos == ((IOSByteArray *) nil_chk(currentBuffer_))->size_) {
      OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(self, count_ + 1);
      inBufferPos = 0;
    }
    *IOSByteArray_GetRef(nil_chk(currentBuffer_), inBufferPos) = (jbyte) b;
    count_++;
  }
}

- (jint)writeWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @synchronized(self) {
    jint readCount = 0;
    jint inBufferPos = count_ - filledBufferSum_;
    jint n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:currentBuffer_ withInt:inBufferPos withInt:((IOSByteArray *) nil_chk(currentBuffer_))->size_ - inBufferPos];
    while (n != -1) {
      readCount += n;
      inBufferPos += n;
      count_ += n;
      if (inBufferPos == ((IOSByteArray *) nil_chk(currentBuffer_))->size_) {
        OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(self, currentBuffer_->size_);
        inBufferPos = 0;
      }
      n = [inArg readWithByteArray:currentBuffer_ withInt:inBufferPos withInt:((IOSByteArray *) nil_chk(currentBuffer_))->size_ - inBufferPos];
    }
    return readCount;
  }
}

- (jint)size {
  @synchronized(self) {
    return count_;
  }
}

- (void)close {
}

- (void)reset {
  @synchronized(self) {
    count_ = 0;
    filledBufferSum_ = 0;
    currentBufferIndex_ = 0;
    JreStrongAssign(&currentBuffer_, [((id<JavaUtilList>) nil_chk(buffers_)) getWithInt:currentBufferIndex_]);
  }
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  @synchronized(self) {
    jint remaining = count_;
    for (IOSByteArray * __strong buf in nil_chk(buffers_)) {
      jint c = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(buf))->size_, remaining);
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buf withInt:0 withInt:c];
      remaining -= c;
      if (remaining == 0) {
        break;
      }
    }
  }
}

+ (JavaIoInputStream *)toBufferedInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStreamWithJavaIoInputStream_(input);
}

- (IOSByteArray *)toByteArray {
  @synchronized(self) {
    jint remaining = count_;
    if (remaining == 0) {
      return JreRetainedLocalValue(OrgApacheCommonsIoOutputByteArrayOutputStream_EMPTY_BYTE_ARRAY);
    }
    IOSByteArray *newbuf = [IOSByteArray arrayWithLength:remaining];
    jint pos = 0;
    for (IOSByteArray * __strong buf in nil_chk(buffers_)) {
      jint c = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(buf))->size_, remaining);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, newbuf, pos, c);
      pos += c;
      remaining -= c;
      if (remaining == 0) {
        break;
      }
    }
    return JreRetainedLocalValue(newbuf);
  }
}

- (NSString *)description {
  return [NSString java_stringWithBytes:[self toByteArray]];
}

- (NSString *)toStringWithNSString:(NSString *)enc {
  return [NSString java_stringWithBytes:[self toByteArray] charsetName:enc];
}

- (void)dealloc {
  RELEASE_(buffers_);
  RELEASE_(currentBuffer_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoOutputByteArrayOutputStream class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsIoOutputByteArrayOutputStream_EMPTY_BYTE_ARRAY, [IOSByteArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoOutputByteArrayOutputStream)
  }
}

@end

void OrgApacheCommonsIoOutputByteArrayOutputStream_init(OrgApacheCommonsIoOutputByteArrayOutputStream *self) {
  OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(self, 1024);
}

OrgApacheCommonsIoOutputByteArrayOutputStream *new_OrgApacheCommonsIoOutputByteArrayOutputStream_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputByteArrayOutputStream, init)
}

OrgApacheCommonsIoOutputByteArrayOutputStream *create_OrgApacheCommonsIoOutputByteArrayOutputStream_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputByteArrayOutputStream, init)
}

void OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(OrgApacheCommonsIoOutputByteArrayOutputStream *self, jint size) {
  JavaIoOutputStream_init(self);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilArrayList_init());
  if (size < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Negative initial size: ", size));
  }
  @synchronized(self) {
    OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(self, size);
  }
}

OrgApacheCommonsIoOutputByteArrayOutputStream *new_OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoOutputByteArrayOutputStream, initWithInt_, size)
}

OrgApacheCommonsIoOutputByteArrayOutputStream *create_OrgApacheCommonsIoOutputByteArrayOutputStream_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoOutputByteArrayOutputStream, initWithInt_, size)
}

void OrgApacheCommonsIoOutputByteArrayOutputStream_needNewBufferWithInt_(OrgApacheCommonsIoOutputByteArrayOutputStream *self, jint newcount) {
  if (self->currentBufferIndex_ < [((id<JavaUtilList>) nil_chk(self->buffers_)) size] - 1) {
    self->filledBufferSum_ += ((IOSByteArray *) nil_chk(self->currentBuffer_))->size_;
    self->currentBufferIndex_++;
    JreStrongAssign(&self->currentBuffer_, [self->buffers_ getWithInt:self->currentBufferIndex_]);
  }
  else {
    jint newBufferSize;
    if (self->currentBuffer_ == nil) {
      newBufferSize = newcount;
      self->filledBufferSum_ = 0;
    }
    else {
      newBufferSize = JavaLangMath_maxWithInt_withInt_(JreLShift32(self->currentBuffer_->size_, 1), newcount - self->filledBufferSum_);
      self->filledBufferSum_ += ((IOSByteArray *) nil_chk(self->currentBuffer_))->size_;
    }
    self->currentBufferIndex_++;
    JreStrongAssignAndConsume(&self->currentBuffer_, [IOSByteArray newArrayWithLength:newBufferSize]);
    [self->buffers_ addWithId:self->currentBuffer_];
  }
}

JavaIoInputStream *OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStreamWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgApacheCommonsIoOutputByteArrayOutputStream_initialize();
  OrgApacheCommonsIoOutputByteArrayOutputStream *output = create_OrgApacheCommonsIoOutputByteArrayOutputStream_init();
  [output writeWithJavaIoInputStream:input];
  return OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStream(output);
}

JavaIoInputStream *OrgApacheCommonsIoOutputByteArrayOutputStream_toBufferedInputStream(OrgApacheCommonsIoOutputByteArrayOutputStream *self) {
  jint remaining = self->count_;
  if (remaining == 0) {
    return create_OrgApacheCommonsIoInputClosedInputStream_init();
  }
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(self->buffers_)) size]);
  for (IOSByteArray * __strong buf in self->buffers_) {
    jint c = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(buf))->size_, remaining);
    [list addWithId:create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(buf, 0, c)];
    remaining -= c;
    if (remaining == 0) {
      break;
    }
  }
  return create_JavaIoSequenceInputStream_initWithJavaUtilEnumeration_(JavaUtilCollections_enumerationWithJavaUtilCollection_(list));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoOutputByteArrayOutputStream)
