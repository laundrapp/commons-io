//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/DirectoryWalker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "org/apache/commons/io/DirectoryWalker.h"
#include "org/apache/commons/io/filefilter/FileFilterUtils.h"
#include "org/apache/commons/io/filefilter/IOFileFilter.h"
#include "org/apache/commons/io/filefilter/TrueFileFilter.h"

@interface OrgApacheCommonsIoDirectoryWalker () {
 @public
  /*!
   @brief The file filter to use to filter files and directories.
   */
  id<JavaIoFileFilter> filter_;
  /*!
   @brief The limit on the directory depth to walk.
   */
  jint depthLimit_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoDirectoryWalker, filter_, id<JavaIoFileFilter>)

__attribute__((unused)) static void OrgApacheCommonsIoDirectoryWalker_walkWithJavaIoFile_withInt_withJavaUtilCollection_(OrgApacheCommonsIoDirectoryWalker *self, JavaIoFile *directory, jint depth, id<JavaUtilCollection> results);

__attribute__((unused)) static void OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(OrgApacheCommonsIoDirectoryWalker *self, JavaIoFile *file, jint depth, id<JavaUtilCollection> results);

@interface OrgApacheCommonsIoDirectoryWalker_CancelException () {
 @public
  /*!
   @brief The file being processed when the exception was thrown.
   */
  JavaIoFile *file_;
  /*!
   @brief The file depth when the exception was thrown.
   */
  jint depth_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoDirectoryWalker_CancelException, file_, JavaIoFile *)

/*!
 @brief Serialization id.
 */
inline jlong OrgApacheCommonsIoDirectoryWalker_CancelException_get_serialVersionUID(void);
#define OrgApacheCommonsIoDirectoryWalker_CancelException_serialVersionUID 1347339620135041008LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoDirectoryWalker_CancelException, serialVersionUID, jlong)

@implementation OrgApacheCommonsIoDirectoryWalker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsIoDirectoryWalker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaIoFileFilter:(id<JavaIoFileFilter>)filter
                                 withInt:(jint)depthLimit {
  OrgApacheCommonsIoDirectoryWalker_initWithJavaIoFileFilter_withInt_(self, filter, depthLimit);
  return self;
}

- (instancetype)initWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)directoryFilter
                    withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
                                                         withInt:(jint)depthLimit {
  OrgApacheCommonsIoDirectoryWalker_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_withInt_(self, directoryFilter, fileFilter, depthLimit);
  return self;
}

- (void)walkWithJavaIoFile:(JavaIoFile *)startDirectory
    withJavaUtilCollection:(id<JavaUtilCollection>)results {
  if (startDirectory == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Start Directory is null");
  }
  @try {
    [self handleStartWithJavaIoFile:startDirectory withJavaUtilCollection:results];
    OrgApacheCommonsIoDirectoryWalker_walkWithJavaIoFile_withInt_withJavaUtilCollection_(self, startDirectory, 0, results);
    [self handleEndWithJavaUtilCollection:results];
  }
  @catch (OrgApacheCommonsIoDirectoryWalker_CancelException *cancel) {
    [self handleCancelledWithJavaIoFile:startDirectory withJavaUtilCollection:results withOrgApacheCommonsIoDirectoryWalker_CancelException:cancel];
  }
}

- (void)checkIfCancelledWithJavaIoFile:(JavaIoFile *)file
                               withInt:(jint)depth
                withJavaUtilCollection:(id<JavaUtilCollection>)results {
  OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, file, depth, results);
}

- (jboolean)handleIsCancelledWithJavaIoFile:(JavaIoFile *)file
                                    withInt:(jint)depth
                     withJavaUtilCollection:(id<JavaUtilCollection>)results {
  return false;
}

- (void)handleCancelledWithJavaIoFile:(JavaIoFile *)startDirectory
               withJavaUtilCollection:(id<JavaUtilCollection>)results
withOrgApacheCommonsIoDirectoryWalker_CancelException:(OrgApacheCommonsIoDirectoryWalker_CancelException *)cancel {
  @throw nil_chk(cancel);
}

- (void)handleStartWithJavaIoFile:(JavaIoFile *)startDirectory
           withJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (jboolean)handleDirectoryWithJavaIoFile:(JavaIoFile *)directory
                                  withInt:(jint)depth
                   withJavaUtilCollection:(id<JavaUtilCollection>)results {
  return true;
}

- (void)handleDirectoryStartWithJavaIoFile:(JavaIoFile *)directory
                                   withInt:(jint)depth
                    withJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (IOSObjectArray *)filterDirectoryContentsWithJavaIoFile:(JavaIoFile *)directory
                                                  withInt:(jint)depth
                                      withJavaIoFileArray:(IOSObjectArray *)files {
  return files;
}

- (void)handleFileWithJavaIoFile:(JavaIoFile *)file
                         withInt:(jint)depth
          withJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (void)handleRestrictedWithJavaIoFile:(JavaIoFile *)directory
                               withInt:(jint)depth
                withJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (void)handleDirectoryEndWithJavaIoFile:(JavaIoFile *)directory
                                 withInt:(jint)depth
                  withJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (void)handleEndWithJavaUtilCollection:(id<JavaUtilCollection>)results {
}

- (void)dealloc {
  RELEASE_(filter_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoDirectoryWalker_init(OrgApacheCommonsIoDirectoryWalker *self) {
  OrgApacheCommonsIoDirectoryWalker_initWithJavaIoFileFilter_withInt_(self, nil, -1);
}

void OrgApacheCommonsIoDirectoryWalker_initWithJavaIoFileFilter_withInt_(OrgApacheCommonsIoDirectoryWalker *self, id<JavaIoFileFilter> filter, jint depthLimit) {
  NSObject_init(self);
  JreStrongAssign(&self->filter_, filter);
  self->depthLimit_ = depthLimit;
}

void OrgApacheCommonsIoDirectoryWalker_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_withInt_(OrgApacheCommonsIoDirectoryWalker *self, id<OrgApacheCommonsIoFilefilterIOFileFilter> directoryFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, jint depthLimit) {
  NSObject_init(self);
  if (directoryFilter == nil && fileFilter == nil) {
    JreStrongAssign(&self->filter_, nil);
  }
  else {
    directoryFilter = directoryFilter != nil ? directoryFilter : JreLoadStatic(OrgApacheCommonsIoFilefilterTrueFileFilter, TRUE);
    fileFilter = fileFilter != nil ? fileFilter : JreLoadStatic(OrgApacheCommonsIoFilefilterTrueFileFilter, TRUE);
    directoryFilter = OrgApacheCommonsIoFilefilterFileFilterUtils_makeDirectoryOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter_(directoryFilter);
    fileFilter = OrgApacheCommonsIoFilefilterFileFilterUtils_makeFileOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter_(fileFilter);
    JreStrongAssign(&self->filter_, OrgApacheCommonsIoFilefilterFileFilterUtils_or__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_([IOSObjectArray arrayWithObjects:(id[]){ directoryFilter, fileFilter } count:2 type:OrgApacheCommonsIoFilefilterIOFileFilter_class_()]));
  }
  self->depthLimit_ = depthLimit;
}

void OrgApacheCommonsIoDirectoryWalker_walkWithJavaIoFile_withInt_withJavaUtilCollection_(OrgApacheCommonsIoDirectoryWalker *self, JavaIoFile *directory, jint depth, id<JavaUtilCollection> results) {
  OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, directory, depth, results);
  if ([self handleDirectoryWithJavaIoFile:directory withInt:depth withJavaUtilCollection:results]) {
    [self handleDirectoryStartWithJavaIoFile:directory withInt:depth withJavaUtilCollection:results];
    jint childDepth = depth + 1;
    if (self->depthLimit_ < 0 || childDepth <= self->depthLimit_) {
      OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, directory, depth, results);
      IOSObjectArray *childFiles = self->filter_ == nil ? [((JavaIoFile *) nil_chk(directory)) listFiles] : [((JavaIoFile *) nil_chk(directory)) listFilesWithJavaIoFileFilter:self->filter_];
      childFiles = [self filterDirectoryContentsWithJavaIoFile:directory withInt:depth withJavaIoFileArray:childFiles];
      if (childFiles == nil) {
        [self handleRestrictedWithJavaIoFile:directory withInt:childDepth withJavaUtilCollection:results];
      }
      else {
        {
          IOSObjectArray *a__ = childFiles;
          JavaIoFile * const *b__ = a__->buffer_;
          JavaIoFile * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaIoFile *childFile = *b__++;
            if ([((JavaIoFile *) nil_chk(childFile)) isDirectory]) {
              OrgApacheCommonsIoDirectoryWalker_walkWithJavaIoFile_withInt_withJavaUtilCollection_(self, childFile, childDepth, results);
            }
            else {
              OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, childFile, childDepth, results);
              [self handleFileWithJavaIoFile:childFile withInt:childDepth withJavaUtilCollection:results];
              OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, childFile, childDepth, results);
            }
          }
        }
      }
    }
    [self handleDirectoryEndWithJavaIoFile:directory withInt:depth withJavaUtilCollection:results];
  }
  OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(self, directory, depth, results);
}

void OrgApacheCommonsIoDirectoryWalker_checkIfCancelledWithJavaIoFile_withInt_withJavaUtilCollection_(OrgApacheCommonsIoDirectoryWalker *self, JavaIoFile *file, jint depth, id<JavaUtilCollection> results) {
  if ([self handleIsCancelledWithJavaIoFile:file withInt:depth withJavaUtilCollection:results]) {
    @throw create_OrgApacheCommonsIoDirectoryWalker_CancelException_initWithJavaIoFile_withInt_(file, depth);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoDirectoryWalker)

@implementation OrgApacheCommonsIoDirectoryWalker_CancelException

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                           withInt:(jint)depth {
  OrgApacheCommonsIoDirectoryWalker_CancelException_initWithJavaIoFile_withInt_(self, file, depth);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                  withJavaIoFile:(JavaIoFile *)file
                         withInt:(jint)depth {
  OrgApacheCommonsIoDirectoryWalker_CancelException_initWithNSString_withJavaIoFile_withInt_(self, message, file, depth);
  return self;
}

- (JavaIoFile *)getFile {
  return file_;
}

- (jint)getDepth {
  return depth_;
}

- (void)dealloc {
  RELEASE_(file_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoDirectoryWalker_CancelException_initWithJavaIoFile_withInt_(OrgApacheCommonsIoDirectoryWalker_CancelException *self, JavaIoFile *file, jint depth) {
  OrgApacheCommonsIoDirectoryWalker_CancelException_initWithNSString_withJavaIoFile_withInt_(self, @"Operation Cancelled", file, depth);
}

OrgApacheCommonsIoDirectoryWalker_CancelException *new_OrgApacheCommonsIoDirectoryWalker_CancelException_initWithJavaIoFile_withInt_(JavaIoFile *file, jint depth) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoDirectoryWalker_CancelException, initWithJavaIoFile_withInt_, file, depth)
}

OrgApacheCommonsIoDirectoryWalker_CancelException *create_OrgApacheCommonsIoDirectoryWalker_CancelException_initWithJavaIoFile_withInt_(JavaIoFile *file, jint depth) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoDirectoryWalker_CancelException, initWithJavaIoFile_withInt_, file, depth)
}

void OrgApacheCommonsIoDirectoryWalker_CancelException_initWithNSString_withJavaIoFile_withInt_(OrgApacheCommonsIoDirectoryWalker_CancelException *self, NSString *message, JavaIoFile *file, jint depth) {
  JavaIoIOException_initWithNSString_(self, message);
  JreStrongAssign(&self->file_, file);
  self->depth_ = depth;
}

OrgApacheCommonsIoDirectoryWalker_CancelException *new_OrgApacheCommonsIoDirectoryWalker_CancelException_initWithNSString_withJavaIoFile_withInt_(NSString *message, JavaIoFile *file, jint depth) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoDirectoryWalker_CancelException, initWithNSString_withJavaIoFile_withInt_, message, file, depth)
}

OrgApacheCommonsIoDirectoryWalker_CancelException *create_OrgApacheCommonsIoDirectoryWalker_CancelException_initWithNSString_withJavaIoFile_withInt_(NSString *message, JavaIoFile *file, jint depth) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoDirectoryWalker_CancelException, initWithNSString_withJavaIoFile_withInt_, message, file, depth)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoDirectoryWalker_CancelException)
