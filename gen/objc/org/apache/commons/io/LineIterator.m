//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/LineIterator.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "org/apache/commons/io/IOUtils.h"
#include "org/apache/commons/io/LineIterator.h"

@interface OrgApacheCommonsIoLineIterator () {
 @public
  /*!
   @brief The reader that is being read.
   */
  JavaIoBufferedReader *bufferedReader_;
  /*!
   @brief The current line.
   */
  NSString *cachedLine_;
  /*!
   @brief A flag indicating if the iterator has been fully read.
   */
  jboolean finished_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoLineIterator, bufferedReader_, JavaIoBufferedReader *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoLineIterator, cachedLine_, NSString *)

@implementation OrgApacheCommonsIoLineIterator

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader {
  OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(self, reader);
  return self;
}

- (jboolean)hasNext {
  if (cachedLine_ != nil) {
    return true;
  }
  else if (finished_) {
    return false;
  }
  else {
    @try {
      while (true) {
        NSString *line = [((JavaIoBufferedReader *) nil_chk(bufferedReader_)) readLine];
        if (line == nil) {
          finished_ = true;
          return false;
        }
        else if ([self isValidLineWithNSString:line]) {
          JreStrongAssign(&cachedLine_, line);
          return true;
        }
      }
    }
    @catch (JavaIoIOException *ioe) {
      [self close];
      @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(ioe);
    }
  }
}

- (jboolean)isValidLineWithNSString:(NSString *)line {
  return true;
}

- (NSString *)next {
  return [self nextLine];
}

- (NSString *)nextLine {
  if (![self hasNext]) {
    @throw create_JavaUtilNoSuchElementException_initWithNSString_(@"No more lines");
  }
  NSString *currentLine = cachedLine_;
  JreStrongAssign(&cachedLine_, nil);
  return currentLine;
}

- (void)close {
  finished_ = true;
  OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoReader_(bufferedReader_);
  JreStrongAssign(&cachedLine_, nil);
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Remove unsupported on LineIterator");
}

+ (void)closeQuietlyWithOrgApacheCommonsIoLineIterator:(OrgApacheCommonsIoLineIterator *)iterator {
  OrgApacheCommonsIoLineIterator_closeQuietlyWithOrgApacheCommonsIoLineIterator_(iterator);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(bufferedReader_);
  RELEASE_(cachedLine_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(OrgApacheCommonsIoLineIterator *self, JavaIoReader *reader) {
  NSObject_init(self);
  self->finished_ = false;
  if (reader == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Reader must not be null");
  }
  if ([reader isKindOfClass:[JavaIoBufferedReader class]]) {
    JreStrongAssign(&self->bufferedReader_, (JavaIoBufferedReader *) cast_chk(reader, [JavaIoBufferedReader class]));
  }
  else {
    JreStrongAssignAndConsume(&self->bufferedReader_, new_JavaIoBufferedReader_initWithJavaIoReader_(reader));
  }
}

OrgApacheCommonsIoLineIterator *new_OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoLineIterator, initWithJavaIoReader_, reader)
}

OrgApacheCommonsIoLineIterator *create_OrgApacheCommonsIoLineIterator_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoLineIterator, initWithJavaIoReader_, reader)
}

void OrgApacheCommonsIoLineIterator_closeQuietlyWithOrgApacheCommonsIoLineIterator_(OrgApacheCommonsIoLineIterator *iterator) {
  OrgApacheCommonsIoLineIterator_initialize();
  if (iterator != nil) {
    [iterator close];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoLineIterator)
