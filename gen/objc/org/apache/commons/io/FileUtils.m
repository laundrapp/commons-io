//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FileUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/math/BigInteger.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/CheckedInputStream.h"
#include "java/util/zip/Checksum.h"
#include "org/apache/commons/io/Charsets.h"
#include "org/apache/commons/io/FileExistsException.h"
#include "org/apache/commons/io/FileUtils.h"
#include "org/apache/commons/io/FilenameUtils.h"
#include "org/apache/commons/io/IOUtils.h"
#include "org/apache/commons/io/LineIterator.h"
#include "org/apache/commons/io/filefilter/DirectoryFileFilter.h"
#include "org/apache/commons/io/filefilter/FalseFileFilter.h"
#include "org/apache/commons/io/filefilter/FileFilterUtils.h"
#include "org/apache/commons/io/filefilter/IOFileFilter.h"
#include "org/apache/commons/io/filefilter/SuffixFileFilter.h"
#include "org/apache/commons/io/filefilter/TrueFileFilter.h"
#include "org/apache/commons/io/output/NullOutputStream.h"

/*!
 @brief The file copy buffer size (30 MB)
 */
inline jlong OrgApacheCommonsIoFileUtils_get_FILE_COPY_BUFFER_SIZE(void);
#define OrgApacheCommonsIoFileUtils_FILE_COPY_BUFFER_SIZE 31457280LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, FILE_COPY_BUFFER_SIZE, jlong)

/*!
 @brief The UTF-8 character set, used to decode octets in URLs.
 */
inline JavaNioCharsetCharset *OrgApacheCommonsIoFileUtils_get_UTF8(void);
static JavaNioCharsetCharset *OrgApacheCommonsIoFileUtils_UTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, UTF8, JavaNioCharsetCharset *)

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_innerListFilesWithJavaUtilCollection_withJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withBoolean_(id<JavaUtilCollection> files, JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, jboolean includeSubDirectories);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_validateListFilesParametersWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter);

__attribute__((unused)) static id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFileUtils_setUpEffectiveFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter);

__attribute__((unused)) static id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFileUtils_setUpEffectiveDirFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsIoFileUtils_toSuffixesWithNSStringArray_(IOSObjectArray *extensions);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_doCopyFileWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destFile, jboolean preserveFileDate);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_doCopyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_withJavaUtilList_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter, jboolean preserveFileDate, id<JavaUtilList> exclusionList);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_deleteDirectoryOnExitWithJavaIoFile_(JavaIoFile *directory);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_cleanDirectoryOnExitWithJavaIoFile_(JavaIoFile *directory);

__attribute__((unused)) static void OrgApacheCommonsIoFileUtils_checkDirectoryWithJavaIoFile_(JavaIoFile *directory);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoFileUtils)

JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_KB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_MB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_GB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_TB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_PB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_EB_BI;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_ZB;
JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_YB;
IOSObjectArray *OrgApacheCommonsIoFileUtils_EMPTY_FILE_ARRAY;

@implementation OrgApacheCommonsIoFileUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsIoFileUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaIoFile *)getFileWithJavaIoFile:(JavaIoFile *)directory
                    withNSStringArray:(IOSObjectArray *)names {
  return OrgApacheCommonsIoFileUtils_getFileWithJavaIoFile_withNSStringArray_(directory, names);
}

+ (JavaIoFile *)getFileWithNSStringArray:(IOSObjectArray *)names {
  return OrgApacheCommonsIoFileUtils_getFileWithNSStringArray_(names);
}

+ (NSString *)getTempDirectoryPath {
  return OrgApacheCommonsIoFileUtils_getTempDirectoryPath();
}

+ (JavaIoFile *)getTempDirectory {
  return OrgApacheCommonsIoFileUtils_getTempDirectory();
}

+ (NSString *)getUserDirectoryPath {
  return OrgApacheCommonsIoFileUtils_getUserDirectoryPath();
}

+ (JavaIoFile *)getUserDirectory {
  return OrgApacheCommonsIoFileUtils_getUserDirectory();
}

+ (JavaIoFileInputStream *)openInputStreamWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(file);
}

+ (JavaIoFileOutputStream *)openOutputStreamWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_(file);
}

+ (JavaIoFileOutputStream *)openOutputStreamWithJavaIoFile:(JavaIoFile *)file
                                               withBoolean:(jboolean)append {
  return OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(file, append);
}

+ (NSString *)byteCountToDisplaySizeWithJavaMathBigInteger:(JavaMathBigInteger *)size {
  return OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithJavaMathBigInteger_(size);
}

+ (NSString *)byteCountToDisplaySizeWithLong:(jlong)size {
  return OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithLong_(size);
}

+ (void)touchWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoFileUtils_touchWithJavaIoFile_(file);
}

+ (IOSObjectArray *)convertFileCollectionToFileArrayWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  return OrgApacheCommonsIoFileUtils_convertFileCollectionToFileArrayWithJavaUtilCollection_(files);
}

+ (id<JavaUtilCollection>)listFilesWithJavaIoFile:(JavaIoFile *)directory
     withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
     withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter {
  return OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter);
}

+ (id<JavaUtilCollection>)listFilesAndDirsWithJavaIoFile:(JavaIoFile *)directory
            withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
            withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter {
  return OrgApacheCommonsIoFileUtils_listFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter);
}

+ (id<JavaUtilIterator>)iterateFilesWithJavaIoFile:(JavaIoFile *)directory
      withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
      withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter {
  return OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter);
}

+ (id<JavaUtilIterator>)iterateFilesAndDirsWithJavaIoFile:(JavaIoFile *)directory
             withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
             withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter {
  return OrgApacheCommonsIoFileUtils_iterateFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter);
}

+ (id<JavaUtilCollection>)listFilesWithJavaIoFile:(JavaIoFile *)directory
                                withNSStringArray:(IOSObjectArray *)extensions
                                      withBoolean:(jboolean)recursive {
  return OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withNSStringArray_withBoolean_(directory, extensions, recursive);
}

+ (id<JavaUtilIterator>)iterateFilesWithJavaIoFile:(JavaIoFile *)directory
                                 withNSStringArray:(IOSObjectArray *)extensions
                                       withBoolean:(jboolean)recursive {
  return OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withNSStringArray_withBoolean_(directory, extensions, recursive);
}

+ (jboolean)contentEqualsWithJavaIoFile:(JavaIoFile *)file1
                         withJavaIoFile:(JavaIoFile *)file2 {
  return OrgApacheCommonsIoFileUtils_contentEqualsWithJavaIoFile_withJavaIoFile_(file1, file2);
}

+ (jboolean)contentEqualsIgnoreEOLWithJavaIoFile:(JavaIoFile *)file1
                                  withJavaIoFile:(JavaIoFile *)file2
                                    withNSString:(NSString *)charsetName {
  return OrgApacheCommonsIoFileUtils_contentEqualsIgnoreEOLWithJavaIoFile_withJavaIoFile_withNSString_(file1, file2, charsetName);
}

+ (JavaIoFile *)toFileWithJavaNetURL:(JavaNetURL *)url {
  return OrgApacheCommonsIoFileUtils_toFileWithJavaNetURL_(url);
}

+ (NSString *)decodeUrlWithNSString:(NSString *)url {
  return OrgApacheCommonsIoFileUtils_decodeUrlWithNSString_(url);
}

+ (IOSObjectArray *)toFilesWithJavaNetURLArray:(IOSObjectArray *)urls {
  return OrgApacheCommonsIoFileUtils_toFilesWithJavaNetURLArray_(urls);
}

+ (IOSObjectArray *)toURLsWithJavaIoFileArray:(IOSObjectArray *)files {
  return OrgApacheCommonsIoFileUtils_toURLsWithJavaIoFileArray_(files);
}

+ (void)copyFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir {
  OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_(srcFile, destDir);
}

+ (void)copyFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir
                              withBoolean:(jboolean)preserveFileDate {
  OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destDir, preserveFileDate);
}

+ (void)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile {
  OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(srcFile, destFile);
}

+ (void)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile
                   withBoolean:(jboolean)preserveFileDate {
  OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destFile, preserveFileDate);
}

+ (jlong)copyFileWithJavaIoFile:(JavaIoFile *)input
         withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoOutputStream_(input, output);
}

+ (void)copyDirectoryToDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                                withJavaIoFile:(JavaIoFile *)destDir {
  OrgApacheCommonsIoFileUtils_copyDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_(srcDir, destDir);
}

+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir {
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_(srcDir, destDir);
}

+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
                        withBoolean:(jboolean)preserveFileDate {
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcDir, destDir, preserveFileDate);
}

+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
               withJavaIoFileFilter:(id<JavaIoFileFilter>)filter {
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_(srcDir, destDir, filter);
}

+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
               withJavaIoFileFilter:(id<JavaIoFileFilter>)filter
                        withBoolean:(jboolean)preserveFileDate {
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(srcDir, destDir, filter, preserveFileDate);
}

+ (void)copyURLToFileWithJavaNetURL:(JavaNetURL *)source
                     withJavaIoFile:(JavaIoFile *)destination {
  OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_(source, destination);
}

+ (void)copyURLToFileWithJavaNetURL:(JavaNetURL *)source
                     withJavaIoFile:(JavaIoFile *)destination
                            withInt:(jint)connectionTimeout
                            withInt:(jint)readTimeout {
  OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_withInt_withInt_(source, destination, connectionTimeout, readTimeout);
}

+ (void)copyInputStreamToFileWithJavaIoInputStream:(JavaIoInputStream *)source
                                    withJavaIoFile:(JavaIoFile *)destination {
  OrgApacheCommonsIoFileUtils_copyInputStreamToFileWithJavaIoInputStream_withJavaIoFile_(source, destination);
}

+ (void)deleteDirectoryWithJavaIoFile:(JavaIoFile *)directory {
  OrgApacheCommonsIoFileUtils_deleteDirectoryWithJavaIoFile_(directory);
}

+ (jboolean)deleteQuietlyWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(file);
}

+ (jboolean)directoryContainsWithJavaIoFile:(JavaIoFile *)directory
                             withJavaIoFile:(JavaIoFile *)child {
  return OrgApacheCommonsIoFileUtils_directoryContainsWithJavaIoFile_withJavaIoFile_(directory, child);
}

+ (void)cleanDirectoryWithJavaIoFile:(JavaIoFile *)directory {
  OrgApacheCommonsIoFileUtils_cleanDirectoryWithJavaIoFile_(directory);
}

+ (jboolean)waitForWithJavaIoFile:(JavaIoFile *)file
                          withInt:(jint)seconds {
  return OrgApacheCommonsIoFileUtils_waitForWithJavaIoFile_withInt_(file, seconds);
}

+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  return OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withJavaNioCharsetCharset_(file, encoding);
}

+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding {
  return OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withNSString_(file, encoding);
}

+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_(file);
}

+ (IOSByteArray *)readFileToByteArrayWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_readFileToByteArrayWithJavaIoFile_(file);
}

+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  return OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withJavaNioCharsetCharset_(file, encoding);
}

+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file
                               withNSString:(NSString *)encoding {
  return OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withNSString_(file, encoding);
}

+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_(file);
}

+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoFile:(JavaIoFile *)file
                                                  withNSString:(NSString *)encoding {
  return OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_withNSString_(file, encoding);
}

+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_(file);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_(file, data, encoding);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                           withNSString:(NSString *)encoding {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_(file, data, encoding);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                            withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, data, encoding, append);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                           withNSString:(NSString *)encoding
                            withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_withBoolean_(file, data, encoding, append);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_(file, data);
}

+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                            withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withBoolean_(file, data, append);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_(file, data);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
                withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withBoolean_(file, data, append);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_(file, data, encoding);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withNSString:(NSString *)encoding {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_(file, data, encoding);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(file, data, encoding, append);
}

+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withNSString:(NSString *)encoding
                withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_withBoolean_(file, data, encoding, append);
}

+ (void)writeByteArrayToFileWithJavaIoFile:(JavaIoFile *)file
                             withByteArray:(IOSByteArray *)data {
  OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_(file, data);
}

+ (void)writeByteArrayToFileWithJavaIoFile:(JavaIoFile *)file
                             withByteArray:(IOSByteArray *)data
                               withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_withBoolean_(file, data, append);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_(file, encoding, lines);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                     withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withBoolean_(file, encoding, lines, append);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_(file, lines);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                     withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withBoolean_(file, lines, append);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_(file, encoding, lines, lineEnding);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding
                     withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, encoding, lines, lineEnding, append);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_(file, lines, lineEnding);
}

+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding
                     withBoolean:(jboolean)append {
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_withBoolean_(file, lines, lineEnding, append);
}

+ (void)forceDeleteWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoFileUtils_forceDeleteWithJavaIoFile_(file);
}

+ (void)forceDeleteOnExitWithJavaIoFile:(JavaIoFile *)file {
  OrgApacheCommonsIoFileUtils_forceDeleteOnExitWithJavaIoFile_(file);
}

+ (void)forceMkdirWithJavaIoFile:(JavaIoFile *)directory {
  OrgApacheCommonsIoFileUtils_forceMkdirWithJavaIoFile_(directory);
}

+ (jlong)sizeOfWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_sizeOfWithJavaIoFile_(file);
}

+ (JavaMathBigInteger *)sizeOfAsBigIntegerWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_sizeOfAsBigIntegerWithJavaIoFile_(file);
}

+ (jlong)sizeOfDirectoryWithJavaIoFile:(JavaIoFile *)directory {
  return OrgApacheCommonsIoFileUtils_sizeOfDirectoryWithJavaIoFile_(directory);
}

+ (JavaMathBigInteger *)sizeOfDirectoryAsBigIntegerWithJavaIoFile:(JavaIoFile *)directory {
  return OrgApacheCommonsIoFileUtils_sizeOfDirectoryAsBigIntegerWithJavaIoFile_(directory);
}

+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                       withJavaIoFile:(JavaIoFile *)reference {
  return OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaIoFile_(file, reference);
}

+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                     withJavaUtilDate:(JavaUtilDate *)date {
  return OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaUtilDate_(file, date);
}

+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                             withLong:(jlong)timeMillis {
  return OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withLong_(file, timeMillis);
}

+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                       withJavaIoFile:(JavaIoFile *)reference {
  return OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaIoFile_(file, reference);
}

+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                     withJavaUtilDate:(JavaUtilDate *)date {
  return OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaUtilDate_(file, date);
}

+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                             withLong:(jlong)timeMillis {
  return OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withLong_(file, timeMillis);
}

+ (jlong)checksumCRC32WithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_checksumCRC32WithJavaIoFile_(file);
}

+ (id<JavaUtilZipChecksum>)checksumWithJavaIoFile:(JavaIoFile *)file
                          withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)checksum {
  return OrgApacheCommonsIoFileUtils_checksumWithJavaIoFile_withJavaUtilZipChecksum_(file, checksum);
}

+ (void)moveDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir {
  OrgApacheCommonsIoFileUtils_moveDirectoryWithJavaIoFile_withJavaIoFile_(srcDir, destDir);
}

+ (void)moveDirectoryToDirectoryWithJavaIoFile:(JavaIoFile *)src
                                withJavaIoFile:(JavaIoFile *)destDir
                                   withBoolean:(jboolean)createDestDir {
  OrgApacheCommonsIoFileUtils_moveDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(src, destDir, createDestDir);
}

+ (void)moveFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile {
  OrgApacheCommonsIoFileUtils_moveFileWithJavaIoFile_withJavaIoFile_(srcFile, destFile);
}

+ (void)moveFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir
                              withBoolean:(jboolean)createDestDir {
  OrgApacheCommonsIoFileUtils_moveFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destDir, createDestDir);
}

+ (void)moveToDirectoryWithJavaIoFile:(JavaIoFile *)src
                       withJavaIoFile:(JavaIoFile *)destDir
                          withBoolean:(jboolean)createDestDir {
  OrgApacheCommonsIoFileUtils_moveToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(src, destDir, createDestDir);
}

+ (jboolean)isSymlinkWithJavaIoFile:(JavaIoFile *)file {
  return OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(file);
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoFileUtils class]) {
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_KB_BI, JavaMathBigInteger_valueOfWithLong_(OrgApacheCommonsIoFileUtils_ONE_KB));
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_MB_BI, [((JavaMathBigInteger *) nil_chk(OrgApacheCommonsIoFileUtils_ONE_KB_BI)) multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_KB_BI]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_GB_BI, [OrgApacheCommonsIoFileUtils_ONE_KB_BI multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_MB_BI]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_TB_BI, [OrgApacheCommonsIoFileUtils_ONE_KB_BI multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_GB_BI]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_PB_BI, [OrgApacheCommonsIoFileUtils_ONE_KB_BI multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_TB_BI]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_EB_BI, [OrgApacheCommonsIoFileUtils_ONE_KB_BI multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_PB_BI]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_ZB, [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(OrgApacheCommonsIoFileUtils_ONE_KB))) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(OrgApacheCommonsIoFileUtils_ONE_EB)]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_ONE_YB, [OrgApacheCommonsIoFileUtils_ONE_KB_BI multiplyWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_ZB]);
    JreStrongAssignAndConsume(&OrgApacheCommonsIoFileUtils_EMPTY_FILE_ARRAY, [IOSObjectArray newArrayWithLength:0 type:JavaIoFile_class_()]);
    JreStrongAssign(&OrgApacheCommonsIoFileUtils_UTF8, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoFileUtils)
  }
}

@end

void OrgApacheCommonsIoFileUtils_init(OrgApacheCommonsIoFileUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsIoFileUtils *new_OrgApacheCommonsIoFileUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFileUtils, init)
}

OrgApacheCommonsIoFileUtils *create_OrgApacheCommonsIoFileUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFileUtils, init)
}

JavaIoFile *OrgApacheCommonsIoFileUtils_getFileWithJavaIoFile_withNSStringArray_(JavaIoFile *directory, IOSObjectArray *names) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (directory == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"directorydirectory must not be null");
  }
  if (names == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"names must not be null");
  }
  JavaIoFile *file = directory;
  {
    IOSObjectArray *a__ = names;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      file = create_JavaIoFile_initWithJavaIoFile_withNSString_(file, name);
    }
  }
  return file;
}

JavaIoFile *OrgApacheCommonsIoFileUtils_getFileWithNSStringArray_(IOSObjectArray *names) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (names == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"names must not be null");
  }
  JavaIoFile *file = nil;
  {
    IOSObjectArray *a__ = names;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      if (file == nil) {
        file = create_JavaIoFile_initWithNSString_(name);
      }
      else {
        file = create_JavaIoFile_initWithJavaIoFile_withNSString_(file, name);
      }
    }
  }
  return file;
}

NSString *OrgApacheCommonsIoFileUtils_getTempDirectoryPath() {
  OrgApacheCommonsIoFileUtils_initialize();
  return JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir");
}

JavaIoFile *OrgApacheCommonsIoFileUtils_getTempDirectory() {
  OrgApacheCommonsIoFileUtils_initialize();
  return create_JavaIoFile_initWithNSString_(OrgApacheCommonsIoFileUtils_getTempDirectoryPath());
}

NSString *OrgApacheCommonsIoFileUtils_getUserDirectoryPath() {
  OrgApacheCommonsIoFileUtils_initialize();
  return JavaLangSystem_getPropertyWithNSString_(@"user.home");
}

JavaIoFile *OrgApacheCommonsIoFileUtils_getUserDirectory() {
  OrgApacheCommonsIoFileUtils_initialize();
  return create_JavaIoFile_initWithNSString_(OrgApacheCommonsIoFileUtils_getUserDirectoryPath());
}

JavaIoFileInputStream *OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(file)) exists]) {
    if ([file isDirectory]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"File '", file, @"' exists but is a directory"));
    }
    if ([file canRead] == false) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"File '", file, @"' cannot be read"));
    }
  }
  else {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"File '", file, @"' does not exist"));
  }
  return create_JavaIoFileInputStream_initWithJavaIoFile_(file);
}

JavaIoFileOutputStream *OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(file, false);
}

JavaIoFileOutputStream *OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(file)) exists]) {
    if ([file isDirectory]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"File '", file, @"' exists but is a directory"));
    }
    if ([file canWrite] == false) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"File '", file, @"' cannot be written to"));
    }
  }
  else {
    JavaIoFile *parent = [file getParentFile];
    if (parent != nil) {
      if (![parent mkdirs] && ![parent isDirectory]) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Directory '", parent, @"' could not be created"));
      }
    }
  }
  return create_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(file, append);
}

NSString *OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithJavaMathBigInteger_(JavaMathBigInteger *size) {
  OrgApacheCommonsIoFileUtils_initialize();
  NSString *displaySize;
  if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(size)) divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_EB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_EB_BI]), @" EB");
  }
  else if ([((JavaMathBigInteger *) nil_chk([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_PB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_PB_BI]), @" PB");
  }
  else if ([((JavaMathBigInteger *) nil_chk([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_TB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_TB_BI]), @" TB");
  }
  else if ([((JavaMathBigInteger *) nil_chk([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_GB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_GB_BI]), @" GB");
  }
  else if ([((JavaMathBigInteger *) nil_chk([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_MB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_MB_BI]), @" MB");
  }
  else if ([((JavaMathBigInteger *) nil_chk([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_KB_BI])) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] > 0) {
    displaySize = JreStrcat("$$", NSString_java_valueOf_([size divideWithJavaMathBigInteger:OrgApacheCommonsIoFileUtils_ONE_KB_BI]), @" KB");
  }
  else {
    displaySize = JreStrcat("$$", NSString_java_valueOf_(size), @" bytes");
  }
  return displaySize;
}

NSString *OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithLong_(jlong size) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithJavaMathBigInteger_(JavaMathBigInteger_valueOfWithLong_(size));
}

void OrgApacheCommonsIoFileUtils_touchWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(file)) exists]) {
    JavaIoOutputStream *out = OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_(file);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(out);
  }
  jboolean success = [file setLastModifiedWithLong:JavaLangSystem_currentTimeMillis()];
  if (!success) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Unable to set the last modification time for ", file));
  }
}

IOSObjectArray *OrgApacheCommonsIoFileUtils_convertFileCollectionToFileArrayWithJavaUtilCollection_(id<JavaUtilCollection> files) {
  OrgApacheCommonsIoFileUtils_initialize();
  return [((id<JavaUtilCollection>) nil_chk(files)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[files size] type:JavaIoFile_class_()]];
}

void OrgApacheCommonsIoFileUtils_innerListFilesWithJavaUtilCollection_withJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withBoolean_(id<JavaUtilCollection> files, JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, jboolean includeSubDirectories) {
  OrgApacheCommonsIoFileUtils_initialize();
  IOSObjectArray *found = [((JavaIoFile *) nil_chk(directory)) listFilesWithJavaIoFileFilter:filter];
  if (found != nil) {
    {
      IOSObjectArray *a__ = found;
      JavaIoFile * const *b__ = a__->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *file = *b__++;
        if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
          if (includeSubDirectories) {
            [((id<JavaUtilCollection>) nil_chk(files)) addWithId:file];
          }
          OrgApacheCommonsIoFileUtils_innerListFilesWithJavaUtilCollection_withJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withBoolean_(files, file, filter, includeSubDirectories);
        }
        else {
          [((id<JavaUtilCollection>) nil_chk(files)) addWithId:file];
        }
      }
    }
  }
}

id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_validateListFilesParametersWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter);
  id<OrgApacheCommonsIoFilefilterIOFileFilter> effFileFilter = OrgApacheCommonsIoFileUtils_setUpEffectiveFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(fileFilter);
  id<OrgApacheCommonsIoFilefilterIOFileFilter> effDirFilter = OrgApacheCommonsIoFileUtils_setUpEffectiveDirFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(dirFilter);
  id<JavaUtilCollection> files = create_JavaUtilLinkedList_init();
  OrgApacheCommonsIoFileUtils_innerListFilesWithJavaUtilCollection_withJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withBoolean_(files, directory, OrgApacheCommonsIoFilefilterFileFilterUtils_or__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_([IOSObjectArray arrayWithObjects:(id[]){ effFileFilter, effDirFilter } count:2 type:OrgApacheCommonsIoFilefilterIOFileFilter_class_()]), false);
  return files;
}

void OrgApacheCommonsIoFileUtils_validateListFilesParametersWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) isDirectory]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter 'directory' is not a directory");
  }
  if (fileFilter == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Parameter 'fileFilter' is null");
  }
}

id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFileUtils_setUpEffectiveFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFilefilterFileFilterUtils_and__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_([IOSObjectArray arrayWithObjects:(id[]){ fileFilter, OrgApacheCommonsIoFilefilterFileFilterUtils_notFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(JreLoadStatic(OrgApacheCommonsIoFilefilterDirectoryFileFilter, INSTANCE)) } count:2 type:OrgApacheCommonsIoFilefilterIOFileFilter_class_()]);
}

id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFileUtils_setUpEffectiveDirFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  return dirFilter == nil ? JreLoadStatic(OrgApacheCommonsIoFilefilterFalseFileFilter, INSTANCE) : OrgApacheCommonsIoFilefilterFileFilterUtils_and__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_([IOSObjectArray arrayWithObjects:(id[]){ dirFilter, JreLoadStatic(OrgApacheCommonsIoFilefilterDirectoryFileFilter, INSTANCE) } count:2 type:OrgApacheCommonsIoFilefilterIOFileFilter_class_()]);
}

id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_validateListFilesParametersWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter);
  id<OrgApacheCommonsIoFilefilterIOFileFilter> effFileFilter = OrgApacheCommonsIoFileUtils_setUpEffectiveFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(fileFilter);
  id<OrgApacheCommonsIoFilefilterIOFileFilter> effDirFilter = OrgApacheCommonsIoFileUtils_setUpEffectiveDirFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(dirFilter);
  id<JavaUtilCollection> files = create_JavaUtilLinkedList_init();
  if ([((JavaIoFile *) nil_chk(directory)) isDirectory]) {
    [files addWithId:directory];
  }
  OrgApacheCommonsIoFileUtils_innerListFilesWithJavaUtilCollection_withJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withBoolean_(files, directory, OrgApacheCommonsIoFilefilterFileFilterUtils_or__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_([IOSObjectArray arrayWithObjects:(id[]){ effFileFilter, effDirFilter } count:2 type:OrgApacheCommonsIoFilefilterIOFileFilter_class_()]), true);
  return files;
}

id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  return [((id<JavaUtilCollection>) nil_chk(OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter))) iterator];
}

id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter) {
  OrgApacheCommonsIoFileUtils_initialize();
  return [((id<JavaUtilCollection>) nil_chk(OrgApacheCommonsIoFileUtils_listFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, fileFilter, dirFilter))) iterator];
}

IOSObjectArray *OrgApacheCommonsIoFileUtils_toSuffixesWithNSStringArray_(IOSObjectArray *extensions) {
  OrgApacheCommonsIoFileUtils_initialize();
  IOSObjectArray *suffixes = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(extensions))->size_ type:NSString_class_()];
  for (jint i = 0; i < extensions->size_; i++) {
    IOSObjectArray_Set(suffixes, i, JreStrcat("C$", '.', IOSObjectArray_Get(extensions, i)));
  }
  return suffixes;
}

id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withNSStringArray_withBoolean_(JavaIoFile *directory, IOSObjectArray *extensions, jboolean recursive) {
  OrgApacheCommonsIoFileUtils_initialize();
  id<OrgApacheCommonsIoFilefilterIOFileFilter> filter;
  if (extensions == nil) {
    filter = JreLoadStatic(OrgApacheCommonsIoFilefilterTrueFileFilter, INSTANCE);
  }
  else {
    IOSObjectArray *suffixes = OrgApacheCommonsIoFileUtils_toSuffixesWithNSStringArray_(extensions);
    filter = create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_(suffixes);
  }
  return OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(directory, filter, recursive ? JreLoadStatic(OrgApacheCommonsIoFilefilterTrueFileFilter, INSTANCE) : JreLoadStatic(OrgApacheCommonsIoFilefilterFalseFileFilter, INSTANCE));
}

id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withNSStringArray_withBoolean_(JavaIoFile *directory, IOSObjectArray *extensions, jboolean recursive) {
  OrgApacheCommonsIoFileUtils_initialize();
  return [((id<JavaUtilCollection>) nil_chk(OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withNSStringArray_withBoolean_(directory, extensions, recursive))) iterator];
}

jboolean OrgApacheCommonsIoFileUtils_contentEqualsWithJavaIoFile_withJavaIoFile_(JavaIoFile *file1, JavaIoFile *file2) {
  OrgApacheCommonsIoFileUtils_initialize();
  jboolean file1Exists = [((JavaIoFile *) nil_chk(file1)) exists];
  if (file1Exists != [((JavaIoFile *) nil_chk(file2)) exists]) {
    return false;
  }
  if (!file1Exists) {
    return true;
  }
  if ([file1 isDirectory] || [file2 isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(@"Can't compare directories, only files");
  }
  if ([file1 length] != [file2 length]) {
    return false;
  }
  if ([((JavaIoFile *) nil_chk([file1 getCanonicalFile])) isEqual:[file2 getCanonicalFile]]) {
    return true;
  }
  JavaIoInputStream *input1 = nil;
  JavaIoInputStream *input2 = nil;
  @try {
    input1 = create_JavaIoFileInputStream_initWithJavaIoFile_(file1);
    input2 = create_JavaIoFileInputStream_initWithJavaIoFile_(file2);
    return OrgApacheCommonsIoIOUtils_contentEqualsWithJavaIoInputStream_withJavaIoInputStream_(input1, input2);
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(input1);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(input2);
  }
}

jboolean OrgApacheCommonsIoFileUtils_contentEqualsIgnoreEOLWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *file1, JavaIoFile *file2, NSString *charsetName) {
  OrgApacheCommonsIoFileUtils_initialize();
  jboolean file1Exists = [((JavaIoFile *) nil_chk(file1)) exists];
  if (file1Exists != [((JavaIoFile *) nil_chk(file2)) exists]) {
    return false;
  }
  if (!file1Exists) {
    return true;
  }
  if ([file1 isDirectory] || [file2 isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(@"Can't compare directories, only files");
  }
  if ([((JavaIoFile *) nil_chk([file1 getCanonicalFile])) isEqual:[file2 getCanonicalFile]]) {
    return true;
  }
  JavaIoReader *input1 = nil;
  JavaIoReader *input2 = nil;
  @try {
    if (charsetName == nil) {
      input1 = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(file1));
      input2 = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(file2));
    }
    else {
      input1 = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(file1), charsetName);
      input2 = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(file2), charsetName);
    }
    return OrgApacheCommonsIoIOUtils_contentEqualsIgnoreEOLWithJavaIoReader_withJavaIoReader_(input1, input2);
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoReader_(input1);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoReader_(input2);
  }
}

JavaIoFile *OrgApacheCommonsIoFileUtils_toFileWithJavaNetURL_(JavaNetURL *url) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (url == nil || ![@"file" java_equalsIgnoreCase:[url getProtocol]]) {
    return nil;
  }
  else {
    NSString *filename = [((NSString *) nil_chk([url getFile])) java_replace:'/' withChar:JreLoadStatic(JavaIoFile, separatorChar)];
    filename = OrgApacheCommonsIoFileUtils_decodeUrlWithNSString_(filename);
    return create_JavaIoFile_initWithNSString_(filename);
  }
}

NSString *OrgApacheCommonsIoFileUtils_decodeUrlWithNSString_(NSString *url) {
  OrgApacheCommonsIoFileUtils_initialize();
  NSString *decoded = url;
  if (url != nil && [url java_indexOf:'%'] >= 0) {
    jint n = [url java_length];
    JavaLangStringBuffer *buffer = create_JavaLangStringBuffer_init();
    JavaNioByteBuffer *bytes = JavaNioByteBuffer_allocateWithInt_(n);
    for (jint i = 0; i < n; ) {
      if ([url charAtWithInt:i] == '%') {
        @try {
          do {
            jbyte octet = (jbyte) JavaLangInteger_parseIntWithNSString_withInt_([url java_substring:i + 1 endIndex:i + 3], 16);
            [((JavaNioByteBuffer *) nil_chk(bytes)) putWithByte:octet];
            i += 3;
          }
          while (i < n && [url charAtWithInt:i] == '%');
          continue;
        }
        @catch (JavaLangRuntimeException *e) {
        }
        @finally {
          if ([((JavaNioByteBuffer *) nil_chk(bytes)) position] > 0) {
            [bytes flip];
            [buffer appendWithNSString:[((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharset *) nil_chk(OrgApacheCommonsIoFileUtils_UTF8)) decodeWithJavaNioByteBuffer:bytes])) description]];
            [bytes clear];
          }
        }
      }
      [buffer appendWithChar:[url charAtWithInt:i++]];
    }
    decoded = [buffer description];
  }
  return decoded;
}

IOSObjectArray *OrgApacheCommonsIoFileUtils_toFilesWithJavaNetURLArray_(IOSObjectArray *urls) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (urls == nil || urls->size_ == 0) {
    return OrgApacheCommonsIoFileUtils_EMPTY_FILE_ARRAY;
  }
  IOSObjectArray *files = [IOSObjectArray arrayWithLength:urls->size_ type:JavaIoFile_class_()];
  for (jint i = 0; i < urls->size_; i++) {
    JavaNetURL *url = IOSObjectArray_Get(urls, i);
    if (url != nil) {
      if ([((NSString *) nil_chk([url getProtocol])) isEqual:@"file"] == false) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"URL could not be converted to a File: ", url));
      }
      IOSObjectArray_Set(files, i, OrgApacheCommonsIoFileUtils_toFileWithJavaNetURL_(url));
    }
  }
  return files;
}

IOSObjectArray *OrgApacheCommonsIoFileUtils_toURLsWithJavaIoFileArray_(IOSObjectArray *files) {
  OrgApacheCommonsIoFileUtils_initialize();
  IOSObjectArray *urls = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(files))->size_ type:JavaNetURL_class_()];
  for (jint i = 0; i < urls->size_; i++) {
    IOSObjectArray_Set(urls, i, [((JavaNetURI *) nil_chk([((JavaIoFile *) nil_chk(IOSObjectArray_Get(files, i))) toURI])) toURL]);
  }
  return urls;
}

void OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destDir, true);
}

void OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destDir, jboolean preserveFileDate) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if ([destDir exists] && [destDir isDirectory] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' is not a directory"));
  }
  JavaIoFile *destFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [((JavaIoFile *) nil_chk(srcFile)) getName]);
  OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destFile, preserveFileDate);
}

void OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destFile, true);
}

void OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destFile, jboolean preserveFileDate) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcFile == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destFile == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if ([srcFile exists] == false) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"Source '", srcFile, @"' does not exist"));
  }
  if ([srcFile isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Source '", srcFile, @"' exists but is a directory"));
  }
  if ([((NSString *) nil_chk([srcFile getCanonicalPath])) isEqual:[destFile getCanonicalPath]]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@$", @"Source '", srcFile, @"' and destination '", destFile, @"' are the same"));
  }
  JavaIoFile *parentFile = [destFile getParentFile];
  if (parentFile != nil) {
    if (![parentFile mkdirs] && ![parentFile isDirectory]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", parentFile, @"' directory cannot be created"));
    }
  }
  if ([destFile exists] && [destFile canWrite] == false) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destFile, @"' exists but is read-only"));
  }
  OrgApacheCommonsIoFileUtils_doCopyFileWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, destFile, preserveFileDate);
}

jlong OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoOutputStream_(JavaIoFile *input, JavaIoOutputStream *output) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoFileInputStream *fis = create_JavaIoFileInputStream_initWithJavaIoFile_(input);
  @try {
    return OrgApacheCommonsIoIOUtils_copyLargeWithJavaIoInputStream_withJavaIoOutputStream_(fis, output);
  }
  @finally {
    [fis close];
  }
}

void OrgApacheCommonsIoFileUtils_doCopyFileWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destFile, jboolean preserveFileDate) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(destFile)) exists] && [destFile isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destFile, @"' exists but is a directory"));
  }
  JavaIoFileInputStream *fis = nil;
  JavaIoFileOutputStream *fos = nil;
  JavaNioChannelsFileChannel *input = nil;
  JavaNioChannelsFileChannel *output = nil;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(srcFile);
    fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(destFile);
    input = [fis getChannel];
    output = [fos getChannel];
    jlong size = [((JavaNioChannelsFileChannel *) nil_chk(input)) size];
    jlong pos = 0;
    jlong count = 0;
    while (pos < size) {
      count = size - pos > OrgApacheCommonsIoFileUtils_FILE_COPY_BUFFER_SIZE ? OrgApacheCommonsIoFileUtils_FILE_COPY_BUFFER_SIZE : size - pos;
      pos += [((JavaNioChannelsFileChannel *) nil_chk(output)) transferFromWithJavaNioChannelsReadableByteChannel:input withLong:pos withLong:count];
    }
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoCloseable_(output);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(fos);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoCloseable_(input);
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(fis);
  }
  if ([((JavaIoFile *) nil_chk(srcFile)) length] != [destFile length]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@C", @"Failed to copy full contents from '", srcFile, @"' to '", destFile, '\''));
  }
  if (preserveFileDate) {
    [destFile setLastModifiedWithLong:[srcFile lastModified]];
  }
}

void OrgApacheCommonsIoFileUtils_copyDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if ([srcDir exists] && [srcDir isDirectory] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Source '", destDir, @"' is not a directory"));
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if ([destDir exists] && [destDir isDirectory] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' is not a directory"));
  }
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcDir, create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [srcDir getName]), true);
}

void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(srcDir, destDir, true);
}

void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcDir, JavaIoFile *destDir, jboolean preserveFileDate) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(srcDir, destDir, nil, preserveFileDate);
}

void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(srcDir, destDir, filter, true);
}

void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter, jboolean preserveFileDate) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if ([srcDir exists] == false) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"Source '", srcDir, @"' does not exist"));
  }
  if ([srcDir isDirectory] == false) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Source '", srcDir, @"' exists but is not a directory"));
  }
  if ([((NSString *) nil_chk([srcDir getCanonicalPath])) isEqual:[destDir getCanonicalPath]]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@$", @"Source '", srcDir, @"' and destination '", destDir, @"' are the same"));
  }
  id<JavaUtilList> exclusionList = nil;
  if ([((NSString *) nil_chk([destDir getCanonicalPath])) java_hasPrefix:[srcDir getCanonicalPath]]) {
    IOSObjectArray *srcFiles = filter == nil ? [srcDir listFiles] : [srcDir listFilesWithJavaIoFileFilter:filter];
    if (srcFiles != nil && srcFiles->size_ > 0) {
      exclusionList = create_JavaUtilArrayList_initWithInt_(srcFiles->size_);
      {
        IOSObjectArray *a__ = srcFiles;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *srcFile = *b__++;
          JavaIoFile *copiedFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [((JavaIoFile *) nil_chk(srcFile)) getName]);
          [exclusionList addWithId:[copiedFile getCanonicalPath]];
        }
      }
    }
  }
  OrgApacheCommonsIoFileUtils_doCopyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_withJavaUtilList_(srcDir, destDir, filter, preserveFileDate, exclusionList);
}

void OrgApacheCommonsIoFileUtils_doCopyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_withJavaUtilList_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter, jboolean preserveFileDate, id<JavaUtilList> exclusionList) {
  OrgApacheCommonsIoFileUtils_initialize();
  IOSObjectArray *srcFiles = filter == nil ? [((JavaIoFile *) nil_chk(srcDir)) listFiles] : [((JavaIoFile *) nil_chk(srcDir)) listFilesWithJavaIoFileFilter:filter];
  if (srcFiles == nil) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed to list contents of ", srcDir));
  }
  if ([((JavaIoFile *) nil_chk(destDir)) exists]) {
    if ([destDir isDirectory] == false) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' exists but is not a directory"));
    }
  }
  else {
    if (![destDir mkdirs] && ![destDir isDirectory]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' directory cannot be created"));
    }
  }
  if ([destDir canWrite] == false) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' cannot be written to"));
  }
  {
    IOSObjectArray *a__ = srcFiles;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *srcFile = *b__++;
      JavaIoFile *dstFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [((JavaIoFile *) nil_chk(srcFile)) getName]);
      if (exclusionList == nil || ![exclusionList containsWithId:[srcFile getCanonicalPath]]) {
        if ([srcFile isDirectory]) {
          OrgApacheCommonsIoFileUtils_doCopyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_withJavaUtilList_(srcFile, dstFile, filter, preserveFileDate, exclusionList);
        }
        else {
          OrgApacheCommonsIoFileUtils_doCopyFileWithJavaIoFile_withJavaIoFile_withBoolean_(srcFile, dstFile, preserveFileDate);
        }
      }
    }
  }
  if (preserveFileDate) {
    [destDir setLastModifiedWithLong:[srcDir lastModified]];
  }
}

void OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_(JavaNetURL *source, JavaIoFile *destination) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoInputStream *input = [((JavaNetURL *) nil_chk(source)) openStream];
  OrgApacheCommonsIoFileUtils_copyInputStreamToFileWithJavaIoInputStream_withJavaIoFile_(input, destination);
}

void OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_withInt_withInt_(JavaNetURL *source, JavaIoFile *destination, jint connectionTimeout, jint readTimeout) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaNetURLConnection *connection = [((JavaNetURL *) nil_chk(source)) openConnection];
  [((JavaNetURLConnection *) nil_chk(connection)) setConnectTimeoutWithInt:connectionTimeout];
  [connection setReadTimeoutWithInt:readTimeout];
  JavaIoInputStream *input = [connection getInputStream];
  OrgApacheCommonsIoFileUtils_copyInputStreamToFileWithJavaIoInputStream_withJavaIoFile_(input, destination);
}

void OrgApacheCommonsIoFileUtils_copyInputStreamToFileWithJavaIoInputStream_withJavaIoFile_(JavaIoInputStream *source, JavaIoFile *destination) {
  OrgApacheCommonsIoFileUtils_initialize();
  @try {
    JavaIoFileOutputStream *output = OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_(destination);
    @try {
      OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoOutputStream_(source, output);
      [((JavaIoFileOutputStream *) nil_chk(output)) close];
    }
    @finally {
      OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(output);
    }
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(source);
  }
}

void OrgApacheCommonsIoFileUtils_deleteDirectoryWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) exists]) {
    return;
  }
  if (!OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(directory)) {
    OrgApacheCommonsIoFileUtils_cleanDirectoryWithJavaIoFile_(directory);
  }
  if (![directory delete__]) {
    NSString *message = JreStrcat("$@C", @"Unable to delete directory ", directory, '.');
    @throw create_JavaIoIOException_initWithNSString_(message);
  }
}

jboolean OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (file == nil) {
    return false;
  }
  @try {
    if ([file isDirectory]) {
      OrgApacheCommonsIoFileUtils_cleanDirectoryWithJavaIoFile_(file);
    }
  }
  @catch (JavaLangException *ignored) {
  }
  @try {
    return [file delete__];
  }
  @catch (JavaLangException *ignored) {
    return false;
  }
}

jboolean OrgApacheCommonsIoFileUtils_directoryContainsWithJavaIoFile_withJavaIoFile_(JavaIoFile *directory, JavaIoFile *child) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (directory == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Directory must not be null");
  }
  if (![directory isDirectory]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Not a directory: ", directory));
  }
  if (child == nil) {
    return false;
  }
  if (![directory exists] || ![child exists]) {
    return false;
  }
  NSString *canonicalParent = [directory getCanonicalPath];
  NSString *canonicalChild = [child getCanonicalPath];
  return OrgApacheCommonsIoFilenameUtils_directoryContainsWithNSString_withNSString_(canonicalParent, canonicalChild);
}

void OrgApacheCommonsIoFileUtils_cleanDirectoryWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) exists]) {
    NSString *message = JreStrcat("@$", directory, @" does not exist");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  if (![directory isDirectory]) {
    NSString *message = JreStrcat("@$", directory, @" is not a directory");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  IOSObjectArray *files = [directory listFiles];
  if (files == nil) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed to list contents of ", directory));
  }
  JavaIoIOException *exception = nil;
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      @try {
        OrgApacheCommonsIoFileUtils_forceDeleteWithJavaIoFile_(file);
      }
      @catch (JavaIoIOException *ioe) {
        exception = ioe;
      }
    }
  }
  if (nil != exception) {
    @throw exception;
  }
}

jboolean OrgApacheCommonsIoFileUtils_waitForWithJavaIoFile_withInt_(JavaIoFile *file, jint seconds) {
  OrgApacheCommonsIoFileUtils_initialize();
  jint timeout = 0;
  jint tick = 0;
  while (![((JavaIoFile *) nil_chk(file)) exists]) {
    if (tick++ >= 10) {
      tick = 0;
      if (timeout++ > seconds) {
        return false;
      }
    }
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *ignore) {
    }
    @catch (JavaLangException *ex) {
      break;
    }
  }
  return true;
}

NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoInputStream *in = nil;
  @try {
    in = OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(file);
    return OrgApacheCommonsIoIOUtils_toStringWithJavaIoInputStream_withJavaNioCharsetCharset_(in, OrgApacheCommonsIoCharsets_toCharsetWithJavaNioCharsetCharset_(encoding));
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
  }
}

NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withJavaNioCharsetCharset_(file, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding));
}

NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_defaultCharset());
}

IOSByteArray *OrgApacheCommonsIoFileUtils_readFileToByteArrayWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoInputStream *in = nil;
  @try {
    in = OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(file);
    return OrgApacheCommonsIoIOUtils_toByteArrayWithJavaIoInputStream_withLong_(in, [((JavaIoFile *) nil_chk(file)) length]);
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
  }
}

id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoInputStream *in = nil;
  @try {
    in = OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(file);
    return OrgApacheCommonsIoIOUtils_readLinesWithJavaIoInputStream_withJavaNioCharsetCharset_(in, OrgApacheCommonsIoCharsets_toCharsetWithJavaNioCharsetCharset_(encoding));
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
  }
}

id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withJavaNioCharsetCharset_(file, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding));
}

id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_defaultCharset());
}

OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoInputStream *in = nil;
  @try {
    in = OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(file);
    return OrgApacheCommonsIoIOUtils_lineIteratorWithJavaIoInputStream_withNSString_(in, encoding);
  }
  @catch (JavaIoIOException *ex) {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
    @throw ex;
  }
  @catch (JavaLangRuntimeException *ex) {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
    @throw ex;
  }
}

OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  return OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_withNSString_(file, nil);
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_(JavaIoFile *file, NSString *data, JavaNioCharsetCharset *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, data, encoding, false);
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_(JavaIoFile *file, NSString *data, NSString *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_withBoolean_(file, data, encoding, false);
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, NSString *data, JavaNioCharsetCharset *encoding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoOutputStream *out = nil;
  @try {
    out = OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(file, append);
    OrgApacheCommonsIoIOUtils_writeWithNSString_withJavaIoOutputStream_withJavaNioCharsetCharset_(data, out, encoding);
    [((JavaIoOutputStream *) nil_chk(out)) close];
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(out);
  }
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_withBoolean_(JavaIoFile *file, NSString *data, NSString *encoding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, data, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding), append);
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *data) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, data, JavaNioCharsetCharset_defaultCharset(), false);
}

void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *data, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, data, JavaNioCharsetCharset_defaultCharset(), append);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_(JavaIoFile *file, id<JavaLangCharSequence> data) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(file, data, JavaNioCharsetCharset_defaultCharset(), false);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(file, data, JavaNioCharsetCharset_defaultCharset(), append);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_(JavaIoFile *file, id<JavaLangCharSequence> data, JavaNioCharsetCharset *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(file, data, encoding, false);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_(JavaIoFile *file, id<JavaLangCharSequence> data, NSString *encoding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_withBoolean_(file, data, encoding, false);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, JavaNioCharsetCharset *encoding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  NSString *str = data == nil ? nil : [data description];
  OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(file, str, encoding, append);
}

void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, NSString *encoding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(file, data, OrgApacheCommonsIoCharsets_toCharsetWithNSString_(encoding), append);
}

void OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_(JavaIoFile *file, IOSByteArray *data) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_withBoolean_(file, data, false);
}

void OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_withBoolean_(JavaIoFile *file, IOSByteArray *data, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoOutputStream *out = nil;
  @try {
    out = OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(file, append);
    [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:data];
    [out close];
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(out);
  }
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, encoding, lines, nil, false);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withBoolean_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, encoding, lines, nil, append);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_(JavaIoFile *file, id<JavaUtilCollection> lines) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, nil, lines, nil, false);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withBoolean_(JavaIoFile *file, id<JavaUtilCollection> lines, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, nil, lines, nil, append);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, NSString *lineEnding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, encoding, lines, lineEnding, false);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, NSString *lineEnding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaIoFileOutputStream *out = nil;
  @try {
    out = OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(file, append);
    JavaIoBufferedOutputStream *buffer = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(out);
    OrgApacheCommonsIoIOUtils_writeLinesWithJavaUtilCollection_withNSString_withJavaIoOutputStream_withNSString_(lines, lineEnding, buffer, encoding);
    [buffer flush];
    [((JavaIoFileOutputStream *) nil_chk(out)) close];
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoOutputStream_(out);
  }
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_(JavaIoFile *file, id<JavaUtilCollection> lines, NSString *lineEnding) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, nil, lines, lineEnding, false);
}

void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_withBoolean_(JavaIoFile *file, id<JavaUtilCollection> lines, NSString *lineEnding, jboolean append) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(file, nil, lines, lineEnding, append);
}

void OrgApacheCommonsIoFileUtils_forceDeleteWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    OrgApacheCommonsIoFileUtils_deleteDirectoryWithJavaIoFile_(file);
  }
  else {
    jboolean filePresent = [file exists];
    if (![file delete__]) {
      if (!filePresent) {
        @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@", @"File does not exist: ", file));
      }
      NSString *message = JreStrcat("$@", @"Unable to delete file: ", file);
      @throw create_JavaIoIOException_initWithNSString_(message);
    }
  }
}

void OrgApacheCommonsIoFileUtils_forceDeleteOnExitWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    OrgApacheCommonsIoFileUtils_deleteDirectoryOnExitWithJavaIoFile_(file);
  }
  else {
    [file deleteOnExit];
  }
}

void OrgApacheCommonsIoFileUtils_deleteDirectoryOnExitWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) exists]) {
    return;
  }
  [directory deleteOnExit];
  if (!OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(directory)) {
    OrgApacheCommonsIoFileUtils_cleanDirectoryOnExitWithJavaIoFile_(directory);
  }
}

void OrgApacheCommonsIoFileUtils_cleanDirectoryOnExitWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) exists]) {
    NSString *message = JreStrcat("@$", directory, @" does not exist");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  if (![directory isDirectory]) {
    NSString *message = JreStrcat("@$", directory, @" is not a directory");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  IOSObjectArray *files = [directory listFiles];
  if (files == nil) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed to list contents of ", directory));
  }
  JavaIoIOException *exception = nil;
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      @try {
        OrgApacheCommonsIoFileUtils_forceDeleteOnExitWithJavaIoFile_(file);
      }
      @catch (JavaIoIOException *ioe) {
        exception = ioe;
      }
    }
  }
  if (nil != exception) {
    @throw exception;
  }
}

void OrgApacheCommonsIoFileUtils_forceMkdirWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(directory)) exists]) {
    if (![directory isDirectory]) {
      NSString *message = JreStrcat("$@$", @"File ", directory, @" exists and is not a directory. Unable to create directory.");
      @throw create_JavaIoIOException_initWithNSString_(message);
    }
  }
  else {
    if (![directory mkdirs]) {
      if (![directory isDirectory]) {
        NSString *message = JreStrcat("$@", @"Unable to create directory ", directory);
        @throw create_JavaIoIOException_initWithNSString_(message);
      }
    }
  }
}

jlong OrgApacheCommonsIoFileUtils_sizeOfWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(file)) exists]) {
    NSString *message = JreStrcat("@$", file, @" does not exist");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  if ([file isDirectory]) {
    return OrgApacheCommonsIoFileUtils_sizeOfDirectoryWithJavaIoFile_(file);
  }
  else {
    return [file length];
  }
}

JavaMathBigInteger *OrgApacheCommonsIoFileUtils_sizeOfAsBigIntegerWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(file)) exists]) {
    NSString *message = JreStrcat("@$", file, @" does not exist");
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  if ([file isDirectory]) {
    return OrgApacheCommonsIoFileUtils_sizeOfDirectoryAsBigIntegerWithJavaIoFile_(file);
  }
  else {
    return JavaMathBigInteger_valueOfWithLong_([file length]);
  }
}

jlong OrgApacheCommonsIoFileUtils_sizeOfDirectoryWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_checkDirectoryWithJavaIoFile_(directory);
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(directory)) listFiles];
  if (files == nil) {
    return 0LL;
  }
  jlong size = 0;
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      @try {
        if (!OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(file)) {
          size += OrgApacheCommonsIoFileUtils_sizeOfWithJavaIoFile_(file);
          if (size < 0) {
            break;
          }
        }
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return size;
}

JavaMathBigInteger *OrgApacheCommonsIoFileUtils_sizeOfDirectoryAsBigIntegerWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  OrgApacheCommonsIoFileUtils_checkDirectoryWithJavaIoFile_(directory);
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(directory)) listFiles];
  if (files == nil) {
    return JreLoadStatic(JavaMathBigInteger, ZERO);
  }
  JavaMathBigInteger *size = JreLoadStatic(JavaMathBigInteger, ZERO);
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      @try {
        if (!OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(file)) {
          size = [((JavaMathBigInteger *) nil_chk(size)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(OrgApacheCommonsIoFileUtils_sizeOfWithJavaIoFile_(file))];
        }
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return size;
}

void OrgApacheCommonsIoFileUtils_checkDirectoryWithJavaIoFile_(JavaIoFile *directory) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (![((JavaIoFile *) nil_chk(directory)) exists]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$", directory, @" does not exist"));
  }
  if (![directory isDirectory]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$", directory, @" is not a directory"));
  }
}

jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaIoFile_(JavaIoFile *file, JavaIoFile *reference) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (reference == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified reference file");
  }
  if (![reference exists]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"The reference file '", reference, @"' doesn't exist"));
  }
  return OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withLong_(file, [reference lastModified]);
}

jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaUtilDate_(JavaIoFile *file, JavaUtilDate *date) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (date == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified date");
  }
  return OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withLong_(file, [date getTime]);
}

jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withLong_(JavaIoFile *file, jlong timeMillis) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (file == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified file");
  }
  if (![file exists]) {
    return false;
  }
  return [file lastModified] > timeMillis;
}

jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaIoFile_(JavaIoFile *file, JavaIoFile *reference) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (reference == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified reference file");
  }
  if (![reference exists]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"The reference file '", reference, @"' doesn't exist"));
  }
  return OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withLong_(file, [reference lastModified]);
}

jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaUtilDate_(JavaIoFile *file, JavaUtilDate *date) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (date == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified date");
  }
  return OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withLong_(file, [date getTime]);
}

jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withLong_(JavaIoFile *file, jlong timeMillis) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (file == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No specified file");
  }
  if (![file exists]) {
    return false;
  }
  return [file lastModified] < timeMillis;
}

jlong OrgApacheCommonsIoFileUtils_checksumCRC32WithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  JavaUtilZipCRC32 *crc = create_JavaUtilZipCRC32_init();
  OrgApacheCommonsIoFileUtils_checksumWithJavaIoFile_withJavaUtilZipChecksum_(file, crc);
  return [crc getValue];
}

id<JavaUtilZipChecksum> OrgApacheCommonsIoFileUtils_checksumWithJavaIoFile_withJavaUtilZipChecksum_(JavaIoFile *file, id<JavaUtilZipChecksum> checksum) {
  OrgApacheCommonsIoFileUtils_initialize();
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Checksums can't be computed on directories");
  }
  JavaIoInputStream *in = nil;
  @try {
    in = create_JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(create_JavaIoFileInputStream_initWithJavaIoFile_(file), checksum);
    OrgApacheCommonsIoIOUtils_copy__WithJavaIoInputStream_withJavaIoOutputStream_(in, create_OrgApacheCommonsIoOutputNullOutputStream_init());
  }
  @finally {
    OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoInputStream_(in);
  }
  return checksum;
}

void OrgApacheCommonsIoFileUtils_moveDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if (![srcDir exists]) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"Source '", srcDir, @"' does not exist"));
  }
  if (![srcDir isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Source '", srcDir, @"' is not a directory"));
  }
  if ([destDir exists]) {
    @throw create_OrgApacheCommonsIoFileExistsException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' already exists"));
  }
  jboolean rename = [srcDir renameToWithJavaIoFile:destDir];
  if (!rename) {
    if ([((NSString *) nil_chk([destDir getCanonicalPath])) java_hasPrefix:[srcDir getCanonicalPath]]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@", @"Cannot move directory: ", srcDir, @" to a subdirectory of itself: ", destDir));
    }
    OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_(srcDir, destDir);
    OrgApacheCommonsIoFileUtils_deleteDirectoryWithJavaIoFile_(srcDir);
    if ([srcDir exists]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@C", @"Failed to delete original directory '", srcDir, @"' after copy to '", destDir, '\''));
    }
  }
}

void OrgApacheCommonsIoFileUtils_moveDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *src, JavaIoFile *destDir, jboolean createDestDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (src == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination directory must not be null");
  }
  if (![destDir exists] && createDestDir) {
    [destDir mkdirs];
  }
  if (![destDir exists]) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$ZC", @"Destination directory '", destDir, @"' does not exist [createDestDir=", createDestDir, ']'));
  }
  if (![destDir isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' is not a directory"));
  }
  OrgApacheCommonsIoFileUtils_moveDirectoryWithJavaIoFile_withJavaIoFile_(src, create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [src getName]));
}

void OrgApacheCommonsIoFileUtils_moveFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcFile == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destFile == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if (![srcFile exists]) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"Source '", srcFile, @"' does not exist"));
  }
  if ([srcFile isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Source '", srcFile, @"' is a directory"));
  }
  if ([destFile exists]) {
    @throw create_OrgApacheCommonsIoFileExistsException_initWithNSString_(JreStrcat("$@$", @"Destination '", destFile, @"' already exists"));
  }
  if ([destFile isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destFile, @"' is a directory"));
  }
  jboolean rename = [srcFile renameToWithJavaIoFile:destFile];
  if (!rename) {
    OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(srcFile, destFile);
    if (![srcFile delete__]) {
      OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(destFile);
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@C", @"Failed to delete original file '", srcFile, @"' after copy to '", destFile, '\''));
    }
  }
}

void OrgApacheCommonsIoFileUtils_moveFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destDir, jboolean createDestDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (srcFile == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination directory must not be null");
  }
  if (![destDir exists] && createDestDir) {
    [destDir mkdirs];
  }
  if (![destDir exists]) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$ZC", @"Destination directory '", destDir, @"' does not exist [createDestDir=", createDestDir, ']'));
  }
  if (![destDir isDirectory]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"Destination '", destDir, @"' is not a directory"));
  }
  OrgApacheCommonsIoFileUtils_moveFileWithJavaIoFile_withJavaIoFile_(srcFile, create_JavaIoFile_initWithJavaIoFile_withNSString_(destDir, [srcFile getName]));
}

void OrgApacheCommonsIoFileUtils_moveToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *src, JavaIoFile *destDir, jboolean createDestDir) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (src == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Source must not be null");
  }
  if (destDir == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Destination must not be null");
  }
  if (![src exists]) {
    @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$@$", @"Source '", src, @"' does not exist"));
  }
  if ([src isDirectory]) {
    OrgApacheCommonsIoFileUtils_moveDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(src, destDir, createDestDir);
  }
  else {
    OrgApacheCommonsIoFileUtils_moveFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(src, destDir, createDestDir);
  }
}

jboolean OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(JavaIoFile *file) {
  OrgApacheCommonsIoFileUtils_initialize();
  if (file == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"File must not be null");
  }
  if (OrgApacheCommonsIoFilenameUtils_isSystemWindows()) {
    return false;
  }
  JavaIoFile *fileInCanonicalDir = nil;
  if ([file getParent] == nil) {
    fileInCanonicalDir = file;
  }
  else {
    JavaIoFile *canonicalDir = [((JavaIoFile *) nil_chk([file getParentFile])) getCanonicalFile];
    fileInCanonicalDir = create_JavaIoFile_initWithJavaIoFile_withNSString_(canonicalDir, [file getName]);
  }
  if ([((JavaIoFile *) nil_chk([fileInCanonicalDir getCanonicalFile])) isEqual:[fileInCanonicalDir getAbsoluteFile]]) {
    return false;
  }
  else {
    return true;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFileUtils)
