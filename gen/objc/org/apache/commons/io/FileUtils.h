//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FileUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFileUtils")
#ifdef RESTRICT_OrgApacheCommonsIoFileUtils
#define INCLUDE_ALL_OrgApacheCommonsIoFileUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFileUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFileUtils

#if !defined (OrgApacheCommonsIoFileUtils_) && (INCLUDE_ALL_OrgApacheCommonsIoFileUtils || defined(INCLUDE_OrgApacheCommonsIoFileUtils))
#define OrgApacheCommonsIoFileUtils_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoFileInputStream;
@class JavaIoFileOutputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaMathBigInteger;
@class JavaNetURL;
@class JavaNioCharsetCharset;
@class JavaUtilDate;
@class OrgApacheCommonsIoLineIterator;
@protocol JavaIoFileFilter;
@protocol JavaLangCharSequence;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilZipChecksum;
@protocol OrgApacheCommonsIoFilefilterIOFileFilter;

/*!
 @brief General file manipulation utilities.
 <p>
  Facilities are provided in the following areas: 
 <ul>
  <li>writing to a file 
 <li>reading from a file 
 <li>make a directory including parent directories 
 <li>copying files and directories 
 <li>deleting files and directories 
 <li>converting to and from a URL 
 <li>listing files and directories by filter and extension 
 <li>comparing file content 
 <li>file last changed date 
 <li>calculating a checksum 
 </ul>
  <p>
  Origin of code: Excalibur, Alexandria, Commons-Utils
 @version $Id$
 */
@interface OrgApacheCommonsIoFileUtils : NSObject

#pragma mark Public

/*!
 @brief Instances should NOT be constructed in standard programming.
 */
- (instancetype)init;

/*!
 @brief Returns a human-readable version of the file size, where the input represents a specific number of bytes.
 <p>
  If the size is over 1GB, the size is returned as the number of whole GB, i.e. the size is rounded down to the
  nearest GB boundary. 
 </p>
  <p>
  Similarly for the 1MB and 1KB boundaries. 
 </p>
 @param size the number of bytes
 @return a human-readable display value (includes units - EB, PB, TB, GB, MB, KB or bytes)
 - seealso: <a href="https://issues.apache.org/jira/browse/IO-226">IO-226 - should the rounding be changed?</a>
 @since 2.4
 */
+ (NSString *)byteCountToDisplaySizeWithJavaMathBigInteger:(JavaMathBigInteger *)size;

/*!
 @brief Returns a human-readable version of the file size, where the input represents a specific number of bytes.
 <p>
  If the size is over 1GB, the size is returned as the number of whole GB, i.e. the size is rounded down to the
  nearest GB boundary. 
 </p>
  <p>
  Similarly for the 1MB and 1KB boundaries. 
 </p>
 @param size the number of bytes
 @return a human-readable display value (includes units - EB, PB, TB, GB, MB, KB or bytes)
 - seealso: <a href="https://issues.apache.org/jira/browse/IO-226">IO-226 - should the rounding be changed?</a>
 */
+ (NSString *)byteCountToDisplaySizeWithLong:(jlong)size;

/*!
 @brief Computes the checksum of a file using the specified checksum object.
 Multiple files may be checked using one <code>Checksum</code> instance
  if desired simply by reusing the same checksum object.
  For example: 
 @code

    long csum = FileUtils.checksum(file, new CRC32()).getValue(); 
  
@endcode
 @param file the file to checksum, must not be <code>null</code>
 @param checksum the checksum object to be used, must not be <code>null</code>
 @return the checksum specified, updated with the content of the file
 @throw NullPointerExceptionif the file or checksum is <code>null</code>
 @throw IllegalArgumentExceptionif the file is a directory
 @throw IOExceptionif an IO error occurs reading the file
 @since 1.3
 */
+ (id<JavaUtilZipChecksum>)checksumWithJavaIoFile:(JavaIoFile *)file
                          withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)checksum;

/*!
 @brief Computes the checksum of a file using the CRC32 checksum routine.
 The value of the checksum is returned.
 @param file the file to checksum, must not be <code>null</code>
 @return the checksum value
 @throw NullPointerExceptionif the file or checksum is <code>null</code>
 @throw IllegalArgumentExceptionif the file is a directory
 @throw IOExceptionif an IO error occurs reading the file
 @since 1.3
 */
+ (jlong)checksumCRC32WithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Cleans a directory without deleting it.
 @param directory directory to clean
 @throw IOExceptionin case cleaning is unsuccessful
 */
+ (void)cleanDirectoryWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Compares the contents of two files to determine if they are equal or not.
 <p>
  This method checks to see if the two files are different lengths
  or if they point to the same file, before resorting to byte-by-byte
  comparison of the contents. 
 <p>
  Code origin: Avalon
 @param file1 the first file
 @param file2 the second file
 @return true if the content of the files are equal or they both don't
  exist, false otherwise
 @throw IOExceptionin case of an I/O error
 */
+ (jboolean)contentEqualsWithJavaIoFile:(JavaIoFile *)file1
                         withJavaIoFile:(JavaIoFile *)file2;

/*!
 @brief Compares the contents of two files to determine if they are equal or not.
 <p>
  This method checks to see if the two files point to the same file, 
  before resorting to line-by-line comparison of the contents. 
 <p>
 @param file1 the first file
 @param file2 the second file
 @param charsetName the character encoding to be used.          May be null, in which case the platform default is used
 @return true if the content of the files are equal or neither exists,
          false otherwise
 @throw IOExceptionin case of an I/O error
 @since 2.2
 - seealso: IOUtils#contentEqualsIgnoreEOL(Reader, Reader)
 */
+ (jboolean)contentEqualsIgnoreEOLWithJavaIoFile:(JavaIoFile *)file1
                                  withJavaIoFile:(JavaIoFile *)file2
                                    withNSString:(NSString *)charsetName;

/*!
 @brief Converts a Collection containing java.io.File instanced into array
  representation.This is to account for the difference between
  File.listFiles() and FileUtils.listFiles().
 @param files a Collection containing java.io.File instances
 @return an array of java.io.File
 */
+ (IOSObjectArray *)convertFileCollectionToFileArrayWithJavaUtilCollection:(id<JavaUtilCollection>)files;

/*!
 @brief Copies a whole directory to a new location preserving the file dates.
 <p>
  This method copies the specified directory and all its child
  directories and files to the specified destination.
  The destination is the new location and name of the directory. 
 <p>
  The destination directory is created if it does not exist.
  If the destination directory did exist, then this method merges
  the source with the destination, with the source taking precedence. 
 <p>
  <strong>Note:</strong> This method tries to preserve the files' last
  modified date/times using <code>File.setLastModified(long)</code>, however
  it is not guaranteed that those operations will succeed.
  If the modification operation fails, no indication is provided.
 @param srcDir an existing directory to copy, must not be <code>null</code>
 @param destDir the new directory, must not be <code>null</code>
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 @since 1.1
 */
+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a whole directory to a new location.
 <p>
  This method copies the contents of the specified source directory
  to within the specified destination directory. 
 <p>
  The destination directory is created if it does not exist.
  If the destination directory did exist, then this method merges
  the source with the destination, with the source taking precedence. 
 <p>
  <strong>Note:</strong> Setting <code>preserveFileDate</code> to 
 <code>true</code> tries to preserve the files' last modified
  date/times using <code>File.setLastModified(long)</code>, however it is
  not guaranteed that those operations will succeed.
  If the modification operation fails, no indication is provided.
 @param srcDir an existing directory to copy, must not be <code>null</code>
 @param destDir the new directory, must not be <code>null</code>
 @param preserveFileDate true if the file date of the copy   should be the same as the original
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 @since 1.1
 */
+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
                        withBoolean:(jboolean)preserveFileDate OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a filtered directory to a new location preserving the file dates.
 <p>
  This method copies the contents of the specified source directory
  to within the specified destination directory. 
 <p>
  The destination directory is created if it does not exist.
  If the destination directory did exist, then this method merges
  the source with the destination, with the source taking precedence. 
 <p>
  <strong>Note:</strong> This method tries to preserve the files' last
  modified date/times using <code>File.setLastModified(long)</code>, however
  it is not guaranteed that those operations will succeed.
  If the modification operation fails, no indication is provided. 
 <h4>Example: Copy directories only</h4> 
   @code

   // only copy the directory structure
   FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);  
  
@endcode
  
 <h4>Example: Copy directories and txt files</h4>
   @code

   // Create a filter for ".txt" files
   IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
   IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);
   // Create a filter for either directories or ".txt" files
   FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);
   // Copy using the filter
   FileUtils.copyDirectory(srcDir, destDir, filter);  
  
@endcode
 @param srcDir an existing directory to copy, must not be <code>null</code>
 @param destDir the new directory, must not be <code>null</code>
 @param filter the filter to apply, null means copy all directories and files   should be the same as the original
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 @since 1.4
 */
+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
               withJavaIoFileFilter:(id<JavaIoFileFilter>)filter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a filtered directory to a new location.
 <p>
  This method copies the contents of the specified source directory
  to within the specified destination directory. 
 <p>
  The destination directory is created if it does not exist.
  If the destination directory did exist, then this method merges
  the source with the destination, with the source taking precedence. 
 <p>
  <strong>Note:</strong> Setting <code>preserveFileDate</code> to 
 <code>true</code> tries to preserve the files' last modified
  date/times using <code>File.setLastModified(long)</code>, however it is
  not guaranteed that those operations will succeed.
  If the modification operation fails, no indication is provided. 
 <h4>Example: Copy directories only</h4> 
   @code

   // only copy the directory structure
   FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY, false);  
  
@endcode
  
 <h4>Example: Copy directories and txt files</h4>
   @code

   // Create a filter for ".txt" files
   IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
   IOFileFilter txtFiles = FileFilterUtils.andFileFilter(FileFileFilter.FILE, txtSuffixFilter);
   // Create a filter for either directories or ".txt" files
   FileFilter filter = FileFilterUtils.orFileFilter(DirectoryFileFilter.DIRECTORY, txtFiles);
   // Copy using the filter
   FileUtils.copyDirectory(srcDir, destDir, filter, false);  
  
@endcode
 @param srcDir an existing directory to copy, must not be <code>null</code>
 @param destDir the new directory, must not be <code>null</code>
 @param filter the filter to apply, null means copy all directories and files
 @param preserveFileDate true if the file date of the copy   should be the same as the original
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 @since 1.4
 */
+ (void)copyDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir
               withJavaIoFileFilter:(id<JavaIoFileFilter>)filter
                        withBoolean:(jboolean)preserveFileDate OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a directory to within another directory preserving the file dates.
 <p>
  This method copies the source directory and all its contents to a
  directory of the same name in the specified destination directory. 
 <p>
  The destination directory is created if it does not exist.
  If the destination directory did exist, then this method merges
  the source with the destination, with the source taking precedence. 
 <p>
  <strong>Note:</strong> This method tries to preserve the files' last
  modified date/times using <code>File.setLastModified(long)</code>, however
  it is not guaranteed that those operations will succeed.
  If the modification operation fails, no indication is provided.
 @param srcDir an existing directory to copy, must not be <code>null</code>
 @param destDir the directory to place the copy in, must not be <code>null</code>
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 @since 1.2
 */
+ (void)copyDirectoryToDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                                withJavaIoFile:(JavaIoFile *)destDir OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a file to a new location preserving the file date.
 <p>
  This method copies the contents of the specified source file to the
  specified destination file. The directory holding the destination file is
  created if it does not exist. If the destination file exists, then this
  method will overwrite it. 
 <p>
  <strong>Note:</strong> This method tries to preserve the file's last
  modified date/times using <code>File.setLastModified(long)</code>, however
  it is not guaranteed that the operation will succeed.
  If the modification operation fails, no indication is provided.
 @param srcFile an existing file to copy, must not be <code>null</code>
 @param destFile the new file, must not be <code>null</code>
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 - seealso: #copyFileToDirectory(File, File)
 */
+ (void)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a file to a new location.
 <p>
  This method copies the contents of the specified source file
  to the specified destination file.
  The directory holding the destination file is created if it does not exist.
  If the destination file exists, then this method will overwrite it. 
 <p>
  <strong>Note:</strong> Setting <code>preserveFileDate</code> to 
 <code>true</code> tries to preserve the file's last modified
  date/times using <code>File.setLastModified(long)</code>, however it is
  not guaranteed that the operation will succeed.
  If the modification operation fails, no indication is provided.
 @param srcFile an existing file to copy, must not be <code>null</code>
 @param destFile the new file, must not be <code>null</code>
 @param preserveFileDate true if the file date of the copy   should be the same as the original
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 - seealso: #copyFileToDirectory(File, File, boolean)
 */
+ (void)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile
                   withBoolean:(jboolean)preserveFileDate OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from a <code>File</code> to an <code>OutputStream</code>.
 <p>
  This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.
  </p>
 @param input the 
  <code> File </code>  to read from
 @param output the 
  <code> OutputStream </code>  to write to
 @return the number of bytes copied
 @throw NullPointerException
 if the input or output is null
 @throw IOException
 if an I/O error occurs
 @since 2.1
 */
+ (jlong)copyFileWithJavaIoFile:(JavaIoFile *)input
         withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a file to a directory preserving the file date.
 <p>
  This method copies the contents of the specified source file
  to a file of the same name in the specified destination directory.
  The destination directory is created if it does not exist.
  If the destination file exists, then this method will overwrite it. 
 <p>
  <strong>Note:</strong> This method tries to preserve the file's last
  modified date/times using <code>File.setLastModified(long)</code>, however
  it is not guaranteed that the operation will succeed.
  If the modification operation fails, no indication is provided.
 @param srcFile an existing file to copy, must not be <code>null</code>
 @param destDir the directory to place the copy in, must not be <code>null</code>
 @throw NullPointerExceptionif source or destination is null
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 - seealso: #copyFile(File, File, boolean)
 */
+ (void)copyFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies a file to a directory optionally preserving the file date.
 <p>
  This method copies the contents of the specified source file
  to a file of the same name in the specified destination directory.
  The destination directory is created if it does not exist.
  If the destination file exists, then this method will overwrite it. 
 <p>
  <strong>Note:</strong> Setting <code>preserveFileDate</code> to 
 <code>true</code> tries to preserve the file's last modified
  date/times using <code>File.setLastModified(long)</code>, however it is
  not guaranteed that the operation will succeed.
  If the modification operation fails, no indication is provided.
 @param srcFile an existing file to copy, must not be <code>null</code>
 @param destDir the directory to place the copy in, must not be <code>null</code>
 @param preserveFileDate true if the file date of the copy   should be the same as the original
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs during copying
 - seealso: #copyFile(File, File, boolean)
 @since 1.3
 */
+ (void)copyFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir
                              withBoolean:(jboolean)preserveFileDate OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies bytes from an <code>InputStream</code> <code>source</code> to a file 
 <code>destination</code>.The directories up to <code>destination</code>
  will be created if they don't already exist.
 <code>destination</code>
  will be overwritten if it already exists.
 @param source the  <code> InputStream </code>  to copy bytes from, must not be <code>null</code>
 @param destination the non-directory  <code> File </code>  to write bytes to
    (possibly overwriting), must not be <code>null</code>
 @throw IOExceptionif <code>destination</code> is a directory
 @throw IOExceptionif <code>destination</code> cannot be written
 @throw IOExceptionif <code>destination</code> needs creating but can't be
 @throw IOExceptionif an IO error occurs during copying
 @since 2.0
 */
+ (void)copyInputStreamToFileWithJavaIoInputStream:(JavaIoInputStream *)source
                                    withJavaIoFile:(JavaIoFile *)destination OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies bytes from the URL <code>source</code> to a file 
 <code>destination</code>.The directories up to <code>destination</code>
  will be created if they don't already exist.
 <code>destination</code>
  will be overwritten if it already exists. 
 <p>
  Warning: this method does not set a connection or read timeout and thus
  might block forever. Use <code>File, int, int)</code>
  with reasonable timeouts to prevent this.
 @param source the  <code> URL </code>  to copy bytes from, must not be <code>null</code>
 @param destination the non-directory  <code> File </code>  to write bytes to
    (possibly overwriting), must not be <code>null</code>
 @throw IOExceptionif <code>source</code> URL cannot be opened
 @throw IOExceptionif <code>destination</code> is a directory
 @throw IOExceptionif <code>destination</code> cannot be written
 @throw IOExceptionif <code>destination</code> needs creating but can't be
 @throw IOExceptionif an IO error occurs during copying
 */
+ (void)copyURLToFileWithJavaNetURL:(JavaNetURL *)source
                     withJavaIoFile:(JavaIoFile *)destination OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies bytes from the URL <code>source</code> to a file 
 <code>destination</code>.The directories up to <code>destination</code>
  will be created if they don't already exist.
 <code>destination</code>
  will be overwritten if it already exists.
 @param source the  <code> URL </code>  to copy bytes from, must not be <code>null</code>
 @param destination the non-directory  <code> File </code>  to write bytes to
    (possibly overwriting), must not be <code>null</code>
 @param connectionTimeout the number of milliseconds until this method   will timeout if no connection could be established to the 
  <code> source </code>
 @param readTimeout the number of milliseconds until this method will   timeout if no data could be read from the 
  <code> source </code>
 @throw IOExceptionif <code>source</code> URL cannot be opened
 @throw IOExceptionif <code>destination</code> is a directory
 @throw IOExceptionif <code>destination</code> cannot be written
 @throw IOExceptionif <code>destination</code> needs creating but can't be
 @throw IOExceptionif an IO error occurs during copying
 @since 2.0
 */
+ (void)copyURLToFileWithJavaNetURL:(JavaNetURL *)source
                     withJavaIoFile:(JavaIoFile *)destination
                            withInt:(jint)connectionTimeout
                            withInt:(jint)readTimeout OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Deletes a directory recursively.
 @param directory directory to delete
 @throw IOExceptionin case deletion is unsuccessful
 */
+ (void)deleteDirectoryWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Deletes a file, never throwing an exception.If file is a directory, delete it and all sub-directories.
 <p>
  The difference between File.delete() and this method are: 
 <ul>
  <li>A directory to be deleted does not have to be empty.</li>
  <li>No exceptions are thrown when a file or directory cannot be deleted.</li>
  </ul>
 @param file file or directory to delete, can be <code>null</code>
 @return <code>true</code> if the file or directory was deleted, otherwise 
 <code>false</code>
 @since 1.4
 */
+ (jboolean)deleteQuietlyWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Determines whether the <code>parent</code> directory contains the <code>child</code> element (a file or directory).
 <p>
  Files are normalized before comparison. 
 </p>
  
  Edge cases: 
 <ul>
  <li>A <code>directory</code> must not be null: if null, throw IllegalArgumentException</li>
  <li>A <code>directory</code> must be a directory: if not a directory, throw IllegalArgumentException</li>
  <li>A directory does not contain itself: return false</li>
  <li>A null child file is not contained in any parent: return false</li>
  </ul>
 @param directory the file to consider as the parent.
 @param child the file to consider as the child.
 @return true is the candidate leaf is under by the specified composite. False otherwise.
 @throw IOException
 if an IO error occurs while checking the files.
 @since 2.2
 - seealso: FilenameUtils#directoryContains(String, String)
 */
+ (jboolean)directoryContainsWithJavaIoFile:(JavaIoFile *)directory
                             withJavaIoFile:(JavaIoFile *)child;

/*!
 @brief Deletes a file.If file is a directory, delete it and all sub-directories.
 <p>
  The difference between File.delete() and this method are: 
 <ul>
  <li>A directory to be deleted does not have to be empty.</li>
  <li>You get exceptions when a file or directory cannot be deleted.
       (java.io.File methods returns a boolean)</li>
  </ul>
 @param file file or directory to delete, must not be <code>null</code>
 @throw NullPointerExceptionif the directory is <code>null</code>
 @throw FileNotFoundExceptionif the file was not found
 @throw IOExceptionin case deletion is unsuccessful
 */
+ (void)forceDeleteWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Schedules a file to be deleted when JVM exits.
 If file is directory delete it and all sub-directories.
 @param file file or directory to delete, must not be <code>null</code>
 @throw NullPointerExceptionif the file is <code>null</code>
 @throw IOExceptionin case deletion is unsuccessful
 */
+ (void)forceDeleteOnExitWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Makes a directory, including any necessary but nonexistent parent
  directories.If a file already exists with specified name but it is
  not a directory then an IOException is thrown.
 If the directory cannot be created (or does not already exist)
  then an IOException is thrown.
 @param directory directory to create, must not be <code>null</code>
 @throw NullPointerExceptionif the directory is <code>null</code>
 @throw IOExceptionif the directory cannot be created or the file already exists but is not a directory
 */
+ (void)forceMkdirWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Construct a file from the set of name elements.
 @param directory the parent directory
 @param names the name elements
 @return the file
 @since 2.1
 */
+ (JavaIoFile *)getFileWithJavaIoFile:(JavaIoFile *)directory
                    withNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Construct a file from the set of name elements.
 @param names the name elements
 @return the file
 @since 2.1
 */
+ (JavaIoFile *)getFileWithNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Returns a <code>File</code> representing the system temporary directory.
 @return the system temporary directory.
 @since 2.0
 */
+ (JavaIoFile *)getTempDirectory;

/*!
 @brief Returns the path to the system temporary directory.
 @return the path to the system temporary directory.
 @since 2.0
 */
+ (NSString *)getTempDirectoryPath;

/*!
 @brief Returns a <code>File</code> representing the user's home directory.
 @return the user's home directory.
 @since 2.0
 */
+ (JavaIoFile *)getUserDirectory;

/*!
 @brief Returns the path to the user's home directory.
 @return the path to the user's home directory.
 @since 2.0
 */
+ (NSString *)getUserDirectoryPath;

/*!
 @brief Tests if the specified <code>File</code> is newer than the specified 
 <code>Date</code>.
 @param file the  <code> File </code>  of which the modification date
   must be compared, must not be <code>null</code>
 @param date the date reference, must not be <code>null</code>
 @return true if the <code>File</code> exists and has been modified
  after the given <code>Date</code>.
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the date is <code>null</code>
 */
+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                     withJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Tests if the specified <code>File</code> is newer than the reference 
 <code>File</code>.
 @param file the  <code> File </code>  of which the modification date must
   be compared, must not be <code>null</code>
 @param reference the  <code> File </code>  of which the modification date
   is used, must not be <code>null</code>
 @return true if the <code>File</code> exists and has been modified more
  recently than the reference <code>File</code>
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the reference file is <code>null</code> or doesn't exist
 */
+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                       withJavaIoFile:(JavaIoFile *)reference;

/*!
 @brief Tests if the specified <code>File</code> is newer than the specified
  time reference.
 @param file the  <code> File </code>  of which the modification date must
   be compared, must not be <code>null</code>
 @param timeMillis the time reference measured in milliseconds since the  epoch (00:00:00 GMT, January 1, 1970)
 @return true if the <code>File</code> exists and has been modified after
  the given time reference.
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 */
+ (jboolean)isFileNewerWithJavaIoFile:(JavaIoFile *)file
                             withLong:(jlong)timeMillis;

/*!
 @brief Tests if the specified <code>File</code> is older than the specified 
 <code>Date</code>.
 @param file the  <code> File </code>  of which the modification date
   must be compared, must not be <code>null</code>
 @param date the date reference, must not be <code>null</code>
 @return true if the <code>File</code> exists and has been modified
  before the given <code>Date</code>.
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the date is <code>null</code>
 */
+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                     withJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Tests if the specified <code>File</code> is older than the reference 
 <code>File</code>.
 @param file the  <code> File </code>  of which the modification date must
   be compared, must not be <code>null</code>
 @param reference the  <code> File </code>  of which the modification date
   is used, must not be <code>null</code>
 @return true if the <code>File</code> exists and has been modified before
  the reference <code>File</code>
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the reference file is <code>null</code> or doesn't exist
 */
+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                       withJavaIoFile:(JavaIoFile *)reference;

/*!
 @brief Tests if the specified <code>File</code> is older than the specified
  time reference.
 @param file the  <code> File </code>  of which the modification date must
   be compared, must not be <code>null</code>
 @param timeMillis the time reference measured in milliseconds since the  epoch (00:00:00 GMT, January 1, 1970)
 @return true if the <code>File</code> exists and has been modified before
  the given time reference.
 @throw IllegalArgumentExceptionif the file is <code>null</code>
 */
+ (jboolean)isFileOlderWithJavaIoFile:(JavaIoFile *)file
                             withLong:(jlong)timeMillis;

/*!
 @brief Determines whether the specified file is a Symbolic Link rather than an actual file.
 <p>
  Will not return true if there is a Symbolic Link anywhere in the path,
  only if the specific file is. 
 <p>
  <b>Note:</b> the current implementation always returns <code>false</code> if the system
  is detected as Windows using <code>FilenameUtils.isSystemWindows()</code>
 @param file the file to check
 @return true if the file is a Symbolic Link
 @throw IOExceptionif an IO error occurs while checking the file
 @since 2.0
 */
+ (jboolean)isSymlinkWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Allows iteration over the files in given directory (and optionally
  its subdirectories).
 <p>
  All files found are filtered by an IOFileFilter. This method is
  based on <code>IOFileFilter, IOFileFilter)</code>,
  which supports Iterable ('foreach' loop). 
 <p>
 @param directory the directory to search in
 @param fileFilter filter to apply when finding files.
 @param dirFilter optional filter to apply when finding subdirectories.  If this parameter is 
 <code>null</code> , subdirectories will not be included in the  search. Use TrueFileFilter.INSTANCE to match all directories.
 @return an iterator of java.io.File for the matching files
 - seealso: org.apache.commons.io.filefilter.FileFilterUtils
 - seealso: org.apache.commons.io.filefilter.NameFileFilter
 @since 1.2
 */
+ (id<JavaUtilIterator>)iterateFilesWithJavaIoFile:(JavaIoFile *)directory
      withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
      withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter;

/*!
 @brief Allows iteration over the files in a given directory (and optionally
  its subdirectories) which match an array of extensions.This method
  is based on <code>String[], boolean)</code>,
  which supports Iterable ('foreach' loop).
 @param directory the directory to search in
 @param extensions an array of extensions, ex. {"java","xml"}. If this  parameter is 
 <code>null</code> , all files are returned.
 @param recursive if true all subdirectories are searched as well
 @return an iterator of java.io.File with the matching files
 @since 1.2
 */
+ (id<JavaUtilIterator>)iterateFilesWithJavaIoFile:(JavaIoFile *)directory
                                 withNSStringArray:(IOSObjectArray *)extensions
                                       withBoolean:(jboolean)recursive;

/*!
 @brief Allows iteration over the files in given directory (and optionally
  its subdirectories).
 <p>
  All files found are filtered by an IOFileFilter. This method is
  based on <code>IOFileFilter, IOFileFilter)</code>,
  which supports Iterable ('foreach' loop). 
 <p>
  The resulting iterator includes the subdirectories themselves.
 @param directory the directory to search in
 @param fileFilter filter to apply when finding files.
 @param dirFilter optional filter to apply when finding subdirectories.  If this parameter is 
 <code>null</code> , subdirectories will not be included in the  search. Use TrueFileFilter.INSTANCE to match all directories.
 @return an iterator of java.io.File for the matching files
 - seealso: org.apache.commons.io.filefilter.FileFilterUtils
 - seealso: org.apache.commons.io.filefilter.NameFileFilter
 @since 2.2
 */
+ (id<JavaUtilIterator>)iterateFilesAndDirsWithJavaIoFile:(JavaIoFile *)directory
             withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
             withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter;

/*!
 @brief Returns an Iterator for the lines in a <code>File</code> using the default encoding for the VM.
 @param file the file to open for input, must not be <code>null</code>
 @return an Iterator of the lines in the file, never <code>null</code>
 @throw IOExceptionin case of an I/O error (file closed)
 @since 1.3
 - seealso: #lineIterator(File, String)
 */
+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Returns an Iterator for the lines in a <code>File</code>.
 <p>
  This method opens an <code>InputStream</code> for the file.
  When you have finished with the iterator you should close the stream
  to free internal resources. This can be done by calling the 
 <code>LineIterator.close()</code> or 
 <code>LineIterator.closeQuietly(LineIterator)</code> method. 
 <p>
  The recommended usage pattern is: 
 @code

  LineIterator it = FileUtils.lineIterator(file, "UTF-8");
  try {
    while (it.hasNext()) {
      String line = it.nextLine();
      /// do something with line
    }
  } finally {
    LineIterator.closeQuietly(iterator);
  } 
  
@endcode
  <p>
  If an exception occurs during the creation of the iterator, the
  underlying stream is closed.
 @param file the file to open for input, must not be <code>null</code>
 @param encoding the encoding to use, <code>null</code>  means platform default
 @return an Iterator of the lines in the file, never <code>null</code>
 @throw IOExceptionin case of an I/O error (file closed)
 @since 1.2
 */
+ (OrgApacheCommonsIoLineIterator *)lineIteratorWithJavaIoFile:(JavaIoFile *)file
                                                  withNSString:(NSString *)encoding;

/*!
 @brief Finds files within a given directory (and optionally its
  subdirectories).All files found are filtered by an IOFileFilter.
 <p>
  If your search should recurse into subdirectories you can pass in
  an IOFileFilter for directories. You don't need to bind a
  DirectoryFileFilter (via logical AND) to this filter. This method does
  that for you. 
 <p>
  An example: If you want to search through all directories called
  "temp" you pass in <code>FileFilterUtils.NameFileFilter("temp")</code>
  <p>
  Another common usage of this method is find files in a directory
  tree but ignoring the directories generated CVS. You can simply pass
  in <code>FileFilterUtils.makeCVSAware(null)</code>.
 @param directory the directory to search in
 @param fileFilter filter to apply when finding files.
 @param dirFilter optional filter to apply when finding subdirectories.  If this parameter is 
 <code>null</code> , subdirectories will not be included in the  search. Use TrueFileFilter.INSTANCE to match all directories.
 @return an collection of java.io.File with the matching files
 - seealso: org.apache.commons.io.filefilter.FileFilterUtils
 - seealso: org.apache.commons.io.filefilter.NameFileFilter
 */
+ (id<JavaUtilCollection>)listFilesWithJavaIoFile:(JavaIoFile *)directory
     withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
     withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter;

/*!
 @brief Finds files within a given directory (and optionally its subdirectories)
  which match an array of extensions.
 @param directory the directory to search in
 @param extensions an array of extensions, ex. {"java","xml"}. If this  parameter is 
 <code>null</code> , all files are returned.
 @param recursive if true all subdirectories are searched as well
 @return an collection of java.io.File with the matching files
 */
+ (id<JavaUtilCollection>)listFilesWithJavaIoFile:(JavaIoFile *)directory
                                withNSStringArray:(IOSObjectArray *)extensions
                                      withBoolean:(jboolean)recursive;

/*!
 @brief Finds files within a given directory (and optionally its
  subdirectories).All files found are filtered by an IOFileFilter.
 <p>
  The resulting collection includes the subdirectories themselves. 
 <p>
 - seealso: org.apache.commons.io.FileUtils
 @param directory the directory to search in
 @param fileFilter filter to apply when finding files.
 @param dirFilter optional filter to apply when finding subdirectories.  If this parameter is 
 <code>null</code> , subdirectories will not be included in the  search. Use TrueFileFilter.INSTANCE to match all directories.
 @return an collection of java.io.File with the matching files
 - seealso: org.apache.commons.io.filefilter.FileFilterUtils
 - seealso: org.apache.commons.io.filefilter.NameFileFilter
 @since 2.2
 */
+ (id<JavaUtilCollection>)listFilesAndDirsWithJavaIoFile:(JavaIoFile *)directory
            withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFilter
            withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)dirFilter;

/*!
 @brief Moves a directory.
 <p>
  When the destination directory is on another file system, do a "copy and delete".
 @param srcDir the directory to be moved
 @param destDir the destination directory
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw FileExistsExceptionif the destination directory exists
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs moving the file
 @since 1.4
 */
+ (void)moveDirectoryWithJavaIoFile:(JavaIoFile *)srcDir
                     withJavaIoFile:(JavaIoFile *)destDir;

/*!
 @brief Moves a directory to another directory.
 @param src the file to be moved
 @param destDir the destination file
 @param createDestDir If <code>true</code>  create the destination directory,
   otherwise if <code>false</code>  throw an IOException
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw FileExistsExceptionif the directory exists in the destination directory
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs moving the file
 @since 1.4
 */
+ (void)moveDirectoryToDirectoryWithJavaIoFile:(JavaIoFile *)src
                                withJavaIoFile:(JavaIoFile *)destDir
                                   withBoolean:(jboolean)createDestDir;

/*!
 @brief Moves a file.
 <p>
  When the destination file is on another file system, do a "copy and delete".
 @param srcFile the file to be moved
 @param destFile the destination file
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw FileExistsExceptionif the destination file exists
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs moving the file
 @since 1.4
 */
+ (void)moveFileWithJavaIoFile:(JavaIoFile *)srcFile
                withJavaIoFile:(JavaIoFile *)destFile;

/*!
 @brief Moves a file to a directory.
 @param srcFile the file to be moved
 @param destDir the destination file
 @param createDestDir If <code>true</code>  create the destination directory,
   otherwise if <code>false</code>  throw an IOException
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw FileExistsExceptionif the destination file exists
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs moving the file
 @since 1.4
 */
+ (void)moveFileToDirectoryWithJavaIoFile:(JavaIoFile *)srcFile
                           withJavaIoFile:(JavaIoFile *)destDir
                              withBoolean:(jboolean)createDestDir;

/*!
 @brief Moves a file or directory to the destination directory.
 <p>
  When the destination is on another file system, do a "copy and delete".
 @param src the file or directory to be moved
 @param destDir the destination directory
 @param createDestDir If <code>true</code>  create the destination directory,
   otherwise if <code>false</code>  throw an IOException
 @throw NullPointerExceptionif source or destination is <code>null</code>
 @throw FileExistsExceptionif the directory or file exists in the destination directory
 @throw IOExceptionif source or destination is invalid
 @throw IOExceptionif an IO error occurs moving the file
 @since 1.4
 */
+ (void)moveToDirectoryWithJavaIoFile:(JavaIoFile *)src
                       withJavaIoFile:(JavaIoFile *)destDir
                          withBoolean:(jboolean)createDestDir;

/*!
 @brief Opens a <code>FileInputStream</code> for the specified file, providing better
  error messages than simply calling <code>new FileInputStream(file)</code>.
 <p>
  At the end of the method either the stream will be successfully opened,
  or an exception will have been thrown. 
 <p>
  An exception is thrown if the file does not exist.
  An exception is thrown if the file object exists but is a directory.
  An exception is thrown if the file exists but cannot be read.
 @param file the file to open for input, must not be <code>null</code>
 @return a new <code>FileInputStream</code> for the specified file
 @throw FileNotFoundExceptionif the file does not exist
 @throw IOExceptionif the file object is a directory
 @throw IOExceptionif the file cannot be read
 @since 1.3
 */
+ (JavaIoFileInputStream *)openInputStreamWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Opens a <code>FileOutputStream</code> for the specified file, checking and
  creating the parent directory if it does not exist.
 <p>
  At the end of the method either the stream will be successfully opened,
  or an exception will have been thrown. 
 <p>
  The parent directory will be created if it does not exist.
  The file will be created if it does not exist.
  An exception is thrown if the file object exists but is a directory.
  An exception is thrown if the file exists but cannot be written to.
  An exception is thrown if the parent directory cannot be created.
 @param file the file to open for output, must not be <code>null</code>
 @return a new <code>FileOutputStream</code> for the specified file
 @throw IOExceptionif the file object is a directory
 @throw IOExceptionif the file cannot be written to
 @throw IOExceptionif a parent directory needs creating but that fails
 @since 1.3
 */
+ (JavaIoFileOutputStream *)openOutputStreamWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Opens a <code>FileOutputStream</code> for the specified file, checking and
  creating the parent directory if it does not exist.
 <p>
  At the end of the method either the stream will be successfully opened,
  or an exception will have been thrown. 
 <p>
  The parent directory will be created if it does not exist.
  The file will be created if it does not exist.
  An exception is thrown if the file object exists but is a directory.
  An exception is thrown if the file exists but cannot be written to.
  An exception is thrown if the parent directory cannot be created.
 @param file the file to open for output, must not be <code>null</code>
 @param append if <code>true</code> , then bytes will be added to the
   end of the file rather than overwriting
 @return a new <code>FileOutputStream</code> for the specified file
 @throw IOExceptionif the file object is a directory
 @throw IOExceptionif the file cannot be written to
 @throw IOExceptionif a parent directory needs creating but that fails
 @since 2.1
 */
+ (JavaIoFileOutputStream *)openOutputStreamWithJavaIoFile:(JavaIoFile *)file
                                               withBoolean:(jboolean)append;

/*!
 @brief Reads the contents of a file into a byte array.
 The file is always closed.
 @param file the file to read, must not be <code>null</code>
 @return the file contents, never <code>null</code>
 @throw IOExceptionin case of an I/O error
 @since 1.1
 */
+ (IOSByteArray *)readFileToByteArrayWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Reads the contents of a file into a String using the default encoding for the VM.
 The file is always closed.
 @param file the file to read, must not be <code>null</code>
 @return the file contents, never <code>null</code>
 @throw IOExceptionin case of an I/O error
 @since 1.3.1
 */
+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Reads the contents of a file into a String.
 The file is always closed.
 @param file the file to read, must not be <code>null</code>
 @param encoding the encoding to use, <code>null</code>  means platform default
 @return the file contents, never <code>null</code>
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Reads the contents of a file into a String.The file is always closed.
 @param file the file to read, must not be 
 <code>null</code>
 @param encoding the encoding to use, 
 <code>null</code>  means platform default
 @return the file contents, never <code>null</code>
 @throw IOException
 in case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 2.3
 */
+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)encoding;

/*!
 @brief Reads the contents of a file line by line to a List of Strings using the default encoding for the VM.
 The file is always closed.
 @param file the file to read, must not be <code>null</code>
 @return the list of Strings representing each line in the file, never <code>null</code>
 @throw IOExceptionin case of an I/O error
 @since 1.3
 */
+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Reads the contents of a file line by line to a List of Strings.
 The file is always closed.
 @param file the file to read, must not be <code>null</code>
 @param encoding the encoding to use, <code>null</code>  means platform default
 @return the list of Strings representing each line in the file, never <code>null</code>
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Reads the contents of a file line by line to a List of Strings.The file is always closed.
 @param file the file to read, must not be 
 <code>null</code>
 @param encoding the encoding to use, 
 <code>null</code>  means platform default
 @return the list of Strings representing each line in the file, never <code>null</code>
 @throw IOException
 in case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported.
 @since 1.1
 */
+ (id<JavaUtilList>)readLinesWithJavaIoFile:(JavaIoFile *)file
                               withNSString:(NSString *)encoding;

/*!
 @brief Returns the size of the specified file or directory.If the provided  
 <code>File</code> is a regular file, then the file's length is returned.
 If the argument is a directory, then the size of the directory is
  calculated recursively. If a directory or subdirectory is security 
  restricted, its size will not be included.
 @param file the regular file or directory to return the size          of (must not be 
 <code>null</code> ).
 @return the length of the file, or recursive size of the directory, 
          provided (in bytes).
 @throw NullPointerExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the file does not exist.
 @since 2.0
 */
+ (jlong)sizeOfWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Returns the size of the specified file or directory.If the provided  
 <code>File</code> is a regular file, then the file's length is returned.
 If the argument is a directory, then the size of the directory is
  calculated recursively. If a directory or subdirectory is security 
  restricted, its size will not be included.
 @param file the regular file or directory to return the size          of (must not be 
 <code>null</code> ).
 @return the length of the file, or recursive size of the directory, 
          provided (in bytes).
 @throw NullPointerExceptionif the file is <code>null</code>
 @throw IllegalArgumentExceptionif the file does not exist.
 @since 2.4
 */
+ (JavaMathBigInteger *)sizeOfAsBigIntegerWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Counts the size of a directory recursively (sum of the length of all files).
 @param directory directory to inspect, must not be 
 <code>null</code>
 @return size of directory in bytes, 0 if directory is security restricted, a negative number when the real total
          is greater than <code>Long.MAX_VALUE</code>.
 @throw NullPointerException
 if the directory is <code>null</code>
 */
+ (jlong)sizeOfDirectoryWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Counts the size of a directory recursively (sum of the length of all files).
 @param directory directory to inspect, must not be 
 <code>null</code>
 @return size of directory in bytes, 0 if directory is security restricted.
 @throw NullPointerException
 if the directory is <code>null</code>
 @since 2.4
 */
+ (JavaMathBigInteger *)sizeOfDirectoryAsBigIntegerWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Convert from a <code>URL</code> to a <code>File</code>.
 <p>
  From version 1.1 this method will decode the URL.
  Syntax such as <code>file:///my%20docs/file.txt</code> will be
  correctly decoded to <code>/my docs/file.txt</code>. Starting with version
  1.5, this method uses UTF-8 to decode percent-encoded octets to characters.
  Additionally, malformed percent-encoded octets are handled leniently by
  passing them through literally.
 @param url the file URL to convert, <code>null</code>  returns <code>null</code>
 @return the equivalent <code>File</code> object, or <code>null</code>
   if the URL's protocol is not <code>file</code>
 */
+ (JavaIoFile *)toFileWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Converts each of an array of <code>URL</code> to a <code>File</code>.
 <p>
  Returns an array of the same size as the input.
  If the input is <code>null</code>, an empty array is returned.
  If the input contains <code>null</code>, the output array contains <code>null</code> at the same
  index. 
 <p>
  This method will decode the URL.
  Syntax such as <code>file:///my%20docs/file.txt</code> will be
  correctly decoded to <code>/my docs/file.txt</code>.
 @param urls the file URLs to convert, <code>null</code>  returns empty array
 @return a non-<code>null</code> array of Files matching the input, with a <code>null</code> item
   if there was a <code>null</code> at that index in the input array
 @throw IllegalArgumentExceptionif any file is not a URL file
 @throw IllegalArgumentExceptionif any file is incorrectly encoded
 @since 1.1
 */
+ (IOSObjectArray *)toFilesWithJavaNetURLArray:(IOSObjectArray *)urls;

/*!
 @brief Implements the same behaviour as the "touch" utility on Unix.It creates
  a new file with size 0 or, if the file exists already, it is opened and
  closed without modifying it, but updating the file date and time.
 <p>
  NOTE: As from v1.3, this method throws an IOException if the last
  modified date of the file cannot be set. Also, as from v1.3 this method
  creates parent directories if they do not exist.
 @param file the File to touch
 @throw IOExceptionIf an I/O problem occurs
 */
+ (void)touchWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Converts each of an array of <code>File</code> to a <code>URL</code>.
 <p>
  Returns an array of the same size as the input.
 @param files the files to convert, must not be <code>null</code>
 @return an array of URLs matching the input
 @throw IOExceptionif a file cannot be converted
 @throw NullPointerExceptionif the parameter is null
 */
+ (IOSObjectArray *)toURLsWithJavaIoFileArray:(IOSObjectArray *)files;

/*!
 @brief Waits for NFS to propagate a file creation, imposing a timeout.
 <p>
  This method repeatedly tests <code>File.exists()</code> until it returns
  true up to the maximum time specified in seconds.
 @param file the file to check, must not be <code>null</code>
 @param seconds the maximum time in seconds to wait
 @return true if file exists
 @throw NullPointerExceptionif the file is <code>null</code>
 */
+ (jboolean)waitForWithJavaIoFile:(JavaIoFile *)file
                          withInt:(jint)seconds;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist using the default encoding for the VM.
 @param file the file to write
 @param data the content to write to the file
 @throw IOExceptionin case of an I/O error
 @since 2.0
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist using the default encoding for the VM.
 @param file the file to write
 @param data the content to write to the file
 @param append if <code>true</code> , then the data will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.1
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
                withBoolean:(jboolean)append;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param append if <code>true</code> , then the data will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                withBoolean:(jboolean)append;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 2.0
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withNSString:(NSString *)encoding;

/*!
 @brief Writes a CharSequence to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param append if <code>true</code> , then the data will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported by the VM
 @since IO 2.1
 */
+ (void)writeWithJavaIoFile:(JavaIoFile *)file
   withJavaLangCharSequence:(id<JavaLangCharSequence>)data
               withNSString:(NSString *)encoding
                withBoolean:(jboolean)append;

/*!
 @brief Writes a byte array to a file creating the file if it does not exist.
 <p>
  NOTE: As from v1.3, the parent directories of the file will be created
  if they do not exist.
 @param file the file to write to
 @param data the content to write to the file
 @throw IOExceptionin case of an I/O error
 @since 1.1
 */
+ (void)writeByteArrayToFileWithJavaIoFile:(JavaIoFile *)file
                             withByteArray:(IOSByteArray *)data;

/*!
 @brief Writes a byte array to a file creating the file if it does not exist.
 @param file the file to write to
 @param data the content to write to the file
 @param append if <code>true</code> , then bytes will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since IO 2.1
 */
+ (void)writeByteArrayToFileWithJavaIoFile:(JavaIoFile *)file
                             withByteArray:(IOSByteArray *)data
                               withBoolean:(jboolean)append;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The default VM encoding and the default line ending will be used.
 @param file the file to write to
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @throw IOExceptionin case of an I/O error
 @since 1.3
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The default VM encoding and the default line ending will be used.
 @param file the file to write to
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param append if <code>true</code> , then the lines will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                     withBoolean:(jboolean)append;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The default VM encoding and the specified line ending will be used.
 @param file the file to write to
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param lineEnding the line separator to use, <code>null</code>  is system default
 @throw IOExceptionin case of an I/O error
 @since 1.3
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The default VM encoding and the specified line ending will be used.
 @param file the file to write to
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param lineEnding the line separator to use, <code>null</code>  is system default
 @param append if <code>true</code> , then the lines will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding
                     withBoolean:(jboolean)append;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The specified character encoding and the default line ending will be used. 
 <p>
  NOTE: As from v1.3, the parent directories of the file will be created
  if they do not exist.
 @param file the file to write to
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 1.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line, optionally appending.
 The specified character encoding and the default line ending will be used.
 @param file the file to write to
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param append if <code>true</code> , then the lines will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 2.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                     withBoolean:(jboolean)append;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The specified character encoding and the line ending will be used. 
 <p>
  NOTE: As from v1.3, the parent directories of the file will be created
  if they do not exist.
 @param file the file to write to
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param lineEnding the line separator to use, <code>null</code>  is system default
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 1.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding;

/*!
 @brief Writes the <code>toString()</code> value of each item in a collection to
  the specified <code>File</code> line by line.
 The specified character encoding and the line ending will be used.
 @param file the file to write to
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param lines the lines to write, <code>null</code>  entries produce blank lines
 @param lineEnding the line separator to use, <code>null</code>  is system default
 @param append if <code>true</code> , then the lines will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 2.1
 */
+ (void)writeLinesWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)encoding
          withJavaUtilCollection:(id<JavaUtilCollection>)lines
                    withNSString:(NSString *)lineEnding
                     withBoolean:(jboolean)append;

/*!
 @brief Writes a String to a file creating the file if it does not exist using the default encoding for the VM.
 @param file the file to write
 @param data the content to write to the file
 @throw IOExceptionin case of an I/O error
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data;

/*!
 @brief Writes a String to a file creating the file if it does not exist using the default encoding for the VM.
 @param file the file to write
 @param data the content to write to the file
 @param append if <code>true</code> , then the String will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.1
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                            withBoolean:(jboolean)append;

/*!
 @brief Writes a String to a file creating the file if it does not exist.
 NOTE: As from v1.3, the parent directories of the file will be created
  if they do not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 @since 2.4
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding;

/*!
 @brief Writes a String to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param append if <code>true</code> , then the String will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @since 2.3
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)encoding
                            withBoolean:(jboolean)append;

/*!
 @brief Writes a String to a file creating the file if it does not exist.
 NOTE: As from v1.3, the parent directories of the file will be created
  if they do not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @throw IOExceptionin case of an I/O error
 @throw java.io.UnsupportedEncodingExceptionif the encoding is not supported by the VM
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                           withNSString:(NSString *)encoding;

/*!
 @brief Writes a String to a file creating the file if it does not exist.
 @param file the file to write
 @param data the content to write to the file
 @param encoding the encoding to use, <code>null</code>  means platform default
 @param append if <code>true</code> , then the String will be added to the
   end of the file rather than overwriting
 @throw IOExceptionin case of an I/O error
 @throw UnsupportedCharsetException
 thrown instead of <code>UnsupportedEncodingException</code> in version 2.2 if the encoding is not
              supported by the VM
 @since 2.1
 */
+ (void)writeStringToFileWithJavaIoFile:(JavaIoFile *)file
                           withNSString:(NSString *)data
                           withNSString:(NSString *)encoding
                            withBoolean:(jboolean)append;

#pragma mark Package-Private

/*!
 @brief Decodes the specified URL as per RFC 3986, i.e.transforms
  percent-encoded octets to characters by decoding with the UTF-8 character
  set.
 This function is primarily intended for usage with 
 <code>java.net.URL</code> which unfortunately does not enforce proper URLs. As
  such, this method will leniently accept invalid characters or malformed
  percent-encoded octets and simply pass them literally through to the
  result string. Except for rare edge cases, this will make unencoded URLs
  pass through unaltered.
 @param url The URL to decode, may be <code>null</code> .
 @return The decoded URL or <code>null</code> if the input was
          <code>null</code>.
 */
+ (NSString *)decodeUrlWithNSString:(NSString *)url;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoFileUtils)

/*!
 @brief The number of bytes in a kilobyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_KB(void);
#define OrgApacheCommonsIoFileUtils_ONE_KB 1024LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_KB, jlong)

/*!
 @brief The number of bytes in a kilobyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_KB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_KB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_KB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a megabyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_MB(void);
#define OrgApacheCommonsIoFileUtils_ONE_MB 1048576LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_MB, jlong)

/*!
 @brief The number of bytes in a megabyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_MB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_MB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_MB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a gigabyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_GB(void);
#define OrgApacheCommonsIoFileUtils_ONE_GB 1073741824LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_GB, jlong)

/*!
 @brief The number of bytes in a gigabyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_GB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_GB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_GB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a terabyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_TB(void);
#define OrgApacheCommonsIoFileUtils_ONE_TB 1099511627776LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_TB, jlong)

/*!
 @brief The number of bytes in a terabyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_TB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_TB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_TB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a petabyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_PB(void);
#define OrgApacheCommonsIoFileUtils_ONE_PB 1125899906842624LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_PB, jlong)

/*!
 @brief The number of bytes in a petabyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_PB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_PB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_PB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in an exabyte.
 */
inline jlong OrgApacheCommonsIoFileUtils_get_ONE_EB(void);
#define OrgApacheCommonsIoFileUtils_ONE_EB 1152921504606846976LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFileUtils, ONE_EB, jlong)

/*!
 @brief The number of bytes in an exabyte.
 @since 2.4
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_EB_BI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_EB_BI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_EB_BI, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a zettabyte.
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_ZB(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_ZB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_ZB, JavaMathBigInteger *)

/*!
 @brief The number of bytes in a yottabyte.
 */
inline JavaMathBigInteger *OrgApacheCommonsIoFileUtils_get_ONE_YB(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_ONE_YB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, ONE_YB, JavaMathBigInteger *)

/*!
 @brief An empty array of type <code>File</code>.
 */
inline IOSObjectArray *OrgApacheCommonsIoFileUtils_get_EMPTY_FILE_ARRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFileUtils_EMPTY_FILE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileUtils, EMPTY_FILE_ARRAY, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_init(OrgApacheCommonsIoFileUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFileUtils *new_OrgApacheCommonsIoFileUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFileUtils *create_OrgApacheCommonsIoFileUtils_init(void);

FOUNDATION_EXPORT JavaIoFile *OrgApacheCommonsIoFileUtils_getFileWithJavaIoFile_withNSStringArray_(JavaIoFile *directory, IOSObjectArray *names);

FOUNDATION_EXPORT JavaIoFile *OrgApacheCommonsIoFileUtils_getFileWithNSStringArray_(IOSObjectArray *names);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_getTempDirectoryPath(void);

FOUNDATION_EXPORT JavaIoFile *OrgApacheCommonsIoFileUtils_getTempDirectory(void);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_getUserDirectoryPath(void);

FOUNDATION_EXPORT JavaIoFile *OrgApacheCommonsIoFileUtils_getUserDirectory(void);

FOUNDATION_EXPORT JavaIoFileInputStream *OrgApacheCommonsIoFileUtils_openInputStreamWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFileOutputStream *OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFileOutputStream *OrgApacheCommonsIoFileUtils_openOutputStreamWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithJavaMathBigInteger_(JavaMathBigInteger *size);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_byteCountToDisplaySizeWithLong_(jlong size);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_touchWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFileUtils_convertFileCollectionToFileArrayWithJavaUtilCollection_(id<JavaUtilCollection> files);

FOUNDATION_EXPORT id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter);

FOUNDATION_EXPORT id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter);

FOUNDATION_EXPORT id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter);

FOUNDATION_EXPORT id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesAndDirsWithJavaIoFile_withOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(JavaIoFile *directory, id<OrgApacheCommonsIoFilefilterIOFileFilter> fileFilter, id<OrgApacheCommonsIoFilefilterIOFileFilter> dirFilter);

FOUNDATION_EXPORT id<JavaUtilCollection> OrgApacheCommonsIoFileUtils_listFilesWithJavaIoFile_withNSStringArray_withBoolean_(JavaIoFile *directory, IOSObjectArray *extensions, jboolean recursive);

FOUNDATION_EXPORT id<JavaUtilIterator> OrgApacheCommonsIoFileUtils_iterateFilesWithJavaIoFile_withNSStringArray_withBoolean_(JavaIoFile *directory, IOSObjectArray *extensions, jboolean recursive);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_contentEqualsWithJavaIoFile_withJavaIoFile_(JavaIoFile *file1, JavaIoFile *file2);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_contentEqualsIgnoreEOLWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *file1, JavaIoFile *file2, NSString *charsetName);

FOUNDATION_EXPORT JavaIoFile *OrgApacheCommonsIoFileUtils_toFileWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_decodeUrlWithNSString_(NSString *url);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFileUtils_toFilesWithJavaNetURLArray_(IOSObjectArray *urls);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFileUtils_toURLsWithJavaIoFileArray_(IOSObjectArray *files);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destDir, jboolean preserveFileDate);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destFile, jboolean preserveFileDate);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoFileUtils_copyFileWithJavaIoFile_withJavaIoOutputStream_(JavaIoFile *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcDir, JavaIoFile *destDir, jboolean preserveFileDate);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyDirectoryWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *srcDir, JavaIoFile *destDir, id<JavaIoFileFilter> filter, jboolean preserveFileDate);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_(JavaNetURL *source, JavaIoFile *destination);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyURLToFileWithJavaNetURL_withJavaIoFile_withInt_withInt_(JavaNetURL *source, JavaIoFile *destination, jint connectionTimeout, jint readTimeout);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_copyInputStreamToFileWithJavaIoInputStream_withJavaIoFile_(JavaIoInputStream *source, JavaIoFile *destination);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_deleteDirectoryWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_deleteQuietlyWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_directoryContainsWithJavaIoFile_withJavaIoFile_(JavaIoFile *directory, JavaIoFile *child);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_cleanDirectoryWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_waitForWithJavaIoFile_withInt_(JavaIoFile *file, jint seconds);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheCommonsIoFileUtils_readFileToStringWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsIoFileUtils_readFileToByteArrayWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFileUtils_readLinesWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT OrgApacheCommonsIoLineIterator *OrgApacheCommonsIoFileUtils_lineIteratorWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_(JavaIoFile *file, NSString *data, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_(JavaIoFile *file, NSString *data, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, NSString *data, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withNSString_withBoolean_(JavaIoFile *file, NSString *data, NSString *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *data);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeStringToFileWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *data, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_(JavaIoFile *file, id<JavaLangCharSequence> data);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_(JavaIoFile *file, id<JavaLangCharSequence> data, JavaNioCharsetCharset *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_(JavaIoFile *file, id<JavaLangCharSequence> data, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withJavaNioCharsetCharset_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, JavaNioCharsetCharset *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeWithJavaIoFile_withJavaLangCharSequence_withNSString_withBoolean_(JavaIoFile *file, id<JavaLangCharSequence> data, NSString *encoding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_(JavaIoFile *file, IOSByteArray *data);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeByteArrayToFileWithJavaIoFile_withByteArray_withBoolean_(JavaIoFile *file, IOSByteArray *data, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withBoolean_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_(JavaIoFile *file, id<JavaUtilCollection> lines);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withBoolean_(JavaIoFile *file, id<JavaUtilCollection> lines, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, NSString *lineEnding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withNSString_withJavaUtilCollection_withNSString_withBoolean_(JavaIoFile *file, NSString *encoding, id<JavaUtilCollection> lines, NSString *lineEnding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_(JavaIoFile *file, id<JavaUtilCollection> lines, NSString *lineEnding);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_writeLinesWithJavaIoFile_withJavaUtilCollection_withNSString_withBoolean_(JavaIoFile *file, id<JavaUtilCollection> lines, NSString *lineEnding, jboolean append);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_forceDeleteWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_forceDeleteOnExitWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_forceMkdirWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoFileUtils_sizeOfWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_sizeOfAsBigIntegerWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoFileUtils_sizeOfDirectoryWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsIoFileUtils_sizeOfDirectoryAsBigIntegerWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaIoFile_(JavaIoFile *file, JavaIoFile *reference);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withJavaUtilDate_(JavaIoFile *file, JavaUtilDate *date);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileNewerWithJavaIoFile_withLong_(JavaIoFile *file, jlong timeMillis);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaIoFile_(JavaIoFile *file, JavaIoFile *reference);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withJavaUtilDate_(JavaIoFile *file, JavaUtilDate *date);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isFileOlderWithJavaIoFile_withLong_(JavaIoFile *file, jlong timeMillis);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoFileUtils_checksumCRC32WithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<JavaUtilZipChecksum> OrgApacheCommonsIoFileUtils_checksumWithJavaIoFile_withJavaUtilZipChecksum_(JavaIoFile *file, id<JavaUtilZipChecksum> checksum);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_moveDirectoryWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcDir, JavaIoFile *destDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_moveDirectoryToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *src, JavaIoFile *destDir, jboolean createDestDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_moveFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_moveFileToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *srcFile, JavaIoFile *destDir, jboolean createDestDir);

FOUNDATION_EXPORT void OrgApacheCommonsIoFileUtils_moveToDirectoryWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *src, JavaIoFile *destDir, jboolean createDestDir);

FOUNDATION_EXPORT jboolean OrgApacheCommonsIoFileUtils_isSymlinkWithJavaIoFile_(JavaIoFile *file);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFileUtils")
