//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/ThreadMonitor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "org/apache/commons/io/ThreadMonitor.h"

@interface OrgApacheCommonsIoThreadMonitor () {
 @public
  JavaLangThread *thread_;
  jlong timeout_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoThreadMonitor, thread_, JavaLangThread *)

__attribute__((unused)) static void OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(OrgApacheCommonsIoThreadMonitor *self, JavaLangThread *thread, jlong timeout);

__attribute__((unused)) static OrgApacheCommonsIoThreadMonitor *new_OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(JavaLangThread *thread, jlong timeout) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsIoThreadMonitor *create_OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(JavaLangThread *thread, jlong timeout);

@implementation OrgApacheCommonsIoThreadMonitor

+ (JavaLangThread *)startWithLong:(jlong)timeout {
  return OrgApacheCommonsIoThreadMonitor_startWithLong_(timeout);
}

+ (JavaLangThread *)startWithJavaLangThread:(JavaLangThread *)thread
                                   withLong:(jlong)timeout {
  return OrgApacheCommonsIoThreadMonitor_startWithJavaLangThread_withLong_(thread, timeout);
}

+ (void)stopWithJavaLangThread:(JavaLangThread *)thread {
  OrgApacheCommonsIoThreadMonitor_stopWithJavaLangThread_(thread);
}

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(timeout_);
    [((JavaLangThread *) nil_chk(thread_)) interrupt];
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

- (void)dealloc {
  RELEASE_(thread_);
  [super dealloc];
}

@end

JavaLangThread *OrgApacheCommonsIoThreadMonitor_startWithLong_(jlong timeout) {
  OrgApacheCommonsIoThreadMonitor_initialize();
  return OrgApacheCommonsIoThreadMonitor_startWithJavaLangThread_withLong_(JavaLangThread_currentThread(), timeout);
}

JavaLangThread *OrgApacheCommonsIoThreadMonitor_startWithJavaLangThread_withLong_(JavaLangThread *thread, jlong timeout) {
  OrgApacheCommonsIoThreadMonitor_initialize();
  JavaLangThread *monitor = nil;
  if (timeout > 0) {
    OrgApacheCommonsIoThreadMonitor *timout = create_OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(thread, timeout);
    monitor = create_JavaLangThread_initWithJavaLangRunnable_withNSString_(timout, [OrgApacheCommonsIoThreadMonitor_class_() getSimpleName]);
    [monitor setDaemonWithBoolean:true];
    [monitor start];
  }
  return monitor;
}

void OrgApacheCommonsIoThreadMonitor_stopWithJavaLangThread_(JavaLangThread *thread) {
  OrgApacheCommonsIoThreadMonitor_initialize();
  if (thread != nil) {
    [thread interrupt];
  }
}

void OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(OrgApacheCommonsIoThreadMonitor *self, JavaLangThread *thread, jlong timeout) {
  NSObject_init(self);
  JreStrongAssign(&self->thread_, thread);
  self->timeout_ = timeout;
}

OrgApacheCommonsIoThreadMonitor *new_OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(JavaLangThread *thread, jlong timeout) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoThreadMonitor, initWithJavaLangThread_withLong_, thread, timeout)
}

OrgApacheCommonsIoThreadMonitor *create_OrgApacheCommonsIoThreadMonitor_initWithJavaLangThread_withLong_(JavaLangThread *thread, jlong timeout) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoThreadMonitor, initWithJavaLangThread_withLong_, thread, timeout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoThreadMonitor)
