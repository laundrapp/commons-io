//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/CopyUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoCopyUtils")
#ifdef RESTRICT_OrgApacheCommonsIoCopyUtils
#define INCLUDE_ALL_OrgApacheCommonsIoCopyUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoCopyUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsIoCopyUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoCopyUtils_) && (INCLUDE_ALL_OrgApacheCommonsIoCopyUtils || defined(INCLUDE_OrgApacheCommonsIoCopyUtils))
#define OrgApacheCommonsIoCopyUtils_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;

/*!
 @brief This class provides static utility methods for buffered
  copying between sources (<code>InputStream</code>, <code>Reader</code>,
  <code>String</code> and <code>byte[]</code>) and destinations
  (<code>OutputStream</code>, <code>Writer</code>, <code>String</code> and 
 <code>byte[]</code>).
 <p>
  Unless otherwise noted, these <code>copy</code> methods do <em>not</em>
  flush or close the streams. Often doing so would require making non-portable
  assumptions about the streams' origin and further use. This means that both streams' 
 <code>close()</code> methods must be called after copying. if one
  omits this step, then the stream resources (sockets, file descriptors) are
  released when the associated Stream is garbage-collected. It is not a good
  idea to rely on this mechanism. For a good overview of the distinction
  between "memory management" and "resource management", see 
 <a href="http://www.unixreview.com/articles/1998/9804/9804ja/ja.htm">this
  UnixReview article</a>.
  <p>
  For byte-to-char methods, a <code>copy</code> variant allows the encoding
  to be selected (otherwise the platform default is used). We would like to
  encourage you to always specify the encoding because relying on the platform
  default can lead to unexpected results. 
 <p
  We don't provide special variants for the <code>copy</code> methods that
  let you specify the buffer size because in modern VMs the impact on speed
  seems to be minimal. We're using a default buffer size of 4 KB. 
 <p>
  The <code>copy</code> methods use an internal buffer when copying. It is
  therefore advisable <em>not</em> to deliberately wrap the stream arguments
  to the <code>copy</code> methods in <code>Buffered*</code> streams. For
  example, don't do the following: 
 @code

   copy( new BufferedInputStream( in ), new BufferedOutputStream( out ) );  
  
@endcode
  The rationale is as follows: 
 <p>
  Imagine that an InputStream's read() is a very expensive operation, which
  would usually suggest wrapping in a BufferedInputStream. The
  BufferedInputStream works by issuing infrequent 
 <code>java.io.InputStream</code> requests on the
  underlying InputStream, to fill an internal buffer, from which further 
 <code>read</code> requests can inexpensively get their data (until the buffer
  runs out). 
 <p>
  However, the <code>copy</code> methods do the same thing, keeping an
  internal buffer, populated by 
 <code>b, int off, int len)</code> requests. Having two
  buffers (or three if the destination stream is also buffered) is pointless,
  and the unnecessary buffer management hurts performance slightly (about 3%,
  according to some simple experiments). 
 <p>
  Behold, intrepid explorers; a map of this class: 
 @code

        Method      Input               Output          Dependency
        ------      -----               ------          -------
  1     copy        InputStream         OutputStream    (primitive)
  2     copy        Reader              Writer          (primitive)
  3     copy        InputStream         Writer          2
  4     copy        Reader              OutputStream    2
  5     copy        String              OutputStream    2
  6     copy        String              Writer          (trivial)
  7     copy        byte[]              Writer          3
  8     copy        byte[]              OutputStream    (trivial) 
  
@endcode
  <p>
  Note that only the first two methods shuffle bytes; the rest use these
  two, or (if possible) copy using native Java copy methods. As there are
  method variants to specify the encoding, each row may
  correspond to up to 2 methods. 
 <p>
  Origin of code: Excalibur.
 @version $Id$
 */
@interface OrgApacheCommonsIoCopyUtils : NSObject

#pragma mark Public

/*!
 @brief Instances should NOT be constructed in standard programming.
 */
- (instancetype __nonnull)init;

/*!
 @brief Copy bytes from a <code>byte[]</code> to an <code>OutputStream</code>.
 @param input the byte array to read from
 @param output the  <code> OutputStream </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithByteArray:(IOSByteArray *)input
     withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy and convert bytes from a <code>byte[]</code> to chars on a 
 <code>Writer</code>.
 The platform's default encoding is used for the byte-to-char conversion.
 @param input the byte array to read from
 @param output the  <code> Writer </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithByteArray:(IOSByteArray *)input
           withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy and convert bytes from a <code>byte[]</code> to chars on a 
 <code>Writer</code>, using the specified encoding.
 @param input the byte array to read from
 @param output the  <code> Writer </code>  to write to
 @param encoding The name of a supported character encoding. See the  
  <a href="http://www.iana.org/assignments/character-sets"> IANA  Charset Registry
  </a>  for a list of valid encoding types.
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithByteArray:(IOSByteArray *)input
           withJavaIoWriter:(JavaIoWriter *)output
               withNSString:(NSString *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy bytes from an <code>InputStream</code> to an 
 <code>OutputStream</code>.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @return the number of bytes copied
 @throw IOExceptionIn case of an I/O problem
 */
+ (jint)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
             withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy and convert bytes from an <code>InputStream</code> to chars on a 
 <code>Writer</code>.
 The platform's default encoding is used for the byte-to-char conversion.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy and convert bytes from an <code>InputStream</code> to chars on a 
 <code>Writer</code>, using the specified encoding.
 @param input the  <code> InputStream </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @param encoding The name of a supported character encoding. See the  
  <a href="http://www.iana.org/assignments/character-sets"> IANA  Charset Registry
  </a>  for a list of valid encoding types.
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoWriter:(JavaIoWriter *)output
                       withNSString:(NSString *)encoding OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Serialize chars from a <code>Reader</code> to bytes on an 
 <code>OutputStream</code>, and flush the <code>OutputStream</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithJavaIoReader:(JavaIoReader *)input
        withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>Reader</code> to a <code>Writer</code>.
 @param input the  <code> Reader </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @return the number of characters copied
 @throw IOExceptionIn case of an I/O problem
 */
+ (jint)copy__WithJavaIoReader:(JavaIoReader *)input
              withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Serialize chars from a <code>String</code> to bytes on an 
 <code>OutputStream</code>, and
  flush the <code>OutputStream</code>.
 @param input the  <code> String </code>  to read from
 @param output the  <code> OutputStream </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithNSString:(NSString *)input
    withJavaIoOutputStream:(JavaIoOutputStream *)output OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy chars from a <code>String</code> to a <code>Writer</code>.
 @param input the  <code> String </code>  to read from
 @param output the  <code> Writer </code>  to write to
 @throw IOExceptionIn case of an I/O problem
 */
+ (void)copy__WithNSString:(NSString *)input
          withJavaIoWriter:(JavaIoWriter *)output OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoCopyUtils)

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_init(OrgApacheCommonsIoCopyUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsIoCopyUtils *new_OrgApacheCommonsIoCopyUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoCopyUtils *create_OrgApacheCommonsIoCopyUtils_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithByteArray_withJavaIoOutputStream_(IOSByteArray *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithByteArray_withJavaIoWriter_(IOSByteArray *input, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithByteArray_withJavaIoWriter_withNSString_(IOSByteArray *input, JavaIoWriter *output, NSString *encoding);

FOUNDATION_EXPORT jint OrgApacheCommonsIoCopyUtils_copy__WithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT jint OrgApacheCommonsIoCopyUtils_copy__WithJavaIoReader_withJavaIoWriter_(JavaIoReader *input, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithJavaIoInputStream_withJavaIoWriter_(JavaIoInputStream *input, JavaIoWriter *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithJavaIoInputStream_withJavaIoWriter_withNSString_(JavaIoInputStream *input, JavaIoWriter *output, NSString *encoding);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithJavaIoReader_withJavaIoOutputStream_(JavaIoReader *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithNSString_withJavaIoOutputStream_(NSString *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgApacheCommonsIoCopyUtils_copy__WithNSString_withJavaIoWriter_(NSString *input, JavaIoWriter *output);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoCopyUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoCopyUtils")
