//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/PathFileComparator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorPathFileComparator")
#ifdef RESTRICT_OrgApacheCommonsIoComparatorPathFileComparator
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorPathFileComparator 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorPathFileComparator 1
#endif
#undef RESTRICT_OrgApacheCommonsIoComparatorPathFileComparator

#if !defined (OrgApacheCommonsIoComparatorPathFileComparator_) && (INCLUDE_ALL_OrgApacheCommonsIoComparatorPathFileComparator || defined(INCLUDE_OrgApacheCommonsIoComparatorPathFileComparator))
#define OrgApacheCommonsIoComparatorPathFileComparator_

#define RESTRICT_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#define INCLUDE_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@protocol JavaUtilComparator;

/*!
 @brief Compare the <b>path</b> of two files for order (see <code>File.getPath()</code>).
 <p>
  This comparator can be used to sort lists or arrays of files
  by their path either in a case-sensitive, case-insensitive or
  system dependant case sensitive way. A number of singleton instances
  are provided for the various case sensitivity options (using <code>IOCase</code>)
  and the reverse of those options. 
 <p>
  Example of a <i>case-sensitive</i> file path sort using the 
 <code>PATH_COMPARATOR</code> singleton instance: 
 @code

        List&lt;File&gt; list = ...
        PathFileComparator.PATH_COMPARATOR.sort(list); 
  
@endcode
  <p>
  Example of a <i>reverse case-insensitive</i> file path sort using the 
 <code>PATH_INSENSITIVE_REVERSE</code> singleton instance: 
 @code

        File[] array = ...
        PathFileComparator.PATH_INSENSITIVE_REVERSE.sort(array); 
  
@endcode
  <p>
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoComparatorPathFileComparator : OrgApacheCommonsIoComparatorAbstractFileComparator < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a case sensitive file path comparator instance.
 */
- (instancetype)init;

/*!
 @brief Construct a file path comparator instance with the specified case-sensitivity.
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 */
- (instancetype)initWithOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Compare the paths of two files the specified case sensitivity.
 @param file1 The first file to compare
 @param file2 The second file to compare
 @return a negative value if the first file's path
  is less than the second, zero if the paths are the
  same and a positive value if the first files path
  is greater than the second file.
 */
- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2;

/*!
 @brief String representation of this file comparator.
 @return String representation of this file comparator
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoComparatorPathFileComparator)

/*!
 @brief Case-sensitive path comparator instance (see <code>IOCase.SENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse case-sensitive path comparator instance (see <code>IOCase.SENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_REVERSE, id<JavaUtilComparator>)

/*!
 @brief Case-insensitive path comparator instance (see <code>IOCase.INSENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_INSENSITIVE_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_INSENSITIVE_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse case-insensitive path comparator instance (see <code>IOCase.INSENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_INSENSITIVE_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_INSENSITIVE_REVERSE, id<JavaUtilComparator>)

/*!
 @brief System sensitive path comparator instance (see <code>IOCase.SYSTEM</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_SYSTEM_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_SYSTEM_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse system sensitive path comparator instance (see <code>IOCase.SYSTEM</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_get_PATH_SYSTEM_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorPathFileComparator, PATH_SYSTEM_REVERSE, id<JavaUtilComparator>)

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorPathFileComparator_init(OrgApacheCommonsIoComparatorPathFileComparator *self);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorPathFileComparator *new_OrgApacheCommonsIoComparatorPathFileComparator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorPathFileComparator *create_OrgApacheCommonsIoComparatorPathFileComparator_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoComparatorPathFileComparator *self, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorPathFileComparator *new_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorPathFileComparator *create_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoComparatorPathFileComparator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorPathFileComparator")
