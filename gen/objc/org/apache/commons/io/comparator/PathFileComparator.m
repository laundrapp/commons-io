//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/PathFileComparator.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/Comparator.h"
#include "org/apache/commons/io/IOCase.h"
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"
#include "org/apache/commons/io/comparator/PathFileComparator.h"
#include "org/apache/commons/io/comparator/ReverseComparator.h"

@interface OrgApacheCommonsIoComparatorPathFileComparator () {
 @public
  /*!
   @brief Whether the comparison is case sensitive.
   */
  OrgApacheCommonsIoIOCase *caseSensitivity_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoComparatorPathFileComparator, caseSensitivity_, OrgApacheCommonsIoIOCase *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoComparatorPathFileComparator)

id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_COMPARATOR;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_REVERSE;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_COMPARATOR;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_REVERSE;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_COMPARATOR;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_REVERSE;

@implementation OrgApacheCommonsIoComparatorPathFileComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsIoComparatorPathFileComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(self, caseSensitivity);
  return self;
}

- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2 {
  return [((OrgApacheCommonsIoIOCase *) nil_chk(caseSensitivity_)) checkCompareToWithNSString:[((JavaIoFile *) nil_chk(file1)) getPath] withNSString:[((JavaIoFile *) nil_chk(file2)) getPath]];
}

- (NSString *)description {
  return JreStrcat("$$@C", [super description], @"[caseSensitivity=", caseSensitivity_, ']');
}

- (void)dealloc {
  RELEASE_(caseSensitivity_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoComparatorPathFileComparator class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_COMPARATOR, new_OrgApacheCommonsIoComparatorPathFileComparator_init());
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_REVERSE, new_OrgApacheCommonsIoComparatorReverseComparator_initWithJavaUtilComparator_(OrgApacheCommonsIoComparatorPathFileComparator_PATH_COMPARATOR));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_COMPARATOR, new_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(JreLoadStatic(OrgApacheCommonsIoIOCase, INSENSITIVE)));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_REVERSE, new_OrgApacheCommonsIoComparatorReverseComparator_initWithJavaUtilComparator_(OrgApacheCommonsIoComparatorPathFileComparator_PATH_INSENSITIVE_COMPARATOR));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_COMPARATOR, new_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM)));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_REVERSE, new_OrgApacheCommonsIoComparatorReverseComparator_initWithJavaUtilComparator_(OrgApacheCommonsIoComparatorPathFileComparator_PATH_SYSTEM_COMPARATOR));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoComparatorPathFileComparator)
  }
}

@end

void OrgApacheCommonsIoComparatorPathFileComparator_init(OrgApacheCommonsIoComparatorPathFileComparator *self) {
  OrgApacheCommonsIoComparatorAbstractFileComparator_init(self);
  JreStrongAssign(&self->caseSensitivity_, JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE));
}

OrgApacheCommonsIoComparatorPathFileComparator *new_OrgApacheCommonsIoComparatorPathFileComparator_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoComparatorPathFileComparator, init)
}

OrgApacheCommonsIoComparatorPathFileComparator *create_OrgApacheCommonsIoComparatorPathFileComparator_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoComparatorPathFileComparator, init)
}

void OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoComparatorPathFileComparator *self, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoComparatorAbstractFileComparator_init(self);
  JreStrongAssign(&self->caseSensitivity_, caseSensitivity == nil ? JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE) : caseSensitivity);
}

OrgApacheCommonsIoComparatorPathFileComparator *new_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoComparatorPathFileComparator, initWithOrgApacheCommonsIoIOCase_, caseSensitivity)
}

OrgApacheCommonsIoComparatorPathFileComparator *create_OrgApacheCommonsIoComparatorPathFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoComparatorPathFileComparator, initWithOrgApacheCommonsIoIOCase_, caseSensitivity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoComparatorPathFileComparator)
