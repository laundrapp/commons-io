//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/SizeFileComparator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorSizeFileComparator")
#ifdef RESTRICT_OrgApacheCommonsIoComparatorSizeFileComparator
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorSizeFileComparator 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorSizeFileComparator 1
#endif
#undef RESTRICT_OrgApacheCommonsIoComparatorSizeFileComparator

#if !defined (OrgApacheCommonsIoComparatorSizeFileComparator_) && (INCLUDE_ALL_OrgApacheCommonsIoComparatorSizeFileComparator || defined(INCLUDE_OrgApacheCommonsIoComparatorSizeFileComparator))
#define OrgApacheCommonsIoComparatorSizeFileComparator_

#define RESTRICT_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#define INCLUDE_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@protocol JavaUtilComparator;

/*!
 @brief Compare the <b>length/size</b> of two files for order (see 
 <code>File.length()</code> and <code>FileUtils.sizeOfDirectory(File)</code>).
 <p>
  This comparator can be used to sort lists or arrays of files
  by their length/size. 
 <p>
  Example of sorting a list of files using the 
 <code>SIZE_COMPARATOR</code> singleton instance: 
 @code

        List&lt;File&gt; list = ...
        SizeFileComparator.SIZE_COMPARATOR.sort(list); 
  
@endcode
  <p>
  Example of doing a <i>reverse</i> sort of an array of files using the 
 <code>SIZE_REVERSE</code> singleton instance: 
 @code

        File[] array = ...
        SizeFileComparator.SIZE_REVERSE.sort(array); 
  
@endcode
  <p>
  <strong>N.B.</strong> Directories are treated as <b>zero size</b> unless 
 <code>sumDirectoryContents</code> is <code>true</code>.
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoComparatorSizeFileComparator : OrgApacheCommonsIoComparatorAbstractFileComparator < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a file size comparator instance (directories treated as zero size).
 */
- (instancetype)init;

/*!
 @brief Construct a file size comparator instance specifying whether the size of
  the directory contents should be aggregated.
 <p>
  If the <code>sumDirectoryContents</code> is <code>true</code> The size of
  directories is calculated using  <code>FileUtils.sizeOfDirectory(File)</code>.
 @param sumDirectoryContents<code>true</code>  if the sum of the directoryies contents   should be calculated, otherwise 
 <code>false</code>  if directories should be treated   as size zero (see 
 <code>FileUtils.sizeOfDirectory(File)</code> ).
 */
- (instancetype)initWithBoolean:(jboolean)sumDirectoryContents;

/*!
 @brief Compare the length of two files.
 @param file1 The first file to compare
 @param file2 The second file to compare
 @return a negative value if the first file's length
  is less than the second, zero if the lengths are the
  same and a positive value if the first files length
  is greater than the second file.
 */
- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2;

/*!
 @brief String representation of this file comparator.
 @return String representation of this file comparator
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoComparatorSizeFileComparator)

/*!
 @brief Size comparator instance - directories are treated as zero size
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_get_SIZE_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_SIZE_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorSizeFileComparator, SIZE_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse size comparator instance - directories are treated as zero size
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_get_SIZE_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_SIZE_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorSizeFileComparator, SIZE_REVERSE, id<JavaUtilComparator>)

/*!
 @brief Size comparator instance which sums the size of a directory's contents
  using <code>FileUtils.sizeOfDirectory(File)</code>
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_get_SIZE_SUMDIR_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_SIZE_SUMDIR_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorSizeFileComparator, SIZE_SUMDIR_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse size comparator instance which sums the size of a directory's contents
  using <code>FileUtils.sizeOfDirectory(File)</code>
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_get_SIZE_SUMDIR_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorSizeFileComparator_SIZE_SUMDIR_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorSizeFileComparator, SIZE_SUMDIR_REVERSE, id<JavaUtilComparator>)

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorSizeFileComparator_init(OrgApacheCommonsIoComparatorSizeFileComparator *self);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorSizeFileComparator *new_OrgApacheCommonsIoComparatorSizeFileComparator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorSizeFileComparator *create_OrgApacheCommonsIoComparatorSizeFileComparator_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorSizeFileComparator_initWithBoolean_(OrgApacheCommonsIoComparatorSizeFileComparator *self, jboolean sumDirectoryContents);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorSizeFileComparator *new_OrgApacheCommonsIoComparatorSizeFileComparator_initWithBoolean_(jboolean sumDirectoryContents) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorSizeFileComparator *create_OrgApacheCommonsIoComparatorSizeFileComparator_initWithBoolean_(jboolean sumDirectoryContents);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoComparatorSizeFileComparator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorSizeFileComparator")
