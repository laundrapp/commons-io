//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/CompositeFileComparator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"
#include "org/apache/commons/io/comparator/CompositeFileComparator.h"

@interface OrgApacheCommonsIoComparatorCompositeFileComparator () {
 @public
  IOSObjectArray *delegates_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoComparatorCompositeFileComparator, delegates_, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsIoComparatorCompositeFileComparator_get_NO_COMPARATORS(void);
static IOSObjectArray *OrgApacheCommonsIoComparatorCompositeFileComparator_NO_COMPARATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorCompositeFileComparator, NO_COMPARATORS, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoComparatorCompositeFileComparator)

@implementation OrgApacheCommonsIoComparatorCompositeFileComparator

- (instancetype)initWithJavaUtilComparatorArray:(IOSObjectArray *)delegates {
  OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaUtilComparatorArray_(self, delegates);
  return self;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)delegates {
  OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaLangIterable_(self, delegates);
  return self;
}

- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2 {
  jint result = 0;
  {
    IOSObjectArray *a__ = delegates_;
    id<JavaUtilComparator> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilComparator> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilComparator> delegate = *b__++;
      result = [((id<JavaUtilComparator>) nil_chk(delegate)) compareWithId:file1 withId:file2];
      if (result != 0) {
        break;
      }
    }
  }
  return result;
}

- (NSString *)description {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  [builder appendWithNSString:[super description]];
  [builder appendWithChar:'{'];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(delegates_))->size_; i++) {
    if (i > 0) {
      [builder appendWithChar:','];
    }
    [builder appendWithId:IOSObjectArray_Get(delegates_, i)];
  }
  [builder appendWithChar:'}'];
  return [builder description];
}

- (void)dealloc {
  RELEASE_(delegates_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoComparatorCompositeFileComparator class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorCompositeFileComparator_NO_COMPARATORS, [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:JavaUtilComparator_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoComparatorCompositeFileComparator)
  }
}

@end

void OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaUtilComparatorArray_(OrgApacheCommonsIoComparatorCompositeFileComparator *self, IOSObjectArray *delegates) {
  OrgApacheCommonsIoComparatorAbstractFileComparator_init(self);
  if (delegates == nil) {
    JreStrongAssign(&self->delegates_, OrgApacheCommonsIoComparatorCompositeFileComparator_NO_COMPARATORS);
  }
  else {
    JreStrongAssign(&self->delegates_, [IOSObjectArray arrayWithLength:delegates->size_ type:JavaUtilComparator_class_()]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(delegates, 0, self->delegates_, 0, delegates->size_);
  }
}

OrgApacheCommonsIoComparatorCompositeFileComparator *new_OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaUtilComparatorArray_(IOSObjectArray *delegates) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoComparatorCompositeFileComparator, initWithJavaUtilComparatorArray_, delegates)
}

OrgApacheCommonsIoComparatorCompositeFileComparator *create_OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaUtilComparatorArray_(IOSObjectArray *delegates) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoComparatorCompositeFileComparator, initWithJavaUtilComparatorArray_, delegates)
}

void OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaLangIterable_(OrgApacheCommonsIoComparatorCompositeFileComparator *self, id<JavaLangIterable> delegates) {
  OrgApacheCommonsIoComparatorAbstractFileComparator_init(self);
  if (delegates == nil) {
    JreStrongAssign(&self->delegates_, OrgApacheCommonsIoComparatorCompositeFileComparator_NO_COMPARATORS);
  }
  else {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    for (id<JavaUtilComparator> __strong comparator in delegates) {
      [list addWithId:comparator];
    }
    JreStrongAssign(&self->delegates_, [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:JavaUtilComparator_class_()]]);
  }
}

OrgApacheCommonsIoComparatorCompositeFileComparator *new_OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaLangIterable_(id<JavaLangIterable> delegates) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoComparatorCompositeFileComparator, initWithJavaLangIterable_, delegates)
}

OrgApacheCommonsIoComparatorCompositeFileComparator *create_OrgApacheCommonsIoComparatorCompositeFileComparator_initWithJavaLangIterable_(id<JavaLangIterable> delegates) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoComparatorCompositeFileComparator, initWithJavaLangIterable_, delegates)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoComparatorCompositeFileComparator)
