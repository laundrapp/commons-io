//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/Comparator.h"
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"
#include "org/apache/commons/io/comparator/DirectoryFileComparator.h"
#include "org/apache/commons/io/comparator/ReverseComparator.h"

__attribute__((unused)) static jint OrgApacheCommonsIoComparatorDirectoryFileComparator_getTypeWithJavaIoFile_(OrgApacheCommonsIoComparatorDirectoryFileComparator *self, JavaIoFile *file);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoComparatorDirectoryFileComparator)

id<JavaUtilComparator> OrgApacheCommonsIoComparatorDirectoryFileComparator_DIRECTORY_COMPARATOR;
id<JavaUtilComparator> OrgApacheCommonsIoComparatorDirectoryFileComparator_DIRECTORY_REVERSE;

@implementation OrgApacheCommonsIoComparatorDirectoryFileComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  OrgApacheCommonsIoComparatorDirectoryFileComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2 {
  return OrgApacheCommonsIoComparatorDirectoryFileComparator_getTypeWithJavaIoFile_(self, file1) - OrgApacheCommonsIoComparatorDirectoryFileComparator_getTypeWithJavaIoFile_(self, file2);
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoComparatorDirectoryFileComparator class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorDirectoryFileComparator_DIRECTORY_COMPARATOR, new_OrgApacheCommonsIoComparatorDirectoryFileComparator_init());
    JreStrongAssignAndConsume(&OrgApacheCommonsIoComparatorDirectoryFileComparator_DIRECTORY_REVERSE, new_OrgApacheCommonsIoComparatorReverseComparator_initWithJavaUtilComparator_(OrgApacheCommonsIoComparatorDirectoryFileComparator_DIRECTORY_COMPARATOR));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoComparatorDirectoryFileComparator)
  }
}

@end

void OrgApacheCommonsIoComparatorDirectoryFileComparator_init(OrgApacheCommonsIoComparatorDirectoryFileComparator *self) {
  OrgApacheCommonsIoComparatorAbstractFileComparator_init(self);
}

OrgApacheCommonsIoComparatorDirectoryFileComparator *new_OrgApacheCommonsIoComparatorDirectoryFileComparator_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoComparatorDirectoryFileComparator, init)
}

OrgApacheCommonsIoComparatorDirectoryFileComparator *create_OrgApacheCommonsIoComparatorDirectoryFileComparator_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoComparatorDirectoryFileComparator, init)
}

jint OrgApacheCommonsIoComparatorDirectoryFileComparator_getTypeWithJavaIoFile_(OrgApacheCommonsIoComparatorDirectoryFileComparator *self, JavaIoFile *file) {
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    return 1;
  }
  else {
    return 2;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoComparatorDirectoryFileComparator)
