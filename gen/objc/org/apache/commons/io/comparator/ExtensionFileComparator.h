//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/comparator/ExtensionFileComparator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorExtensionFileComparator")
#ifdef RESTRICT_OrgApacheCommonsIoComparatorExtensionFileComparator
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorExtensionFileComparator 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoComparatorExtensionFileComparator 1
#endif
#undef RESTRICT_OrgApacheCommonsIoComparatorExtensionFileComparator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoComparatorExtensionFileComparator_) && (INCLUDE_ALL_OrgApacheCommonsIoComparatorExtensionFileComparator || defined(INCLUDE_OrgApacheCommonsIoComparatorExtensionFileComparator))
#define OrgApacheCommonsIoComparatorExtensionFileComparator_

#define RESTRICT_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#define INCLUDE_OrgApacheCommonsIoComparatorAbstractFileComparator 1
#include "org/apache/commons/io/comparator/AbstractFileComparator.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@protocol JavaUtilComparator;

/*!
 @brief Compare the file name <b>extensions</b> for order
  (see <code>FilenameUtils.getExtension(String)</code>).
 <p>
  This comparator can be used to sort lists or arrays of files
  by their file extension either in a case-sensitive, case-insensitive or
  system dependant case sensitive way. A number of singleton instances
  are provided for the various case sensitivity options (using <code>IOCase</code>)
  and the reverse of those options. 
 <p>
  Example of a <i>case-sensitive</i> file extension sort using the 
 <code>EXTENSION_COMPARATOR</code> singleton instance: 
 @code

        List&lt;File&gt; list = ...
        ExtensionFileComparator.EXTENSION_COMPARATOR.sort(list); 
  
@endcode
  <p>
  Example of a <i>reverse case-insensitive</i> file extension sort using the 
 <code>EXTENSION_INSENSITIVE_REVERSE</code> singleton instance: 
 @code

        File[] array = ...
        ExtensionFileComparator.EXTENSION_INSENSITIVE_REVERSE.sort(array); 
  
@endcode
  <p>
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoComparatorExtensionFileComparator : OrgApacheCommonsIoComparatorAbstractFileComparator < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a case sensitive file extension comparator instance.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a file extension comparator instance with the specified case-sensitivity.
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 */
- (instancetype __nonnull)initWithOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Compare the extensions of two files the specified case sensitivity.
 @param file1 The first file to compare
 @param file2 The second file to compare
 @return a negative value if the first file's extension
  is less than the second, zero if the extensions are the
  same and a positive value if the first files extension
  is greater than the second file.
 */
- (jint)compareWithId:(JavaIoFile *)file1
               withId:(JavaIoFile *)file2;

/*!
 @brief String representation of this file comparator.
 @return String representation of this file comparator
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoComparatorExtensionFileComparator)

/*!
 @brief Case-sensitive extension comparator instance (see <code>IOCase.SENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse case-sensitive extension comparator instance (see <code>IOCase.SENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_REVERSE, id<JavaUtilComparator>)

/*!
 @brief Case-insensitive extension comparator instance (see <code>IOCase.INSENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_INSENSITIVE_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_INSENSITIVE_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_INSENSITIVE_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse case-insensitive extension comparator instance (see <code>IOCase.INSENSITIVE</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_INSENSITIVE_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_INSENSITIVE_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_INSENSITIVE_REVERSE, id<JavaUtilComparator>)

/*!
 @brief System sensitive extension comparator instance (see <code>IOCase.SYSTEM</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_SYSTEM_COMPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_SYSTEM_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_SYSTEM_COMPARATOR, id<JavaUtilComparator>)

/*!
 @brief Reverse system sensitive path comparator instance (see <code>IOCase.SYSTEM</code>)
 */
inline id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_get_EXTENSION_SYSTEM_REVERSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> OrgApacheCommonsIoComparatorExtensionFileComparator_EXTENSION_SYSTEM_REVERSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoComparatorExtensionFileComparator, EXTENSION_SYSTEM_REVERSE, id<JavaUtilComparator>)

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorExtensionFileComparator_init(OrgApacheCommonsIoComparatorExtensionFileComparator *self);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorExtensionFileComparator *new_OrgApacheCommonsIoComparatorExtensionFileComparator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorExtensionFileComparator *create_OrgApacheCommonsIoComparatorExtensionFileComparator_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoComparatorExtensionFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoComparatorExtensionFileComparator *self, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorExtensionFileComparator *new_OrgApacheCommonsIoComparatorExtensionFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoComparatorExtensionFileComparator *create_OrgApacheCommonsIoComparatorExtensionFileComparator_initWithOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoComparatorExtensionFileComparator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoComparatorExtensionFileComparator")
