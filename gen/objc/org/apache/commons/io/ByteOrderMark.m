//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/ByteOrderMark.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "org/apache/commons/io/ByteOrderMark.h"

@interface OrgApacheCommonsIoByteOrderMark () {
 @public
  NSString *charsetName_;
  IOSIntArray *bytes_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoByteOrderMark, charsetName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoByteOrderMark, bytes_, IOSIntArray *)

inline jlong OrgApacheCommonsIoByteOrderMark_get_serialVersionUID(void);
#define OrgApacheCommonsIoByteOrderMark_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoByteOrderMark, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoByteOrderMark)

OrgApacheCommonsIoByteOrderMark *OrgApacheCommonsIoByteOrderMark_UTF_8;
OrgApacheCommonsIoByteOrderMark *OrgApacheCommonsIoByteOrderMark_UTF_16BE;
OrgApacheCommonsIoByteOrderMark *OrgApacheCommonsIoByteOrderMark_UTF_16LE;
OrgApacheCommonsIoByteOrderMark *OrgApacheCommonsIoByteOrderMark_UTF_32BE;
OrgApacheCommonsIoByteOrderMark *OrgApacheCommonsIoByteOrderMark_UTF_32LE;

@implementation OrgApacheCommonsIoByteOrderMark

- (instancetype)initWithNSString:(NSString *)charsetName
                    withIntArray:(IOSIntArray *)bytes {
  OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(self, charsetName, bytes);
  return self;
}

- (NSString *)getCharsetName {
  return charsetName_;
}

- (jint)length {
  return ((IOSIntArray *) nil_chk(bytes_))->size_;
}

- (jint)getWithInt:(jint)pos {
  return IOSIntArray_Get(nil_chk(bytes_), pos);
}

- (IOSByteArray *)getBytes {
  IOSByteArray *copy_ = [IOSByteArray arrayWithLength:((IOSIntArray *) nil_chk(bytes_))->size_];
  for (jint i = 0; i < bytes_->size_; i++) {
    *IOSByteArray_GetRef(copy_, i) = (jbyte) IOSIntArray_Get(bytes_, i);
  }
  return copy_;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgApacheCommonsIoByteOrderMark class]])) {
    return false;
  }
  OrgApacheCommonsIoByteOrderMark *bom = (OrgApacheCommonsIoByteOrderMark *) cast_chk(obj, [OrgApacheCommonsIoByteOrderMark class]);
  if (((IOSIntArray *) nil_chk(bytes_))->size_ != [((OrgApacheCommonsIoByteOrderMark *) nil_chk(bom)) length]) {
    return false;
  }
  for (jint i = 0; i < bytes_->size_; i++) {
    if (IOSIntArray_Get(bytes_, i) != [bom getWithInt:i]) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  jint hashCode = ((jint) [[self java_getClass] hash]);
  {
    IOSIntArray *a__ = bytes_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint b = *b__++;
      hashCode += b;
    }
  }
  return hashCode;
}

- (NSString *)description {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  [builder appendWithNSString:[[self java_getClass] getSimpleName]];
  [builder appendWithChar:'['];
  [builder appendWithNSString:charsetName_];
  [builder appendWithNSString:@": "];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(bytes_))->size_; i++) {
    if (i > 0) {
      [builder appendWithNSString:@","];
    }
    [builder appendWithNSString:@"0x"];
    [builder appendWithNSString:[((NSString *) nil_chk(JavaLangInteger_toHexStringWithInt_((jint) 0xFF & IOSIntArray_Get(bytes_, i)))) uppercaseString]];
  }
  [builder appendWithChar:']'];
  return [builder description];
}

- (void)dealloc {
  RELEASE_(charsetName_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoByteOrderMark class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsIoByteOrderMark_UTF_8, new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(@"UTF-8", [IOSIntArray arrayWithInts:(jint[]){ (jint) 0xEF, (jint) 0xBB, (jint) 0xBF } count:3]));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoByteOrderMark_UTF_16BE, new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(@"UTF-16BE", [IOSIntArray arrayWithInts:(jint[]){ (jint) 0xFE, (jint) 0xFF } count:2]));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoByteOrderMark_UTF_16LE, new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(@"UTF-16LE", [IOSIntArray arrayWithInts:(jint[]){ (jint) 0xFF, (jint) 0xFE } count:2]));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoByteOrderMark_UTF_32BE, new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(@"UTF-32BE", [IOSIntArray arrayWithInts:(jint[]){ (jint) 0x00, (jint) 0x00, (jint) 0xFE, (jint) 0xFF } count:4]));
    JreStrongAssignAndConsume(&OrgApacheCommonsIoByteOrderMark_UTF_32LE, new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(@"UTF-32LE", [IOSIntArray arrayWithInts:(jint[]){ (jint) 0xFF, (jint) 0xFE, (jint) 0x00, (jint) 0x00 } count:4]));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoByteOrderMark)
  }
}

@end

void OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(OrgApacheCommonsIoByteOrderMark *self, NSString *charsetName, IOSIntArray *bytes) {
  NSObject_init(self);
  if (charsetName == nil || [charsetName java_length] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No charsetName specified");
  }
  if (bytes == nil || bytes->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No bytes specified");
  }
  JreStrongAssign(&self->charsetName_, charsetName);
  JreStrongAssignAndConsume(&self->bytes_, [IOSIntArray newArrayWithLength:bytes->size_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, self->bytes_, 0, bytes->size_);
}

OrgApacheCommonsIoByteOrderMark *new_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(NSString *charsetName, IOSIntArray *bytes) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoByteOrderMark, initWithNSString_withIntArray_, charsetName, bytes)
}

OrgApacheCommonsIoByteOrderMark *create_OrgApacheCommonsIoByteOrderMark_initWithNSString_withIntArray_(NSString *charsetName, IOSIntArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoByteOrderMark, initWithNSString_withIntArray_, charsetName, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoByteOrderMark)
