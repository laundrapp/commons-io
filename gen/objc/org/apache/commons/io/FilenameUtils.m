//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FilenameUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Stack.h"
#include "org/apache/commons/io/FilenameUtils.h"
#include "org/apache/commons/io/IOCase.h"

/*!
 @brief The Unix separator character.
 */
inline jchar OrgApacheCommonsIoFilenameUtils_get_UNIX_SEPARATOR(void);
#define OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR '/'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFilenameUtils, UNIX_SEPARATOR, jchar)

/*!
 @brief The Windows separator character.
 */
inline jchar OrgApacheCommonsIoFilenameUtils_get_WINDOWS_SEPARATOR(void);
#define OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR '\\'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFilenameUtils, WINDOWS_SEPARATOR, jchar)

/*!
 @brief The system separator character.
 */
inline jchar OrgApacheCommonsIoFilenameUtils_get_SYSTEM_SEPARATOR(void);
static jchar OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheCommonsIoFilenameUtils, SYSTEM_SEPARATOR, jchar)

/*!
 @brief The separator character that is the opposite of the system separator.
 */
inline jchar OrgApacheCommonsIoFilenameUtils_get_OTHER_SEPARATOR(void);
static jchar OrgApacheCommonsIoFilenameUtils_OTHER_SEPARATOR;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheCommonsIoFilenameUtils, OTHER_SEPARATOR, jchar)

__attribute__((unused)) static jboolean OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(jchar ch);

__attribute__((unused)) static NSString *OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(NSString *filename, jchar separator, jboolean keepSeparator);

__attribute__((unused)) static NSString *OrgApacheCommonsIoFilenameUtils_doGetPathWithNSString_withInt_(NSString *filename, jint separatorAdd);

__attribute__((unused)) static NSString *OrgApacheCommonsIoFilenameUtils_doGetFullPathWithNSString_withBoolean_(NSString *filename, jboolean includeSeparator);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsIoFilenameUtils)

NSString *OrgApacheCommonsIoFilenameUtils_EXTENSION_SEPARATOR_STR;

@implementation OrgApacheCommonsIoFilenameUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  OrgApacheCommonsIoFilenameUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isSystemWindows {
  return OrgApacheCommonsIoFilenameUtils_isSystemWindows();
}

+ (NSString *)normalizeWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(filename);
}

+ (NSString *)normalizeWithNSString:(NSString *)filename
                        withBoolean:(jboolean)unixSeparator {
  return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_withBoolean_(filename, unixSeparator);
}

+ (NSString *)normalizeNoEndSeparatorWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_normalizeNoEndSeparatorWithNSString_(filename);
}

+ (NSString *)normalizeNoEndSeparatorWithNSString:(NSString *)filename
                                      withBoolean:(jboolean)unixSeparator {
  return OrgApacheCommonsIoFilenameUtils_normalizeNoEndSeparatorWithNSString_withBoolean_(filename, unixSeparator);
}

+ (NSString *)concatWithNSString:(NSString *)basePath
                    withNSString:(NSString *)fullFilenameToAdd {
  return OrgApacheCommonsIoFilenameUtils_concatWithNSString_withNSString_(basePath, fullFilenameToAdd);
}

+ (jboolean)directoryContainsWithNSString:(NSString *)canonicalParent
                             withNSString:(NSString *)canonicalChild {
  return OrgApacheCommonsIoFilenameUtils_directoryContainsWithNSString_withNSString_(canonicalParent, canonicalChild);
}

+ (NSString *)separatorsToUnixWithNSString:(NSString *)path {
  return OrgApacheCommonsIoFilenameUtils_separatorsToUnixWithNSString_(path);
}

+ (NSString *)separatorsToWindowsWithNSString:(NSString *)path {
  return OrgApacheCommonsIoFilenameUtils_separatorsToWindowsWithNSString_(path);
}

+ (NSString *)separatorsToSystemWithNSString:(NSString *)path {
  return OrgApacheCommonsIoFilenameUtils_separatorsToSystemWithNSString_(path);
}

+ (jint)getPrefixLengthWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(filename);
}

+ (jint)indexOfLastSeparatorWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(filename);
}

+ (jint)indexOfExtensionWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename);
}

+ (NSString *)getPrefixWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getPrefixWithNSString_(filename);
}

+ (NSString *)getPathWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getPathWithNSString_(filename);
}

+ (NSString *)getPathNoEndSeparatorWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getPathNoEndSeparatorWithNSString_(filename);
}

+ (NSString *)getFullPathWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getFullPathWithNSString_(filename);
}

+ (NSString *)getFullPathNoEndSeparatorWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getFullPathNoEndSeparatorWithNSString_(filename);
}

+ (NSString *)getNameWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getNameWithNSString_(filename);
}

+ (NSString *)getBaseNameWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getBaseNameWithNSString_(filename);
}

+ (NSString *)getExtensionWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_getExtensionWithNSString_(filename);
}

+ (NSString *)removeExtensionWithNSString:(NSString *)filename {
  return OrgApacheCommonsIoFilenameUtils_removeExtensionWithNSString_(filename);
}

+ (jboolean)equalsWithNSString:(NSString *)filename1
                  withNSString:(NSString *)filename2 {
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_(filename1, filename2);
}

+ (jboolean)equalsOnSystemWithNSString:(NSString *)filename1
                          withNSString:(NSString *)filename2 {
  return OrgApacheCommonsIoFilenameUtils_equalsOnSystemWithNSString_withNSString_(filename1, filename2);
}

+ (jboolean)equalsNormalizedWithNSString:(NSString *)filename1
                            withNSString:(NSString *)filename2 {
  return OrgApacheCommonsIoFilenameUtils_equalsNormalizedWithNSString_withNSString_(filename1, filename2);
}

+ (jboolean)equalsNormalizedOnSystemWithNSString:(NSString *)filename1
                                    withNSString:(NSString *)filename2 {
  return OrgApacheCommonsIoFilenameUtils_equalsNormalizedOnSystemWithNSString_withNSString_(filename1, filename2);
}

+ (jboolean)equalsWithNSString:(NSString *)filename1
                  withNSString:(NSString *)filename2
                   withBoolean:(jboolean)normalized
  withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(filename1, filename2, normalized, caseSensitivity);
}

+ (jboolean)isExtensionWithNSString:(NSString *)filename
                       withNSString:(NSString *)extension {
  return OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withNSString_(filename, extension);
}

+ (jboolean)isExtensionWithNSString:(NSString *)filename
                  withNSStringArray:(IOSObjectArray *)extensions {
  return OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withNSStringArray_(filename, extensions);
}

+ (jboolean)isExtensionWithNSString:(NSString *)filename
             withJavaUtilCollection:(id<JavaUtilCollection>)extensions {
  return OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withJavaUtilCollection_(filename, extensions);
}

+ (jboolean)wildcardMatchWithNSString:(NSString *)filename
                         withNSString:(NSString *)wildcardMatcher {
  return OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_(filename, wildcardMatcher);
}

+ (jboolean)wildcardMatchOnSystemWithNSString:(NSString *)filename
                                 withNSString:(NSString *)wildcardMatcher {
  return OrgApacheCommonsIoFilenameUtils_wildcardMatchOnSystemWithNSString_withNSString_(filename, wildcardMatcher);
}

+ (jboolean)wildcardMatchWithNSString:(NSString *)filename
                         withNSString:(NSString *)wildcardMatcher
         withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  return OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(filename, wildcardMatcher, caseSensitivity);
}

+ (IOSObjectArray *)splitOnTokensWithNSString:(NSString *)text {
  return OrgApacheCommonsIoFilenameUtils_splitOnTokensWithNSString_(text);
}

+ (void)initialize {
  if (self == [OrgApacheCommonsIoFilenameUtils class]) {
    JreStrongAssign(&OrgApacheCommonsIoFilenameUtils_EXTENSION_SEPARATOR_STR, JavaLangCharacter_toStringWithChar_(OrgApacheCommonsIoFilenameUtils_EXTENSION_SEPARATOR));
    OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR = JreLoadStatic(JavaIoFile, separatorChar);
    {
      if (OrgApacheCommonsIoFilenameUtils_isSystemWindows()) {
        OrgApacheCommonsIoFilenameUtils_OTHER_SEPARATOR = OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR;
      }
      else {
        OrgApacheCommonsIoFilenameUtils_OTHER_SEPARATOR = OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR;
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsIoFilenameUtils)
  }
}

@end

void OrgApacheCommonsIoFilenameUtils_init(OrgApacheCommonsIoFilenameUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsIoFilenameUtils *new_OrgApacheCommonsIoFilenameUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilenameUtils, init)
}

OrgApacheCommonsIoFilenameUtils *create_OrgApacheCommonsIoFilenameUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilenameUtils, init)
}

jboolean OrgApacheCommonsIoFilenameUtils_isSystemWindows() {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR == OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR;
}

jboolean OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(jchar ch) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return ch == OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR || ch == OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR;
}

NSString *OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(filename, OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR, true);
}

NSString *OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_withBoolean_(NSString *filename, jboolean unixSeparator) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  jchar separator = unixSeparator ? OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR : OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR;
  return OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(filename, separator, true);
}

NSString *OrgApacheCommonsIoFilenameUtils_normalizeNoEndSeparatorWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(filename, OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR, false);
}

NSString *OrgApacheCommonsIoFilenameUtils_normalizeNoEndSeparatorWithNSString_withBoolean_(NSString *filename, jboolean unixSeparator) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  jchar separator = unixSeparator ? OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR : OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR;
  return OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(filename, separator, false);
}

NSString *OrgApacheCommonsIoFilenameUtils_doNormalizeWithNSString_withChar_withBoolean_(NSString *filename, jchar separator, jboolean keepSeparator) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint size = [filename java_length];
  if (size == 0) {
    return filename;
  }
  jint prefix = OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(filename);
  if (prefix < 0) {
    return nil;
  }
  IOSCharArray *array = [IOSCharArray arrayWithLength:size + 2];
  [filename java_getChars:0 sourceEnd:[filename java_length] destination:array destinationBegin:0];
  jchar otherSeparator = separator == OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR ? OrgApacheCommonsIoFilenameUtils_OTHER_SEPARATOR : OrgApacheCommonsIoFilenameUtils_SYSTEM_SEPARATOR;
  for (jint i = 0; i < array->size_; i++) {
    if (IOSCharArray_Get(array, i) == otherSeparator) {
      *IOSCharArray_GetRef(array, i) = separator;
    }
  }
  jboolean lastIsDirectory = true;
  if (IOSCharArray_Get(array, size - 1) != separator) {
    *IOSCharArray_GetRef(array, size++) = separator;
    lastIsDirectory = false;
  }
  for (jint i = prefix + 1; i < size; i++) {
    if (IOSCharArray_Get(array, i) == separator && IOSCharArray_Get(array, i - 1) == separator) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, i, array, i - 1, size - i);
      size--;
      i--;
    }
  }
  for (jint i = prefix + 1; i < size; i++) {
    if (IOSCharArray_Get(array, i) == separator && IOSCharArray_Get(array, i - 1) == '.' && (i == prefix + 1 || IOSCharArray_Get(array, i - 2) == separator)) {
      if (i == size - 1) {
        lastIsDirectory = true;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, i + 1, array, i - 1, size - i);
      size -= 2;
      i--;
    }
  }
  for (jint i = prefix + 2; i < size; i++) {
    {
      if (IOSCharArray_Get(array, i) == separator && IOSCharArray_Get(array, i - 1) == '.' && IOSCharArray_Get(array, i - 2) == '.' && (i == prefix + 2 || IOSCharArray_Get(array, i - 3) == separator)) {
        if (i == prefix + 2) {
          return nil;
        }
        if (i == size - 1) {
          lastIsDirectory = true;
        }
        jint j;
        for (j = i - 4; j >= prefix; j--) {
          if (IOSCharArray_Get(array, j) == separator) {
            JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, i + 1, array, j + 1, size - i);
            size -= i - j;
            i = j + 1;
            goto continue_outer;
          }
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, i + 1, array, prefix, size - i);
        size -= i + 1 - prefix;
        i = prefix + 1;
      }
    }
    continue_outer: ;
  }
  if (size <= 0) {
    return @"";
  }
  if (size <= prefix) {
    return [NSString java_stringWithCharacters:array offset:0 length:size];
  }
  if (lastIsDirectory && keepSeparator) {
    return [NSString java_stringWithCharacters:array offset:0 length:size];
  }
  return [NSString java_stringWithCharacters:array offset:0 length:size - 1];
}

NSString *OrgApacheCommonsIoFilenameUtils_concatWithNSString_withNSString_(NSString *basePath, NSString *fullFilenameToAdd) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  jint prefix = OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(fullFilenameToAdd);
  if (prefix < 0) {
    return nil;
  }
  if (prefix > 0) {
    return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(fullFilenameToAdd);
  }
  if (basePath == nil) {
    return nil;
  }
  jint len = [basePath java_length];
  if (len == 0) {
    return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(fullFilenameToAdd);
  }
  jchar ch = [basePath charAtWithInt:len - 1];
  if (OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(ch)) {
    return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(JreStrcat("$$", basePath, fullFilenameToAdd));
  }
  else {
    return OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(JreStrcat("$C$", basePath, '/', fullFilenameToAdd));
  }
}

jboolean OrgApacheCommonsIoFilenameUtils_directoryContainsWithNSString_withNSString_(NSString *canonicalParent, NSString *canonicalChild) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (canonicalParent == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Directory must not be null");
  }
  if (canonicalChild == nil) {
    return false;
  }
  if ([((OrgApacheCommonsIoIOCase *) nil_chk(JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM))) checkEqualsWithNSString:canonicalParent withNSString:canonicalChild]) {
    return false;
  }
  return [JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM) checkStartsWithWithNSString:canonicalChild withNSString:canonicalParent];
}

NSString *OrgApacheCommonsIoFilenameUtils_separatorsToUnixWithNSString_(NSString *path) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (path == nil || [path java_indexOf:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR] == -1) {
    return path;
  }
  return [path java_replace:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR withChar:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR];
}

NSString *OrgApacheCommonsIoFilenameUtils_separatorsToWindowsWithNSString_(NSString *path) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (path == nil || [path java_indexOf:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR] == -1) {
    return path;
  }
  return [path java_replace:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR withChar:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR];
}

NSString *OrgApacheCommonsIoFilenameUtils_separatorsToSystemWithNSString_(NSString *path) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (path == nil) {
    return nil;
  }
  if (OrgApacheCommonsIoFilenameUtils_isSystemWindows()) {
    return OrgApacheCommonsIoFilenameUtils_separatorsToWindowsWithNSString_(path);
  }
  else {
    return OrgApacheCommonsIoFilenameUtils_separatorsToUnixWithNSString_(path);
  }
}

jint OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return -1;
  }
  jint len = [filename java_length];
  if (len == 0) {
    return 0;
  }
  jchar ch0 = [filename charAtWithInt:0];
  if (ch0 == ':') {
    return -1;
  }
  if (len == 1) {
    if (ch0 == '~') {
      return 2;
    }
    return OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(ch0) ? 1 : 0;
  }
  else {
    if (ch0 == '~') {
      jint posUnix = [filename java_indexOf:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR fromIndex:1];
      jint posWin = [filename java_indexOf:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR fromIndex:1];
      if (posUnix == -1 && posWin == -1) {
        return len + 1;
      }
      posUnix = posUnix == -1 ? posWin : posUnix;
      posWin = posWin == -1 ? posUnix : posWin;
      return JavaLangMath_minWithInt_withInt_(posUnix, posWin) + 1;
    }
    jchar ch1 = [filename charAtWithInt:1];
    if (ch1 == ':') {
      ch0 = JavaLangCharacter_toUpperCaseWithChar_(ch0);
      if (ch0 >= 'A' && ch0 <= 'Z') {
        if (len == 2 || OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_([filename charAtWithInt:2]) == false) {
          return 2;
        }
        return 3;
      }
      return -1;
    }
    else if (OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(ch0) && OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(ch1)) {
      jint posUnix = [filename java_indexOf:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR fromIndex:2];
      jint posWin = [filename java_indexOf:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR fromIndex:2];
      if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {
        return -1;
      }
      posUnix = posUnix == -1 ? posWin : posUnix;
      posWin = posWin == -1 ? posUnix : posWin;
      return JavaLangMath_minWithInt_withInt_(posUnix, posWin) + 1;
    }
    else {
      return OrgApacheCommonsIoFilenameUtils_isSeparatorWithChar_(ch0) ? 1 : 0;
    }
  }
}

jint OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return -1;
  }
  jint lastUnixPos = [filename java_lastIndexOf:OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR];
  jint lastWindowsPos = [filename java_lastIndexOf:OrgApacheCommonsIoFilenameUtils_WINDOWS_SEPARATOR];
  return JavaLangMath_maxWithInt_withInt_(lastUnixPos, lastWindowsPos);
}

jint OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return -1;
  }
  jint extensionPos = [filename java_lastIndexOf:OrgApacheCommonsIoFilenameUtils_EXTENSION_SEPARATOR];
  jint lastSeparator = OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(filename);
  return lastSeparator > extensionPos ? -1 : extensionPos;
}

NSString *OrgApacheCommonsIoFilenameUtils_getPrefixWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint len = OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(filename);
  if (len < 0) {
    return nil;
  }
  if (len > [filename java_length]) {
    return JreStrcat("$C", filename, OrgApacheCommonsIoFilenameUtils_UNIX_SEPARATOR);
  }
  return [filename java_substring:0 endIndex:len];
}

NSString *OrgApacheCommonsIoFilenameUtils_getPathWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doGetPathWithNSString_withInt_(filename, 1);
}

NSString *OrgApacheCommonsIoFilenameUtils_getPathNoEndSeparatorWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doGetPathWithNSString_withInt_(filename, 0);
}

NSString *OrgApacheCommonsIoFilenameUtils_doGetPathWithNSString_withInt_(NSString *filename, jint separatorAdd) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint prefix = OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(filename);
  if (prefix < 0) {
    return nil;
  }
  jint index = OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(filename);
  jint endIndex = index + separatorAdd;
  if (prefix >= [filename java_length] || index < 0 || prefix >= endIndex) {
    return @"";
  }
  return [filename java_substring:prefix endIndex:endIndex];
}

NSString *OrgApacheCommonsIoFilenameUtils_getFullPathWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doGetFullPathWithNSString_withBoolean_(filename, true);
}

NSString *OrgApacheCommonsIoFilenameUtils_getFullPathNoEndSeparatorWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_doGetFullPathWithNSString_withBoolean_(filename, false);
}

NSString *OrgApacheCommonsIoFilenameUtils_doGetFullPathWithNSString_withBoolean_(NSString *filename, jboolean includeSeparator) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint prefix = OrgApacheCommonsIoFilenameUtils_getPrefixLengthWithNSString_(filename);
  if (prefix < 0) {
    return nil;
  }
  if (prefix >= [filename java_length]) {
    if (includeSeparator) {
      return OrgApacheCommonsIoFilenameUtils_getPrefixWithNSString_(filename);
    }
    else {
      return filename;
    }
  }
  jint index = OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(filename);
  if (index < 0) {
    return [filename java_substring:0 endIndex:prefix];
  }
  jint end = index + (includeSeparator ? 1 : 0);
  if (end == 0) {
    end++;
  }
  return [filename java_substring:0 endIndex:end];
}

NSString *OrgApacheCommonsIoFilenameUtils_getNameWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint index = OrgApacheCommonsIoFilenameUtils_indexOfLastSeparatorWithNSString_(filename);
  return [filename java_substring:index + 1];
}

NSString *OrgApacheCommonsIoFilenameUtils_getBaseNameWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_removeExtensionWithNSString_(OrgApacheCommonsIoFilenameUtils_getNameWithNSString_(filename));
}

NSString *OrgApacheCommonsIoFilenameUtils_getExtensionWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint index = OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename);
  if (index == -1) {
    return @"";
  }
  else {
    return [filename java_substring:index + 1];
  }
}

NSString *OrgApacheCommonsIoFilenameUtils_removeExtensionWithNSString_(NSString *filename) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return nil;
  }
  jint index = OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename);
  if (index == -1) {
    return filename;
  }
  else {
    return [filename java_substring:0 endIndex:index];
  }
}

jboolean OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_(NSString *filename1, NSString *filename2) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(filename1, filename2, false, JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE));
}

jboolean OrgApacheCommonsIoFilenameUtils_equalsOnSystemWithNSString_withNSString_(NSString *filename1, NSString *filename2) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(filename1, filename2, false, JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM));
}

jboolean OrgApacheCommonsIoFilenameUtils_equalsNormalizedWithNSString_withNSString_(NSString *filename1, NSString *filename2) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(filename1, filename2, true, JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE));
}

jboolean OrgApacheCommonsIoFilenameUtils_equalsNormalizedOnSystemWithNSString_withNSString_(NSString *filename1, NSString *filename2) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(filename1, filename2, true, JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM));
}

jboolean OrgApacheCommonsIoFilenameUtils_equalsWithNSString_withNSString_withBoolean_withOrgApacheCommonsIoIOCase_(NSString *filename1, NSString *filename2, jboolean normalized, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename1 == nil || filename2 == nil) {
    return filename1 == nil && filename2 == nil;
  }
  if (normalized) {
    filename1 = OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(filename1);
    filename2 = OrgApacheCommonsIoFilenameUtils_normalizeWithNSString_(filename2);
    if (filename1 == nil || filename2 == nil) {
      @throw create_JavaLangNullPointerException_initWithNSString_(@"Error normalizing one or both of the file names");
    }
  }
  if (caseSensitivity == nil) {
    caseSensitivity = JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE);
  }
  return [((OrgApacheCommonsIoIOCase *) nil_chk(caseSensitivity)) checkEqualsWithNSString:filename1 withNSString:filename2];
}

jboolean OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withNSString_(NSString *filename, NSString *extension) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return false;
  }
  if (extension == nil || [extension java_length] == 0) {
    return OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename) == -1;
  }
  NSString *fileExt = OrgApacheCommonsIoFilenameUtils_getExtensionWithNSString_(filename);
  return [((NSString *) nil_chk(fileExt)) isEqual:extension];
}

jboolean OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withNSStringArray_(NSString *filename, IOSObjectArray *extensions) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return false;
  }
  if (extensions == nil || extensions->size_ == 0) {
    return OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename) == -1;
  }
  NSString *fileExt = OrgApacheCommonsIoFilenameUtils_getExtensionWithNSString_(filename);
  {
    IOSObjectArray *a__ = extensions;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *extension = *b__++;
      if ([((NSString *) nil_chk(fileExt)) isEqual:extension]) {
        return true;
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsIoFilenameUtils_isExtensionWithNSString_withJavaUtilCollection_(NSString *filename, id<JavaUtilCollection> extensions) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil) {
    return false;
  }
  if (extensions == nil || [extensions isEmpty]) {
    return OrgApacheCommonsIoFilenameUtils_indexOfExtensionWithNSString_(filename) == -1;
  }
  NSString *fileExt = OrgApacheCommonsIoFilenameUtils_getExtensionWithNSString_(filename);
  for (NSString * __strong extension in extensions) {
    if ([((NSString *) nil_chk(fileExt)) isEqual:extension]) {
      return true;
    }
  }
  return false;
}

jboolean OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_(NSString *filename, NSString *wildcardMatcher) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(filename, wildcardMatcher, JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE));
}

jboolean OrgApacheCommonsIoFilenameUtils_wildcardMatchOnSystemWithNSString_withNSString_(NSString *filename, NSString *wildcardMatcher) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  return OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(filename, wildcardMatcher, JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM));
}

jboolean OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(NSString *filename, NSString *wildcardMatcher, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if (filename == nil && wildcardMatcher == nil) {
    return true;
  }
  if (filename == nil || wildcardMatcher == nil) {
    return false;
  }
  if (caseSensitivity == nil) {
    caseSensitivity = JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE);
  }
  IOSObjectArray *wcs = OrgApacheCommonsIoFilenameUtils_splitOnTokensWithNSString_(wildcardMatcher);
  jboolean anyChars = false;
  jint textIdx = 0;
  jint wcsIdx = 0;
  JavaUtilStack *backtrack = create_JavaUtilStack_init();
  do {
    if ([backtrack size] > 0) {
      IOSIntArray *array = [backtrack pop];
      wcsIdx = IOSIntArray_Get(nil_chk(array), 0);
      textIdx = IOSIntArray_Get(array, 1);
      anyChars = true;
    }
    while (wcsIdx < ((IOSObjectArray *) nil_chk(wcs))->size_) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(wcs, wcsIdx))) isEqual:@"?"]) {
        textIdx++;
        if (textIdx > [filename java_length]) {
          break;
        }
        anyChars = false;
      }
      else if ([((NSString *) nil_chk(IOSObjectArray_Get(wcs, wcsIdx))) isEqual:@"*"]) {
        anyChars = true;
        if (wcsIdx == wcs->size_ - 1) {
          textIdx = [filename java_length];
        }
      }
      else {
        if (anyChars) {
          textIdx = [((OrgApacheCommonsIoIOCase *) nil_chk(caseSensitivity)) checkIndexOfWithNSString:filename withInt:textIdx withNSString:IOSObjectArray_Get(wcs, wcsIdx)];
          if (textIdx == -1) {
            break;
          }
          jint repeat = [caseSensitivity checkIndexOfWithNSString:filename withInt:textIdx + 1 withNSString:IOSObjectArray_Get(wcs, wcsIdx)];
          if (repeat >= 0) {
            [backtrack pushWithId:[IOSIntArray arrayWithInts:(jint[]){ wcsIdx, repeat } count:2]];
          }
        }
        else {
          if (![((OrgApacheCommonsIoIOCase *) nil_chk(caseSensitivity)) checkRegionMatchesWithNSString:filename withInt:textIdx withNSString:IOSObjectArray_Get(wcs, wcsIdx)]) {
            break;
          }
        }
        textIdx += [((NSString *) nil_chk(IOSObjectArray_Get(wcs, wcsIdx))) java_length];
        anyChars = false;
      }
      wcsIdx++;
    }
    if (wcsIdx == wcs->size_ && textIdx == [filename java_length]) {
      return true;
    }
  }
  while ([backtrack size] > 0);
  return false;
}

IOSObjectArray *OrgApacheCommonsIoFilenameUtils_splitOnTokensWithNSString_(NSString *text) {
  OrgApacheCommonsIoFilenameUtils_initialize();
  if ([((NSString *) nil_chk(text)) java_indexOf:'?'] == -1 && [text java_indexOf:'*'] == -1) {
    return [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:NSString_class_()];
  }
  IOSCharArray *array = [text java_toCharArray];
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(array))->size_; i++) {
    if (IOSCharArray_Get(array, i) == '?' || IOSCharArray_Get(array, i) == '*') {
      if ([buffer java_length] != 0) {
        [list addWithId:[buffer description]];
        [buffer setLengthWithInt:0];
      }
      if (IOSCharArray_Get(array, i) == '?') {
        [list addWithId:@"?"];
      }
      else if ([list isEmpty] || (i > 0 && [((NSString *) nil_chk([list getWithInt:[list size] - 1])) isEqual:@"*"] == false)) {
        [list addWithId:@"*"];
      }
    }
    else {
      [buffer appendWithChar:IOSCharArray_Get(array, i)];
    }
  }
  if ([buffer java_length] != 0) {
    [list addWithId:[buffer description]];
  }
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilenameUtils)
