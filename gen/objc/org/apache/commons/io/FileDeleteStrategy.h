//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/FileDeleteStrategy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy")
#ifdef RESTRICT_OrgApacheCommonsIoFileDeleteStrategy
#define INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFileDeleteStrategy
#ifdef INCLUDE_OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy
#define INCLUDE_OrgApacheCommonsIoFileDeleteStrategy 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoFileDeleteStrategy_) && (INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy || defined(INCLUDE_OrgApacheCommonsIoFileDeleteStrategy))
#define OrgApacheCommonsIoFileDeleteStrategy_

@class JavaIoFile;

/*!
 @brief Strategy for deleting files.
 <p>
  There is more than one way to delete a file.
  You may want to limit access to certain directories, to only delete
  directories if they are empty, or maybe to force deletion. 
 <p>
  This class captures the strategy to use and is designed for user subclassing.
 @version $Id$
 @since 1.3
 */
@interface OrgApacheCommonsIoFileDeleteStrategy : NSObject

#pragma mark Public

/*!
 @brief Deletes the file object, which may be a file or a directory.
 If the file does not exist, the method just returns. 
 <p>
  Subclass writers should override <code>doDelete(File)</code>, not this method.
 @param fileToDelete the file to delete, not null
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionif an error occurs during file deletion
 */
- (void)delete__WithJavaIoFile:(JavaIoFile *)fileToDelete;

/*!
 @brief Deletes the file object, which may be a file or a directory.
 All <code>IOException</code>s are caught and false returned instead.
  If the file does not exist or is null, true is returned. 
 <p>
  Subclass writers should override <code>doDelete(File)</code>, not this method.
 @param fileToDelete the file to delete, null returns true
 @return true if the file was deleted, or there was no such file
 */
- (jboolean)deleteQuietlyWithJavaIoFile:(JavaIoFile *)fileToDelete;

/*!
 @brief Gets a string describing the delete strategy.
 @return a string describing the delete strategy
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Restricted constructor.
 @param name the name by which the strategy is known
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Actually deletes the file object, which may be a file or a directory.
 <p>
  This method is designed for subclasses to override.
  The implementation may return either false or an <code>IOException</code>
  when deletion fails. The <code>delete(File)</code> and <code>deleteQuietly(File)</code>
  methods will handle either response appropriately.
  A check has been made to ensure that the file will exist. 
 <p>
  This implementation uses <code>File.delete()</code>.
 @param fileToDelete the file to delete, exists, not null
 @return true if the file was deleteds
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionif an error occurs during file deletion
 */
- (jboolean)doDeleteWithJavaIoFile:(JavaIoFile *)fileToDelete;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoFileDeleteStrategy)

/*!
 @brief The singleton instance for normal file deletion, which does not permit
  the deletion of directories that are not empty.
 */
inline OrgApacheCommonsIoFileDeleteStrategy *OrgApacheCommonsIoFileDeleteStrategy_get_NORMAL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy *OrgApacheCommonsIoFileDeleteStrategy_NORMAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileDeleteStrategy, NORMAL, OrgApacheCommonsIoFileDeleteStrategy *)

/*!
 @brief The singleton instance for forced file deletion, which always deletes,
  even if the file represents a non-empty directory.
 */
inline OrgApacheCommonsIoFileDeleteStrategy *OrgApacheCommonsIoFileDeleteStrategy_get_FORCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy *OrgApacheCommonsIoFileDeleteStrategy_FORCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFileDeleteStrategy, FORCE, OrgApacheCommonsIoFileDeleteStrategy *)

FOUNDATION_EXPORT void OrgApacheCommonsIoFileDeleteStrategy_initWithNSString_(OrgApacheCommonsIoFileDeleteStrategy *self, NSString *name);

FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy *new_OrgApacheCommonsIoFileDeleteStrategy_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy *create_OrgApacheCommonsIoFileDeleteStrategy_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileDeleteStrategy)

#endif

#if !defined (OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy_) && (INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy || defined(INCLUDE_OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy))
#define OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy_

@class JavaIoFile;

/*!
 @brief Force file deletion strategy.
 */
@interface OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy : OrgApacheCommonsIoFileDeleteStrategy

#pragma mark Protected

/*!
 @brief Deletes the file object.
 <p>
  This implementation uses <code>FileUtils.forceDelete() <code>
  if the file exists.
 @param fileToDelete the file to delete, not null
 @return Always returns <code>true</code>
 @throw NullPointerExceptionif the file is null
 @throw IOExceptionif an error occurs during file deletion
 */
- (jboolean)doDeleteWithJavaIoFile:(JavaIoFile *)fileToDelete;

#pragma mark Package-Private

/*!
 @brief Default Constructor
 */
- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy)

FOUNDATION_EXPORT void OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy_init(OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy *new_OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy *create_OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFileDeleteStrategy_ForceFileDeleteStrategy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFileDeleteStrategy")
