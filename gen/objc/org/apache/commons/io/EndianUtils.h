//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/EndianUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoEndianUtils")
#ifdef RESTRICT_OrgApacheCommonsIoEndianUtils
#define INCLUDE_ALL_OrgApacheCommonsIoEndianUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoEndianUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsIoEndianUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoEndianUtils_) && (INCLUDE_ALL_OrgApacheCommonsIoEndianUtils || defined(INCLUDE_OrgApacheCommonsIoEndianUtils))
#define OrgApacheCommonsIoEndianUtils_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief Utility code for dealing with different endian systems.
 <p>
  Different computer architectures adopt different conventions for
  byte ordering. In so-called "Little Endian" architectures (eg Intel),
  the low-order byte is stored in memory at the lowest address, and
  subsequent bytes at higher addresses. For "Big Endian" architectures
  (eg Motorola), the situation is reversed.
  This class helps you solve this incompatability. 
 <p>
  Origin of code: Excalibur
 @version $Id$
 - seealso: org.apache.commons.io.input.SwappedDataInputStream
 */
@interface OrgApacheCommonsIoEndianUtils : NSObject

#pragma mark Public

/*!
 @brief Instances should NOT be constructed in standard programming.
 */
- (instancetype __nonnull)init;

/*!
 @brief Reads a "double" value from a byte array at a given offset.The value is
  converted to the opposed endian system while reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jdouble)readSwappedDoubleWithByteArray:(IOSByteArray *)data
                                  withInt:(jint)offset;

/*!
 @brief Reads a "double" value from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jdouble)readSwappedDoubleWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads a "float" value from a byte array at a given offset.The value is
  converted to the opposed endian system while reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jfloat)readSwappedFloatWithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset;

/*!
 @brief Reads a "float" value from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jfloat)readSwappedFloatWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads a "int" value from a byte array at a given offset.The value is
  converted to the opposed endian system while reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jint)readSwappedIntegerWithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset;

/*!
 @brief Reads a "int" value from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jint)readSwappedIntegerWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads a "long" value from a byte array at a given offset.The value is
  converted to the opposed endian system while reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jlong)readSwappedLongWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset;

/*!
 @brief Reads a "long" value from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jlong)readSwappedLongWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads a "short" value from a byte array at a given offset.The value is
  converted to the opposed endian system while reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jshort)readSwappedShortWithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset;

/*!
 @brief Reads a "short" value from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jshort)readSwappedShortWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads an unsigned integer (32-bit) value from a byte array at a given
  offset.The value is converted to the opposed endian system while
  reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jlong)readSwappedUnsignedIntegerWithByteArray:(IOSByteArray *)data
                                         withInt:(jint)offset;

/*!
 @brief Reads a unsigned integer (32-bit) from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jlong)readSwappedUnsignedIntegerWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Reads an unsigned short (16-bit) value from a byte array at a given
  offset.The value is converted to the opposed endian system while
  reading.
 @param data source byte array
 @param offset starting offset in the byte array
 @return the value read
 */
+ (jint)readSwappedUnsignedShortWithByteArray:(IOSByteArray *)data
                                      withInt:(jint)offset;

/*!
 @brief Reads a unsigned short (16-bit) from an InputStream.The value is
  converted to the opposed endian system while reading.
 @param input source InputStream
 @return the value just read
 @throw IOExceptionin case of an I/O problem
 */
+ (jint)readSwappedUnsignedShortWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Converts a "double" value between endian systems.
 @param value value to convert
 @return the converted value
 */
+ (jdouble)swapDoubleWithDouble:(jdouble)value;

/*!
 @brief Converts a "float" value between endian systems.
 @param value value to convert
 @return the converted value
 */
+ (jfloat)swapFloatWithFloat:(jfloat)value;

/*!
 @brief Converts a "int" value between endian systems.
 @param value value to convert
 @return the converted value
 */
+ (jint)swapIntegerWithInt:(jint)value;

/*!
 @brief Converts a "long" value between endian systems.
 @param value value to convert
 @return the converted value
 */
+ (jlong)swapLongWithLong:(jlong)value;

/*!
 @brief Converts a "short" value between endian systems.
 @param value value to convert
 @return the converted value
 */
+ (jshort)swapShortWithShort:(jshort)value;

/*!
 @brief Writes a "double" value to a byte array at a given offset.The value is
  converted to the opposed endian system while writing.
 @param data target byte array
 @param offset starting offset in the byte array
 @param value value to write
 */
+ (void)writeSwappedDoubleWithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset
                             withDouble:(jdouble)value;

/*!
 @brief Writes a "double" value to an OutputStream.The value is
  converted to the opposed endian system while writing.
 @param output target OutputStream
 @param value value to write
 @throw IOExceptionin case of an I/O problem
 */
+ (void)writeSwappedDoubleWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                      withDouble:(jdouble)value;

/*!
 @brief Writes a "float" value to a byte array at a given offset.The value is
  converted to the opposed endian system while writing.
 @param data target byte array
 @param offset starting offset in the byte array
 @param value value to write
 */
+ (void)writeSwappedFloatWithByteArray:(IOSByteArray *)data
                               withInt:(jint)offset
                             withFloat:(jfloat)value;

/*!
 @brief Writes a "float" value to an OutputStream.The value is
  converted to the opposed endian system while writing.
 @param output target OutputStream
 @param value value to write
 @throw IOExceptionin case of an I/O problem
 */
+ (void)writeSwappedFloatWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                      withFloat:(jfloat)value;

/*!
 @brief Writes a "int" value to a byte array at a given offset.The value is
  converted to the opposed endian system while writing.
 @param data target byte array
 @param offset starting offset in the byte array
 @param value value to write
 */
+ (void)writeSwappedIntegerWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)offset
                                 withInt:(jint)value;

/*!
 @brief Writes a "int" value to an OutputStream.The value is
  converted to the opposed endian system while writing.
 @param output target OutputStream
 @param value value to write
 @throw IOExceptionin case of an I/O problem
 */
+ (void)writeSwappedIntegerWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                          withInt:(jint)value;

/*!
 @brief Writes a "long" value to a byte array at a given offset.The value is
  converted to the opposed endian system while writing.
 @param data target byte array
 @param offset starting offset in the byte array
 @param value value to write
 */
+ (void)writeSwappedLongWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset
                             withLong:(jlong)value;

/*!
 @brief Writes a "long" value to an OutputStream.The value is
  converted to the opposed endian system while writing.
 @param output target OutputStream
 @param value value to write
 @throw IOExceptionin case of an I/O problem
 */
+ (void)writeSwappedLongWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                      withLong:(jlong)value;

/*!
 @brief Writes a "short" value to a byte array at a given offset.The value is
  converted to the opposed endian system while writing.
 @param data target byte array
 @param offset starting offset in the byte array
 @param value value to write
 */
+ (void)writeSwappedShortWithByteArray:(IOSByteArray *)data
                               withInt:(jint)offset
                             withShort:(jshort)value;

/*!
 @brief Writes a "short" value to an OutputStream.The value is
  converted to the opposed endian system while writing.
 @param output target OutputStream
 @param value value to write
 @throw IOExceptionin case of an I/O problem
 */
+ (void)writeSwappedShortWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                      withShort:(jshort)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoEndianUtils)

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_init(OrgApacheCommonsIoEndianUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsIoEndianUtils *new_OrgApacheCommonsIoEndianUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoEndianUtils *create_OrgApacheCommonsIoEndianUtils_init(void);

FOUNDATION_EXPORT jshort OrgApacheCommonsIoEndianUtils_swapShortWithShort_(jshort value);

FOUNDATION_EXPORT jint OrgApacheCommonsIoEndianUtils_swapIntegerWithInt_(jint value);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoEndianUtils_swapLongWithLong_(jlong value);

FOUNDATION_EXPORT jfloat OrgApacheCommonsIoEndianUtils_swapFloatWithFloat_(jfloat value);

FOUNDATION_EXPORT jdouble OrgApacheCommonsIoEndianUtils_swapDoubleWithDouble_(jdouble value);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedShortWithByteArray_withInt_withShort_(IOSByteArray *data, jint offset, jshort value);

FOUNDATION_EXPORT jshort OrgApacheCommonsIoEndianUtils_readSwappedShortWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT jint OrgApacheCommonsIoEndianUtils_readSwappedUnsignedShortWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedIntegerWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint value);

FOUNDATION_EXPORT jint OrgApacheCommonsIoEndianUtils_readSwappedIntegerWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoEndianUtils_readSwappedUnsignedIntegerWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedLongWithByteArray_withInt_withLong_(IOSByteArray *data, jint offset, jlong value);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoEndianUtils_readSwappedLongWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedFloatWithByteArray_withInt_withFloat_(IOSByteArray *data, jint offset, jfloat value);

FOUNDATION_EXPORT jfloat OrgApacheCommonsIoEndianUtils_readSwappedFloatWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedDoubleWithByteArray_withInt_withDouble_(IOSByteArray *data, jint offset, jdouble value);

FOUNDATION_EXPORT jdouble OrgApacheCommonsIoEndianUtils_readSwappedDoubleWithByteArray_withInt_(IOSByteArray *data, jint offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedShortWithJavaIoOutputStream_withShort_(JavaIoOutputStream *output, jshort value);

FOUNDATION_EXPORT jshort OrgApacheCommonsIoEndianUtils_readSwappedShortWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint OrgApacheCommonsIoEndianUtils_readSwappedUnsignedShortWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedIntegerWithJavaIoOutputStream_withInt_(JavaIoOutputStream *output, jint value);

FOUNDATION_EXPORT jint OrgApacheCommonsIoEndianUtils_readSwappedIntegerWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoEndianUtils_readSwappedUnsignedIntegerWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedLongWithJavaIoOutputStream_withLong_(JavaIoOutputStream *output, jlong value);

FOUNDATION_EXPORT jlong OrgApacheCommonsIoEndianUtils_readSwappedLongWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedFloatWithJavaIoOutputStream_withFloat_(JavaIoOutputStream *output, jfloat value);

FOUNDATION_EXPORT jfloat OrgApacheCommonsIoEndianUtils_readSwappedFloatWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgApacheCommonsIoEndianUtils_writeSwappedDoubleWithJavaIoOutputStream_withDouble_(JavaIoOutputStream *output, jdouble value);

FOUNDATION_EXPORT jdouble OrgApacheCommonsIoEndianUtils_readSwappedDoubleWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoEndianUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoEndianUtils")
