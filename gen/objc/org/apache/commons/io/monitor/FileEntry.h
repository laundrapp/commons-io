//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/monitor/FileEntry.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileEntry")
#ifdef RESTRICT_OrgApacheCommonsIoMonitorFileEntry
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileEntry 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileEntry 1
#endif
#undef RESTRICT_OrgApacheCommonsIoMonitorFileEntry

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoMonitorFileEntry_) && (INCLUDE_ALL_OrgApacheCommonsIoMonitorFileEntry || defined(INCLUDE_OrgApacheCommonsIoMonitorFileEntry))
#define OrgApacheCommonsIoMonitorFileEntry_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaIoFile;

/*!
 @brief <code>FileEntry</code> represents the state of a file or directory, capturing
  the following <code>File</code> attributes at a point in time.
 <ul>
    <li>File Name (see <code>File.getName()</code>)</li>
    <li>Exists - whether the file exists or not (see <code>File.exists()</code>)</li>
    <li>Directory - whether the file is a directory or not (see <code>File.isDirectory()</code>)</li>
    <li>Last Modified Date/Time (see <code>File.lastModified()</code>)</li>
    <li>Length (see <code>File.length()</code>) - directories treated as zero</li>
    <li>Children - contents of a directory (see <code>File.listFiles(java.io.FileFilter)</code>)</li>
  </ul>
  <p>
  <h3>Custom Implementations</h3>
  If the state of additional <code>File</code> attributes is required then create a custom 
 <code>FileEntry</code> with properties for those attributes. Override the 
 <code>newChildInstance(File)</code> to return a new instance of the appropriate type.
  You may also want to override the <code>refresh(File)</code> method.
 - seealso: FileAlterationObserver
 @since 2.0
 */
@interface OrgApacheCommonsIoMonitorFileEntry : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a new monitor for a specified <code>File</code>.
 @param file The file being monitored
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Construct a new monitor for a specified <code>File</code>.
 @param parent The parent
 @param file The file being monitored
 */
- (instancetype __nonnull)initWithOrgApacheCommonsIoMonitorFileEntry:(OrgApacheCommonsIoMonitorFileEntry *)parent
                                                      withJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Return the directory's files.
 @return This directory's files or an empty
  array if the file is not a directory or the
  directory is empty
 */
- (IOSObjectArray *)getChildren;

/*!
 @brief Return the file being monitored.
 @return the file being monitored
 */
- (JavaIoFile *)getFile;

/*!
 @brief Return the last modified time from the last time it
  was checked.
 @return the last modified time
 */
- (jlong)getLastModified;

/*!
 @brief Return the length.
 @return the length
 */
- (jlong)getLength;

/*!
 @brief Return the level
 @return the level
 */
- (jint)getLevel;

/*!
 @brief Return the file name.
 @return the file name
 */
- (NSString *)getName;

/*!
 @brief Return the parent entry.
 @return the parent entry
 */
- (OrgApacheCommonsIoMonitorFileEntry *)getParent;

/*!
 @brief Indicate whether the file is a directory or not.
 @return whether the file is a directory or not
 */
- (jboolean)isDirectory;

/*!
 @brief Indicate whether the file existed the last time it
  was checked.
 @return whether the file existed
 */
- (jboolean)isExists;

/*!
 @brief Create a new child instance.
 <p>
  Custom implementations should override this method to return
  a new instance of the appropriate type.
 @param file The child file
 @return a new child instance
 */
- (OrgApacheCommonsIoMonitorFileEntry *)newChildInstanceWithJavaIoFile:(JavaIoFile *)file OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Refresh the attributes from the <code>File</code>, indicating
  whether the file has changed.
 <p>
  This implementation refreshes the <code>name</code>, <code>exists</code>,
  <code>directory</code>, <code>lastModified</code> and <code>length</code>
  properties. 
 <p>
  The <code>exists</code>, <code>directory</code>, <code>lastModified</code>
  and <code>length</code> properties are compared for changes
 @param file the file instance to compare to
 @return <code>true</code> if the file has changed, otherwise <code>false</code>
 */
- (jboolean)refreshWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Set the directory's files.
 @param children This directory's files, may be null
 */
- (void)setChildrenWithOrgApacheCommonsIoMonitorFileEntryArray:(IOSObjectArray *)children;

/*!
 @brief Set whether the file is a directory or not.
 @param directory whether the file is a directory or not
 */
- (void)setDirectoryWithBoolean:(jboolean)directory;

/*!
 @brief Set whether the file existed the last time it
  was checked.
 @param exists whether the file exists or not
 */
- (void)setExistsWithBoolean:(jboolean)exists;

/*!
 @brief Return the last modified time from the last time it
  was checked.
 @param lastModified The last modified time
 */
- (void)setLastModifiedWithLong:(jlong)lastModified;

/*!
 @brief Set the length.
 @param length the length
 */
- (void)setLengthWithLong:(jlong)length;

/*!
 @brief Set the file name.
 @param name the file name
 */
- (void)setNameWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoMonitorFileEntry)

inline IOSObjectArray *OrgApacheCommonsIoMonitorFileEntry_get_EMPTY_ENTRIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoMonitorFileEntry_EMPTY_ENTRIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoMonitorFileEntry, EMPTY_ENTRIES, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileEntry_initWithJavaIoFile_(OrgApacheCommonsIoMonitorFileEntry *self, JavaIoFile *file);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileEntry *new_OrgApacheCommonsIoMonitorFileEntry_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileEntry *create_OrgApacheCommonsIoMonitorFileEntry_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileEntry_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileEntry *self, OrgApacheCommonsIoMonitorFileEntry *parent, JavaIoFile *file);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileEntry *new_OrgApacheCommonsIoMonitorFileEntry_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileEntry *parent, JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileEntry *create_OrgApacheCommonsIoMonitorFileEntry_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileEntry *parent, JavaIoFile *file);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoMonitorFileEntry)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileEntry")
