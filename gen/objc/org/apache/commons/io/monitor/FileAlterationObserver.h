//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/monitor/FileAlterationObserver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationObserver")
#ifdef RESTRICT_OrgApacheCommonsIoMonitorFileAlterationObserver
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationObserver 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationObserver 1
#endif
#undef RESTRICT_OrgApacheCommonsIoMonitorFileAlterationObserver

#if !defined (OrgApacheCommonsIoMonitorFileAlterationObserver_) && (INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationObserver || defined(INCLUDE_OrgApacheCommonsIoMonitorFileAlterationObserver))
#define OrgApacheCommonsIoMonitorFileAlterationObserver_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@class OrgApacheCommonsIoMonitorFileEntry;
@protocol JavaIoFileFilter;
@protocol JavaLangIterable;
@protocol OrgApacheCommonsIoMonitorFileAlterationListener;

/*!
 @brief FileAlterationObserver represents the state of files below a root directory,
  checking the filesystem and notifying listeners of create, change or
  delete events.
 <p>
  To use this implementation: 
 <ul>
    <li>Create <code>FileAlterationListener</code> implementation(s) that process
       the file/directory create, change and delete events</li>
    <li>Register the listener(s) with a <code>FileAlterationObserver</code> for
        the appropriate directory.</li>
    <li>Either register the observer(s) with a <code>FileAlterationMonitor</code> or
        run manually.</li>
  </ul>
  
 <h2>Basic Usage</h2>
  Create a <code>FileAlterationObserver</code> for the directory and register the listeners: 
 @code

       File directory = new File(new File("."), "src");
       FileAlterationObserver observer = new FileAlterationObserver(directory);
       observer.addListener(...);      observer.addListener(...); 
  
@endcode
  To manually observe a directory, initialize the observer and invoked the 
 <code>checkAndNotify()</code> method as required: 
 @code

       // intialize
       observer.init();
       ...
       // invoke as required
       observer.checkAndNotify();
       ...
       observer.checkAndNotify();
       ...
       // finished
       observer.finish(); 
  
@endcode
  Alternatively, register the oberver(s) with a <code>FileAlterationMonitor</code>,
  which creates a new thread, invoking the observer at the specified interval: 
 @code

       long interval = ...
       FileAlterationMonitor monitor = new FileAlterationMonitor(interval);
       monitor.addObserver(observer);
       monitor.start();
       ...
       monitor.stop(); 
  
@endcode
  
 <h2>File Filters</h2>
  This implementation can monitor portions of the file system
  by using <code>FileFilter</code>s to observe only the files and/or directories
  that are of interest. This makes it more efficient and reduces the
  noise from <i>unwanted</i> file system events. 
 <p>
  <a href="http://commons.apache.org/io/">Commons IO</a> has a good range of
  useful, ready made  
 <a href="../filefilter/package-summary.html">File Filter</a>
  implementations for this purpose. 
 <p>
  For example, to only observe 1) visible directories and 2) files with a ".java" suffix
  in a root directory called "src" you could set up a <code>FileAlterationObserver</code> in the following
  way: 
 @code

       // Create a FileFilter
       IOFileFilter directories = FileFilterUtils.and(
                                       FileFilterUtils.directoryFileFilter(),
                                       HiddenFileFilter.VISIBLE);
       IOFileFilter files       = FileFilterUtils.and(
                                       FileFilterUtils.fileFileFilter(),
                                       FileFilterUtils.suffixFileFilter(".java"));
       IOFileFilter filter = FileFilterUtils.or(directories, files);
       // Create the File system observer and register File Listeners
       FileAlterationObserver observer = new FileAlterationObserver(new File("src"), filter);
       observer.addListener(...);      observer.addListener(...); 
  
@endcode
  
 <h2>FileEntry</h2>
  <code>FileEntry</code> represents the state of a file or directory, capturing 
 <code>File</code> attributes at a point in time. Custom implementations of 
 <code>FileEntry</code> can be used to capture additional properties that the
  basic implementation does not support. The <code>FileEntry.refresh(File)</code>
  method is used to determine if a file or directory has changed since the last
  check and stores the current state of the <code>File</code>'s properties.
 - seealso: FileAlterationListener
 - seealso: FileAlterationMonitor
 @version $Id$
 @since 2.0
 */
@interface OrgApacheCommonsIoMonitorFileAlterationObserver : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct an observer for the specified directory.
 @param directory the directory to observe
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Construct an observer for the specified directory and file filter.
 @param directory the directory to observe
 @param fileFilter The file filter or null if none
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
              withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter;

/*!
 @brief Construct an observer for the specified directory, file filter and
  file comparator.
 @param directory the directory to observe
 @param fileFilter The file filter or null if none
 @param caseSensitivity what case sensitivity to use comparing file names, null means system sensitive
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
              withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
      withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Construct an observer for the specified directory.
 @param directoryName the name of the directory to observe
 */
- (instancetype)initWithNSString:(NSString *)directoryName;

/*!
 @brief Construct an observer for the specified directory and file filter.
 @param directoryName the name of the directory to observe
 @param fileFilter The file filter or null if none
 */
- (instancetype)initWithNSString:(NSString *)directoryName
            withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter;

/*!
 @brief Construct an observer for the specified directory, file filter and
  file comparator.
 @param directoryName the name of the directory to observe
 @param fileFilter The file filter or null if none
 @param caseSensitivity what case sensitivity to use comparing file names, null means system sensitive
 */
- (instancetype)initWithNSString:(NSString *)directoryName
            withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
    withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Add a file system listener.
 @param listener The file system listener
 */
- (void)addListenerWithOrgApacheCommonsIoMonitorFileAlterationListener:(id<OrgApacheCommonsIoMonitorFileAlterationListener>)listener;

/*!
 @brief Check whether the file and its chlidren have been created, modified or deleted.
 */
- (void)checkAndNotify;

/*!
 @brief Final processing.
 @throw Exceptionif an error occurs
 */
- (void)destroy;

/*!
 @brief Return the directory being observed.
 @return the directory being observed
 */
- (JavaIoFile *)getDirectory;

/*!
 @brief Return the fileFilter.
 @return the fileFilter
 @since 2.1
 */
- (id<JavaIoFileFilter>)getFileFilter;

/*!
 @brief Returns the set of registered file system listeners.
 @return The file system listeners
 */
- (id<JavaLangIterable>)getListeners;

/*!
 @brief Initialize the observer.
 @throw Exceptionif an error occurs
 */
- (void)initialize__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Remove a file system listener.
 @param listener The file system listener
 */
- (void)removeListenerWithOrgApacheCommonsIoMonitorFileAlterationListener:(id<OrgApacheCommonsIoMonitorFileAlterationListener>)listener;

/*!
 @brief Provide a String representation of this observer.
 @return a String representation of this observer
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Construct an observer for the specified directory, file filter and
  file comparator.
 @param rootEntry the root directory to observe
 @param fileFilter The file filter or null if none
 @param caseSensitivity what case sensitivity to use comparing file names, null means system sensitive
 */
- (instancetype)initWithOrgApacheCommonsIoMonitorFileEntry:(OrgApacheCommonsIoMonitorFileEntry *)rootEntry
                                      withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
                              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoMonitorFileAlterationObserver)

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(NSString *directoryName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(NSString *directoryName);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName, id<JavaIoFileFilter> fileFilter);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(NSString *directoryName, id<JavaIoFileFilter> fileFilter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(NSString *directoryName, id<JavaIoFileFilter> fileFilter);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(JavaIoFile *directory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(JavaIoFile *directory);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory, id<JavaIoFileFilter> fileFilter);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoMonitorFileAlterationObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationObserver")
