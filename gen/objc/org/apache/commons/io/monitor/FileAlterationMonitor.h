//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationMonitor")
#ifdef RESTRICT_OrgApacheCommonsIoMonitorFileAlterationMonitor
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationMonitor 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationMonitor 1
#endif
#undef RESTRICT_OrgApacheCommonsIoMonitorFileAlterationMonitor

#if !defined (OrgApacheCommonsIoMonitorFileAlterationMonitor_) && (INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationMonitor || defined(INCLUDE_OrgApacheCommonsIoMonitorFileAlterationMonitor))
#define OrgApacheCommonsIoMonitorFileAlterationMonitor_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IOSObjectArray;
@class OrgApacheCommonsIoMonitorFileAlterationObserver;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentThreadFactory;

/*!
 @brief A runnable that spawns a monitoring thread triggering any
  registered <code>FileAlterationObserver</code> at a specified interval.
 - seealso: FileAlterationObserver
 @version $Id$
 @since 2.0
 */
@interface OrgApacheCommonsIoMonitorFileAlterationMonitor : NSObject < JavaLangRunnable >

#pragma mark Public

/*!
 @brief Construct a monitor with a default interval of 10 seconds.
 */
- (instancetype)init;

/*!
 @brief Construct a monitor with the specified interval.
 @param interval The amount of time in miliseconds to wait between  checks of the file system
 */
- (instancetype)initWithLong:(jlong)interval;

/*!
 @brief Construct a monitor with the specified interval and set of observers.
 @param interval The amount of time in miliseconds to wait between  checks of the file system
 @param observers The set of observers to add to the monitor.
 */
- (instancetype)initWithLong:(jlong)interval
withOrgApacheCommonsIoMonitorFileAlterationObserverArray:(IOSObjectArray *)observers;

/*!
 @brief Add a file system observer to this monitor.
 @param observer The file system observer to add
 */
- (void)addObserverWithOrgApacheCommonsIoMonitorFileAlterationObserver:(OrgApacheCommonsIoMonitorFileAlterationObserver *)observer;

/*!
 @brief Return the interval.
 @return the interval
 */
- (jlong)getInterval;

/*!
 @brief Returns the set of <code>FileAlterationObserver</code> registered with
  this monitor.
 @return The set of <code>FileAlterationObserver</code>
 */
- (id<JavaLangIterable>)getObservers;

/*!
 @brief Remove a file system observer from this monitor.
 @param observer The file system observer to remove
 */
- (void)removeObserverWithOrgApacheCommonsIoMonitorFileAlterationObserver:(OrgApacheCommonsIoMonitorFileAlterationObserver *)observer;

/*!
 @brief Run.
 */
- (void)run;

/*!
 @brief Set the thread factory.
 @param threadFactory the thread factory
 */
- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Start monitoring.
 @throw Exceptionif an error occurs initializing the observer
 */
- (void)start;

/*!
 @brief Stop monitoring.
 @throw Exceptionif an error occurs initializing the observer
 */
- (void)stop;

/*!
 @brief Stop monitoring.
 @param stopInterval the amount of time in milliseconds to wait for the thread to finish.  A value of zero will wait until the thread is finished (see 
 <code>Thread.join(long)</code> ).
 @throw Exceptionif an error occurs initializing the observer
 @since 2.1
 */
- (void)stopWithLong:(jlong)stopInterval;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoMonitorFileAlterationMonitor)

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationMonitor_init(OrgApacheCommonsIoMonitorFileAlterationMonitor *self);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *new_OrgApacheCommonsIoMonitorFileAlterationMonitor_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *create_OrgApacheCommonsIoMonitorFileAlterationMonitor_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_(OrgApacheCommonsIoMonitorFileAlterationMonitor *self, jlong interval);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *new_OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_(jlong interval) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *create_OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_(jlong interval);

FOUNDATION_EXPORT void OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_withOrgApacheCommonsIoMonitorFileAlterationObserverArray_(OrgApacheCommonsIoMonitorFileAlterationMonitor *self, jlong interval, IOSObjectArray *observers);

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *new_OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_withOrgApacheCommonsIoMonitorFileAlterationObserverArray_(jlong interval, IOSObjectArray *observers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoMonitorFileAlterationMonitor *create_OrgApacheCommonsIoMonitorFileAlterationMonitor_initWithLong_withOrgApacheCommonsIoMonitorFileAlterationObserverArray_(jlong interval, IOSObjectArray *observers);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoMonitorFileAlterationMonitor)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoMonitorFileAlterationMonitor")
