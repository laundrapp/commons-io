//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/monitor/FileAlterationObserver.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "org/apache/commons/io/FileUtils.h"
#include "org/apache/commons/io/IOCase.h"
#include "org/apache/commons/io/comparator/NameFileComparator.h"
#include "org/apache/commons/io/monitor/FileAlterationListener.h"
#include "org/apache/commons/io/monitor/FileAlterationObserver.h"
#include "org/apache/commons/io/monitor/FileEntry.h"

@interface OrgApacheCommonsIoMonitorFileAlterationObserver () {
 @public
  id<JavaUtilList> listeners_;
  OrgApacheCommonsIoMonitorFileEntry *rootEntry_;
  id<JavaIoFileFilter> fileFilter_;
  id<JavaUtilComparator> comparator_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoMonitorFileAlterationObserver, listeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoMonitorFileAlterationObserver, rootEntry_, OrgApacheCommonsIoMonitorFileEntry *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoMonitorFileAlterationObserver, fileFilter_, id<JavaIoFileFilter>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoMonitorFileAlterationObserver, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *parent, IOSObjectArray *previous, IOSObjectArray *files);

__attribute__((unused)) static OrgApacheCommonsIoMonitorFileEntry *OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *parent, JavaIoFile *file);

__attribute__((unused)) static void OrgApacheCommonsIoMonitorFileAlterationObserver_doCreateWithOrgApacheCommonsIoMonitorFileEntry_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_);

__attribute__((unused)) static void OrgApacheCommonsIoMonitorFileAlterationObserver_doMatchWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_, JavaIoFile *file);

__attribute__((unused)) static void OrgApacheCommonsIoMonitorFileAlterationObserver_doDeleteWithOrgApacheCommonsIoMonitorFileEntry_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *file);

@implementation OrgApacheCommonsIoMonitorFileAlterationObserver

- (instancetype __nonnull)initWithNSString:(NSString *)directoryName {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(self, directoryName);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)directoryName
                      withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(self, directoryName, fileFilter);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)directoryName
                      withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, directoryName, fileFilter, caseSensitivity);
  return self;
}

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)directory {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(self, directory);
  return self;
}

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)directory
                        withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(self, directory, fileFilter);
  return self;
}

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)directory
                        withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
                withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, directory, fileFilter, caseSensitivity);
  return self;
}

- (instancetype __nonnull)initWithOrgApacheCommonsIoMonitorFileEntry:(OrgApacheCommonsIoMonitorFileEntry *)rootEntry
                                                withJavaIoFileFilter:(id<JavaIoFileFilter>)fileFilter
                                        withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, rootEntry, fileFilter, caseSensitivity);
  return self;
}

- (JavaIoFile *)getDirectory {
  return [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(rootEntry_)) getFile];
}

- (id<JavaIoFileFilter>)getFileFilter {
  return fileFilter_;
}

- (void)addListenerWithOrgApacheCommonsIoMonitorFileAlterationListener:(id<OrgApacheCommonsIoMonitorFileAlterationListener>)listener {
  if (listener != nil) {
    [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:listener];
  }
}

- (void)removeListenerWithOrgApacheCommonsIoMonitorFileAlterationListener:(id<OrgApacheCommonsIoMonitorFileAlterationListener>)listener {
  if (listener != nil) {
    while ([((id<JavaUtilList>) nil_chk(listeners_)) removeWithId:listener]) {
    }
  }
}

- (id<JavaLangIterable>)getListeners {
  return listeners_;
}

- (void)initialize__ {
  [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(rootEntry_)) refreshWithJavaIoFile:[rootEntry_ getFile]];
  IOSObjectArray *files = OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(self, [rootEntry_ getFile]);
  IOSObjectArray *children = ((IOSObjectArray *) nil_chk(files))->size_ > 0 ? [IOSObjectArray arrayWithLength:files->size_ type:OrgApacheCommonsIoMonitorFileEntry_class_()] : JreLoadStatic(OrgApacheCommonsIoMonitorFileEntry, EMPTY_ENTRIES);
  for (jint i = 0; i < files->size_; i++) {
    IOSObjectArray_Set(children, i, OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(self, rootEntry_, IOSObjectArray_Get(files, i)));
  }
  [rootEntry_ setChildrenWithOrgApacheCommonsIoMonitorFileEntryArray:children];
}

- (void)destroy {
}

- (void)checkAndNotify {
  for (id<OrgApacheCommonsIoMonitorFileAlterationListener> __strong listener in nil_chk(listeners_)) {
    [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onStartWithOrgApacheCommonsIoMonitorFileAlterationObserver:self];
  }
  JavaIoFile *rootFile = [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(rootEntry_)) getFile];
  if ([((JavaIoFile *) nil_chk(rootFile)) exists]) {
    OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(self, rootEntry_, [rootEntry_ getChildren], OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(self, rootFile));
  }
  else if ([rootEntry_ isExists]) {
    OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(self, rootEntry_, [rootEntry_ getChildren], JreLoadStatic(OrgApacheCommonsIoFileUtils, EMPTY_FILE_ARRAY));
  }
  else {
  }
  for (id<OrgApacheCommonsIoMonitorFileAlterationListener> __strong listener in listeners_) {
    [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onStopWithOrgApacheCommonsIoMonitorFileAlterationObserver:self];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  [builder appendWithNSString:[[self java_getClass] getSimpleName]];
  [builder appendWithNSString:@"[file='"];
  [builder appendWithNSString:[((JavaIoFile *) nil_chk([self getDirectory])) getPath]];
  [builder appendWithChar:'\''];
  if (fileFilter_ != nil) {
    [builder appendWithNSString:@", "];
    [builder appendWithNSString:[fileFilter_ description]];
  }
  [builder appendWithNSString:@", listeners="];
  [builder appendWithInt:[((id<JavaUtilList>) nil_chk(listeners_)) size]];
  [builder appendWithNSString:@"]"];
  return [builder description];
}

- (void)dealloc {
  RELEASE_(listeners_);
  RELEASE_(rootEntry_);
  RELEASE_(fileFilter_);
  RELEASE_(comparator_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(self, create_JavaIoFile_initWithNSString_(directoryName));
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(NSString *directoryName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_, directoryName)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_(NSString *directoryName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_, directoryName)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName, id<JavaIoFileFilter> fileFilter) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(self, create_JavaIoFile_initWithNSString_(directoryName), fileFilter);
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(NSString *directoryName, id<JavaIoFileFilter> fileFilter) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_withJavaIoFileFilter_, directoryName, fileFilter)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_(NSString *directoryName, id<JavaIoFileFilter> fileFilter) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_withJavaIoFileFilter_, directoryName, fileFilter)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, create_JavaIoFile_initWithNSString_(directoryName), fileFilter, caseSensitivity);
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, directoryName, fileFilter, caseSensitivity)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(NSString *directoryName, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithNSString_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, directoryName, fileFilter, caseSensitivity)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(self, directory, nil);
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(JavaIoFile *directory) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_, directory)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_(JavaIoFile *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_, directory)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory, id<JavaIoFileFilter> fileFilter) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, directory, fileFilter, nil);
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_withJavaIoFileFilter_, directory, fileFilter)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_withJavaIoFileFilter_, directory, fileFilter)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(self, create_OrgApacheCommonsIoMonitorFileEntry_initWithJavaIoFile_(directory), fileFilter, caseSensitivity);
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, directory, fileFilter, caseSensitivity)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(JavaIoFile *directory, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithJavaIoFile_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, directory, fileFilter, caseSensitivity)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->listeners_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  if (rootEntry == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Root entry is missing");
  }
  if ([rootEntry getFile] == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Root directory is missing");
  }
  JreStrongAssign(&self->rootEntry_, rootEntry);
  JreStrongAssign(&self->fileFilter_, fileFilter);
  if (caseSensitivity == nil || [caseSensitivity isEqual:JreLoadStatic(OrgApacheCommonsIoIOCase, SYSTEM)]) {
    JreStrongAssign(&self->comparator_, JreLoadStatic(OrgApacheCommonsIoComparatorNameFileComparator, NAME_SYSTEM_COMPARATOR));
  }
  else if ([caseSensitivity isEqual:JreLoadStatic(OrgApacheCommonsIoIOCase, INSENSITIVE)]) {
    JreStrongAssign(&self->comparator_, JreLoadStatic(OrgApacheCommonsIoComparatorNameFileComparator, NAME_INSENSITIVE_COMPARATOR));
  }
  else {
    JreStrongAssign(&self->comparator_, JreLoadStatic(OrgApacheCommonsIoComparatorNameFileComparator, NAME_COMPARATOR));
  }
}

OrgApacheCommonsIoMonitorFileAlterationObserver *new_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, rootEntry, fileFilter, caseSensitivity)
}

OrgApacheCommonsIoMonitorFileAlterationObserver *create_OrgApacheCommonsIoMonitorFileAlterationObserver_initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoMonitorFileEntry *rootEntry, id<JavaIoFileFilter> fileFilter, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoMonitorFileAlterationObserver, initWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFileFilter_withOrgApacheCommonsIoIOCase_, rootEntry, fileFilter, caseSensitivity)
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *parent, IOSObjectArray *previous, IOSObjectArray *files) {
  jint c = 0;
  IOSObjectArray *current = ((IOSObjectArray *) nil_chk(files))->size_ > 0 ? [IOSObjectArray arrayWithLength:files->size_ type:OrgApacheCommonsIoMonitorFileEntry_class_()] : JreLoadStatic(OrgApacheCommonsIoMonitorFileEntry, EMPTY_ENTRIES);
  {
    IOSObjectArray *a__ = previous;
    OrgApacheCommonsIoMonitorFileEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheCommonsIoMonitorFileEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheCommonsIoMonitorFileEntry *entry_ = *b__++;
      while (c < files->size_ && [((id<JavaUtilComparator>) nil_chk(self->comparator_)) compareWithId:[((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) getFile] withId:IOSObjectArray_Get(files, c)] > 0) {
        IOSObjectArray_Set(current, c, OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(self, parent, IOSObjectArray_Get(files, c)));
        OrgApacheCommonsIoMonitorFileAlterationObserver_doCreateWithOrgApacheCommonsIoMonitorFileEntry_(self, IOSObjectArray_Get(current, c));
        c++;
      }
      if (c < files->size_ && [((id<JavaUtilComparator>) nil_chk(self->comparator_)) compareWithId:[((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) getFile] withId:IOSObjectArray_Get(files, c)] == 0) {
        OrgApacheCommonsIoMonitorFileAlterationObserver_doMatchWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(self, entry_, IOSObjectArray_Get(files, c));
        OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(self, entry_, [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) getChildren], OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(self, IOSObjectArray_Get(files, c)));
        IOSObjectArray_Set(current, c, entry_);
        c++;
      }
      else {
        OrgApacheCommonsIoMonitorFileAlterationObserver_checkAndNotifyWithOrgApacheCommonsIoMonitorFileEntry_withOrgApacheCommonsIoMonitorFileEntryArray_withJavaIoFileArray_(self, entry_, [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) getChildren], JreLoadStatic(OrgApacheCommonsIoFileUtils, EMPTY_FILE_ARRAY));
        OrgApacheCommonsIoMonitorFileAlterationObserver_doDeleteWithOrgApacheCommonsIoMonitorFileEntry_(self, entry_);
      }
    }
  }
  for (; c < files->size_; c++) {
    IOSObjectArray_Set(current, c, OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(self, parent, IOSObjectArray_Get(files, c)));
    OrgApacheCommonsIoMonitorFileAlterationObserver_doCreateWithOrgApacheCommonsIoMonitorFileEntry_(self, IOSObjectArray_Get(current, c));
  }
  [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(parent)) setChildrenWithOrgApacheCommonsIoMonitorFileEntryArray:current];
}

OrgApacheCommonsIoMonitorFileEntry *OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *parent, JavaIoFile *file) {
  OrgApacheCommonsIoMonitorFileEntry *entry_ = [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(parent)) newChildInstanceWithJavaIoFile:file];
  [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) refreshWithJavaIoFile:file];
  IOSObjectArray *files = OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(self, file);
  IOSObjectArray *children = ((IOSObjectArray *) nil_chk(files))->size_ > 0 ? [IOSObjectArray arrayWithLength:files->size_ type:OrgApacheCommonsIoMonitorFileEntry_class_()] : JreLoadStatic(OrgApacheCommonsIoMonitorFileEntry, EMPTY_ENTRIES);
  for (jint i = 0; i < files->size_; i++) {
    IOSObjectArray_Set(children, i, OrgApacheCommonsIoMonitorFileAlterationObserver_createFileEntryWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(self, entry_, IOSObjectArray_Get(files, i)));
  }
  [entry_ setChildrenWithOrgApacheCommonsIoMonitorFileEntryArray:children];
  return entry_;
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_doCreateWithOrgApacheCommonsIoMonitorFileEntry_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_) {
  for (id<OrgApacheCommonsIoMonitorFileAlterationListener> __strong listener in nil_chk(self->listeners_)) {
    if ([((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) isDirectory]) {
      [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onDirectoryCreateWithJavaIoFile:[entry_ getFile]];
    }
    else {
      [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onFileCreateWithJavaIoFile:[entry_ getFile]];
    }
  }
  IOSObjectArray *children = [((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) getChildren];
  {
    IOSObjectArray *a__ = children;
    OrgApacheCommonsIoMonitorFileEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheCommonsIoMonitorFileEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheCommonsIoMonitorFileEntry *aChildren = *b__++;
      OrgApacheCommonsIoMonitorFileAlterationObserver_doCreateWithOrgApacheCommonsIoMonitorFileEntry_(self, aChildren);
    }
  }
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_doMatchWithOrgApacheCommonsIoMonitorFileEntry_withJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_, JavaIoFile *file) {
  if ([((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) refreshWithJavaIoFile:file]) {
    for (id<OrgApacheCommonsIoMonitorFileAlterationListener> __strong listener in nil_chk(self->listeners_)) {
      if ([entry_ isDirectory]) {
        [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onDirectoryChangeWithJavaIoFile:file];
      }
      else {
        [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onFileChangeWithJavaIoFile:file];
      }
    }
  }
}

void OrgApacheCommonsIoMonitorFileAlterationObserver_doDeleteWithOrgApacheCommonsIoMonitorFileEntry_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, OrgApacheCommonsIoMonitorFileEntry *entry_) {
  for (id<OrgApacheCommonsIoMonitorFileAlterationListener> __strong listener in nil_chk(self->listeners_)) {
    if ([((OrgApacheCommonsIoMonitorFileEntry *) nil_chk(entry_)) isDirectory]) {
      [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onDirectoryDeleteWithJavaIoFile:[entry_ getFile]];
    }
    else {
      [((id<OrgApacheCommonsIoMonitorFileAlterationListener>) nil_chk(listener)) onFileDeleteWithJavaIoFile:[entry_ getFile]];
    }
  }
}

IOSObjectArray *OrgApacheCommonsIoMonitorFileAlterationObserver_listFilesWithJavaIoFile_(OrgApacheCommonsIoMonitorFileAlterationObserver *self, JavaIoFile *file) {
  IOSObjectArray *children = nil;
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    children = self->fileFilter_ == nil ? [file listFiles] : [file listFilesWithJavaIoFileFilter:self->fileFilter_];
  }
  if (children == nil) {
    children = JreLoadStatic(OrgApacheCommonsIoFileUtils, EMPTY_FILE_ARRAY);
  }
  if (self->comparator_ != nil && ((IOSObjectArray *) nil_chk(children))->size_ > 1) {
    JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(children, self->comparator_);
  }
  return children;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoMonitorFileAlterationObserver)
