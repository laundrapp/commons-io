//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/NotFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterNotFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterNotFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterNotFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterNotFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterNotFileFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoFilefilterNotFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterNotFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterNotFileFilter))
#define OrgApacheCommonsIoFilefilterNotFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@protocol OrgApacheCommonsIoFilefilterIOFileFilter;

/*!
 @brief This filter produces a logical NOT of the filters specified.
 @since 1.0
 @version $Id$
 - seealso: FileFilterUtils#notFileFilter(IOFileFilter)
 */
@interface OrgApacheCommonsIoFilefilterNotFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new file filter that NOTs the result of another filter.
 @param filter the filter, must not be null
 @throw IllegalArgumentExceptionif the filter is null
 */
- (instancetype __nonnull)initWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Returns the logical NOT of the underlying filter's return value for the same File.
 @param file the File to check
 @return true if the filter returns false
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Returns the logical NOT of the underlying filter's return value for the same arguments.
 @param file the File directory
 @param name the filename
 @return true if the filter returns false
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name;

/*!
 @brief Provide a String representaion of this file filter.
 @return a String representaion
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterNotFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNotFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_(OrgApacheCommonsIoFilefilterNotFileFilter *self, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNotFileFilter *new_OrgApacheCommonsIoFilefilterNotFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNotFileFilter *create_OrgApacheCommonsIoFilefilterNotFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterNotFileFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterNotFileFilter")
