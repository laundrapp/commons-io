//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterNameFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterNameFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterNameFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterNameFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterNameFileFilter

#if !defined (OrgApacheCommonsIoFilefilterNameFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterNameFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterNameFileFilter))
#define OrgApacheCommonsIoFilefilterNameFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@protocol JavaUtilList;

/*!
 @brief Filters filenames for a certain name.
 <p>
  For example, to print all files and directories in the 
  current directory whose name is <code>Test</code>:
  
 @code

  File dir = new File(".");
  String[] files = dir.list( new NameFileFilter("Test") );
  for ( int i = 0; i &lt; files.length; i++ ) {
      System.out.println(files[i]);
  } 
  
@endcode
 @since 1.0
 @version $Id$
 - seealso: FileFilterUtils#nameFileFilter(String)
 - seealso: FileFilterUtils#nameFileFilter(String, IOCase)
 */
@interface OrgApacheCommonsIoFilefilterNameFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new case-sensitive name file filter for a list of names.
 @param names the names to allow, must not be null
 @throw IllegalArgumentExceptionif the name list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)names;

/*!
 @brief Constructs a new name file filter for a list of names specifying case-sensitivity.
 @param names the names to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the name list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)names
        withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Constructs a new case-sensitive name file filter for a single name.
 @param name the name to allow, must not be null
 @throw IllegalArgumentExceptionif the name is null
 */
- (instancetype)initWithNSString:(NSString *)name;

/*!
 @brief Construct a new name file filter specifying case-sensitivity.
 @param name the name to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the name is null
 */
- (instancetype)initWithNSString:(NSString *)name
    withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Constructs a new case-sensitive name file filter for an array of names.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param names the names to allow, must not be null
 @throw IllegalArgumentExceptionif the names array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Constructs a new name file filter for an array of names specifying case-sensitivity.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param names the names to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the names array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)names
         withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Checks to see if the filename matches.
 @param file the File to check
 @return true if the filename matches
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Checks to see if the filename matches.
 @param dir the File directory (ignored)
 @param name the filename
 @return true if the filename matches
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name;

/*!
 @brief Provide a String representaion of this file filter.
 @return a String representaion
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterNameFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterNameFileFilter *self, NSString *name);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterNameFileFilter *self, NSString *name, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *name, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *name, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterNameFileFilter *self, IOSObjectArray *names);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_(IOSObjectArray *names) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_(IOSObjectArray *names);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterNameFileFilter *self, IOSObjectArray *names, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *names, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *names, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterNameFileFilter *self, id<JavaUtilList> names);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_(id<JavaUtilList> names) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_(id<JavaUtilList> names);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterNameFileFilter *self, id<JavaUtilList> names, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *new_OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> names, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterNameFileFilter *create_OrgApacheCommonsIoFilefilterNameFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> names, OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterNameFileFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterNameFileFilter")
