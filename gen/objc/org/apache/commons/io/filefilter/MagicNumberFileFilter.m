//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/io/IOUtils.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/MagicNumberFileFilter.h"

@interface OrgApacheCommonsIoFilefilterMagicNumberFileFilter () {
 @public
  /*!
   @brief The magic number to compare against the file's bytes at the provided 
  offset.
   */
  IOSByteArray *magicNumbers_;
  /*!
   @brief The offset (in bytes) within the files that the magic number's bytes 
  should appear.
   */
  jlong byteOffset_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, magicNumbers_, IOSByteArray *)

/*!
 @brief The serialization version unique identifier.
 */
inline jlong OrgApacheCommonsIoFilefilterMagicNumberFileFilter_get_serialVersionUID(void);
#define OrgApacheCommonsIoFilefilterMagicNumberFileFilter_serialVersionUID -547733176983104172LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, serialVersionUID, jlong)

@implementation OrgApacheCommonsIoFilefilterMagicNumberFileFilter

- (instancetype)initWithByteArray:(IOSByteArray *)magicNumber {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(self, magicNumber);
  return self;
}

- (instancetype)initWithNSString:(NSString *)magicNumber {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(self, magicNumber);
  return self;
}

- (instancetype)initWithNSString:(NSString *)magicNumber
                        withLong:(jlong)offset {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(self, magicNumber, offset);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)magicNumber
                         withLong:(jlong)offset {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(self, magicNumber, offset);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if (file != nil && [file isFile] && [file canRead]) {
    JavaIoRandomAccessFile *randomAccessFile = nil;
    @try {
      IOSByteArray *fileBytes = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(self->magicNumbers_))->size_];
      randomAccessFile = create_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(file, @"r");
      [randomAccessFile seekWithLong:byteOffset_];
      jint read = [randomAccessFile readWithByteArray:fileBytes];
      if (read != magicNumbers_->size_) {
        return false;
      }
      return JavaUtilArrays_equalsWithByteArray_withByteArray_(self->magicNumbers_, fileBytes);
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      OrgApacheCommonsIoIOUtils_closeQuietlyWithJavaIoCloseable_(randomAccessFile);
    }
  }
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_([super description]);
  [builder appendWithNSString:@"("];
  [builder appendWithNSString:[NSString java_stringWithBytes:magicNumbers_]];
  [builder appendWithNSString:@","];
  [builder appendWithLong:self->byteOffset_];
  [builder appendWithNSString:@")"];
  return [builder description];
}

- (void)dealloc {
  RELEASE_(magicNumbers_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, IOSByteArray *magicNumber) {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(self, magicNumber, 0);
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(IOSByteArray *magicNumber) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithByteArray_, magicNumber)
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(IOSByteArray *magicNumber) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithByteArray_, magicNumber)
}

void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, NSString *magicNumber) {
  OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(self, magicNumber, 0);
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(NSString *magicNumber) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithNSString_, magicNumber)
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(NSString *magicNumber) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithNSString_, magicNumber)
}

void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, NSString *magicNumber, jlong offset) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (magicNumber == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The magic number cannot be null");
  }
  if ([magicNumber java_length] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The magic number must contain at least one byte");
  }
  if (offset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The offset cannot be negative");
  }
  JreStrongAssign(&self->magicNumbers_, [magicNumber java_getBytes]);
  self->byteOffset_ = offset;
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(NSString *magicNumber, jlong offset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithNSString_withLong_, magicNumber, offset)
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(NSString *magicNumber, jlong offset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithNSString_withLong_, magicNumber, offset)
}

void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, IOSByteArray *magicNumber, jlong offset) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (magicNumber == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The magic number cannot be null");
  }
  if (magicNumber->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The magic number must contain at least one byte");
  }
  if (offset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The offset cannot be negative");
  }
  JreStrongAssignAndConsume(&self->magicNumbers_, [IOSByteArray newArrayWithLength:magicNumber->size_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(magicNumber, 0, self->magicNumbers_, 0, magicNumber->size_);
  self->byteOffset_ = offset;
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(IOSByteArray *magicNumber, jlong offset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithByteArray_withLong_, magicNumber, offset)
}

OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(IOSByteArray *magicNumber, jlong offset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterMagicNumberFileFilter, initWithByteArray_withLong_, magicNumber, offset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterMagicNumberFileFilter)
