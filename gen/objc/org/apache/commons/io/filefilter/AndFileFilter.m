//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/AndFileFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/AndFileFilter.h"
#include "org/apache/commons/io/filefilter/IOFileFilter.h"

@interface OrgApacheCommonsIoFilefilterAndFileFilter () {
 @public
  /*!
   @brief The list of file filters.
   */
  id<JavaUtilList> fileFilters_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterAndFileFilter, fileFilters_, id<JavaUtilList>)

@implementation OrgApacheCommonsIoFilefilterAndFileFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  OrgApacheCommonsIoFilefilterAndFileFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)fileFilters {
  OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(self, fileFilters);
  return self;
}

- (instancetype __nonnull)initWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter1
                              withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter2 {
  OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(self, filter1, filter2);
  return self;
}

- (void)addFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)ioFileFilter {
  [((id<JavaUtilList>) nil_chk(self->fileFilters_)) addWithId:ioFileFilter];
}

- (id<JavaUtilList>)getFileFilters {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(self->fileFilters_);
}

- (jboolean)removeFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)ioFileFilter {
  return [((id<JavaUtilList>) nil_chk(self->fileFilters_)) removeWithId:ioFileFilter];
}

- (void)setFileFiltersWithJavaUtilList:(id<JavaUtilList>)fileFilters {
  [((id<JavaUtilList>) nil_chk(self->fileFilters_)) clear];
  [self->fileFilters_ addAllWithJavaUtilCollection:fileFilters];
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if ([((id<JavaUtilList>) nil_chk(self->fileFilters_)) isEmpty]) {
    return false;
  }
  for (id<OrgApacheCommonsIoFilefilterIOFileFilter> __strong fileFilter in fileFilters_) {
    if (![((id<OrgApacheCommonsIoFilefilterIOFileFilter>) nil_chk(fileFilter)) acceptWithJavaIoFile:file]) {
      return false;
    }
  }
  return true;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name {
  if ([((id<JavaUtilList>) nil_chk(self->fileFilters_)) isEmpty]) {
    return false;
  }
  for (id<OrgApacheCommonsIoFilefilterIOFileFilter> __strong fileFilter in fileFilters_) {
    if (![((id<OrgApacheCommonsIoFilefilterIOFileFilter>) nil_chk(fileFilter)) acceptWithJavaIoFile:file withNSString:name]) {
      return false;
    }
  }
  return true;
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:[super description]];
  [buffer appendWithNSString:@"("];
  if (fileFilters_ != nil) {
    for (jint i = 0; i < [fileFilters_ size]; i++) {
      if (i > 0) {
        [buffer appendWithNSString:@","];
      }
      id filter = [fileFilters_ getWithInt:i];
      [buffer appendWithNSString:filter == nil ? @"null" : [filter description]];
    }
  }
  [buffer appendWithNSString:@")"];
  return [buffer description];
}

- (void)dealloc {
  RELEASE_(fileFilters_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterAndFileFilter_init(OrgApacheCommonsIoFilefilterAndFileFilter *self) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  JreStrongAssignAndConsume(&self->fileFilters_, new_JavaUtilArrayList_init());
}

OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, init)
}

OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, init)
}

void OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterAndFileFilter *self, id<JavaUtilList> fileFilters) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (fileFilters == nil) {
    JreStrongAssignAndConsume(&self->fileFilters_, new_JavaUtilArrayList_init());
  }
  else {
    JreStrongAssignAndConsume(&self->fileFilters_, new_JavaUtilArrayList_initWithJavaUtilCollection_(fileFilters));
  }
}

OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(id<JavaUtilList> fileFilters) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, initWithJavaUtilList_, fileFilters)
}

OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(id<JavaUtilList> fileFilters) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, initWithJavaUtilList_, fileFilters)
}

void OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(OrgApacheCommonsIoFilefilterAndFileFilter *self, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (filter1 == nil || filter2 == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The filters must not be null");
  }
  JreStrongAssignAndConsume(&self->fileFilters_, new_JavaUtilArrayList_initWithInt_(2));
  [self addFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:filter1];
  [self addFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:filter2];
}

OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_, filter1, filter2)
}

OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterAndFileFilter, initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_, filter1, filter2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterAndFileFilter)
