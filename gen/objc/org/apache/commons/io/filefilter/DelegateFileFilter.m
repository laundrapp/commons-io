//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/DelegateFileFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/FilenameFilter.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/DelegateFileFilter.h"

@interface OrgApacheCommonsIoFilefilterDelegateFileFilter () {
 @public
  /*!
   @brief The Filename filter
   */
  id<JavaIoFilenameFilter> filenameFilter_;
  /*!
   @brief The File filter
   */
  id<JavaIoFileFilter> fileFilter_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterDelegateFileFilter, filenameFilter_, id<JavaIoFilenameFilter>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterDelegateFileFilter, fileFilter_, id<JavaIoFileFilter>)

@implementation OrgApacheCommonsIoFilefilterDelegateFileFilter

- (instancetype __nonnull)initWithJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter {
  OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFilenameFilter_(self, filter);
  return self;
}

- (instancetype __nonnull)initWithJavaIoFileFilter:(id<JavaIoFileFilter>)filter {
  OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFileFilter_(self, filter);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if (fileFilter_ != nil) {
    return [fileFilter_ acceptWithJavaIoFile:file];
  }
  else {
    return [super acceptWithJavaIoFile:file];
  }
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name {
  if (filenameFilter_ != nil) {
    return [filenameFilter_ acceptWithJavaIoFile:dir withNSString:name];
  }
  else {
    return [super acceptWithJavaIoFile:dir withNSString:name];
  }
}

- (NSString *)description {
  NSString *delegate = fileFilter_ != nil ? [fileFilter_ description] : [((id<JavaIoFilenameFilter>) nil_chk(filenameFilter_)) description];
  return JreStrcat("$C$C", [super description], '(', delegate, ')');
}

- (void)dealloc {
  RELEASE_(filenameFilter_);
  RELEASE_(fileFilter_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFilenameFilter_(OrgApacheCommonsIoFilefilterDelegateFileFilter *self, id<JavaIoFilenameFilter> filter) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (filter == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The FilenameFilter must not be null");
  }
  JreStrongAssign(&self->filenameFilter_, filter);
  JreStrongAssign(&self->fileFilter_, nil);
}

OrgApacheCommonsIoFilefilterDelegateFileFilter *new_OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFilenameFilter_(id<JavaIoFilenameFilter> filter) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterDelegateFileFilter, initWithJavaIoFilenameFilter_, filter)
}

OrgApacheCommonsIoFilefilterDelegateFileFilter *create_OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFilenameFilter_(id<JavaIoFilenameFilter> filter) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterDelegateFileFilter, initWithJavaIoFilenameFilter_, filter)
}

void OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFileFilter_(OrgApacheCommonsIoFilefilterDelegateFileFilter *self, id<JavaIoFileFilter> filter) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (filter == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The FileFilter must not be null");
  }
  JreStrongAssign(&self->fileFilter_, filter);
  JreStrongAssign(&self->filenameFilter_, nil);
}

OrgApacheCommonsIoFilefilterDelegateFileFilter *new_OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFileFilter_(id<JavaIoFileFilter> filter) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterDelegateFileFilter, initWithJavaIoFileFilter_, filter)
}

OrgApacheCommonsIoFilefilterDelegateFileFilter *create_OrgApacheCommonsIoFilefilterDelegateFileFilter_initWithJavaIoFileFilter_(id<JavaIoFileFilter> filter) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterDelegateFileFilter, initWithJavaIoFileFilter_, filter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterDelegateFileFilter)
