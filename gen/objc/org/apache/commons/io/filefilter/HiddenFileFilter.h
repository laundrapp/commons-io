//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterHiddenFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterHiddenFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterHiddenFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterHiddenFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterHiddenFileFilter

#if !defined (OrgApacheCommonsIoFilefilterHiddenFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterHiddenFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterHiddenFileFilter))
#define OrgApacheCommonsIoFilefilterHiddenFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@protocol OrgApacheCommonsIoFilefilterIOFileFilter;

/*!
 @brief This filter accepts <code>File</code>s that are hidden.
 <p>
  Example, showing how to print out a list of the
  current directory's <i>hidden</i> files: 
 @code

  File dir = new File(".");
  String[] files = dir.list( HiddenFileFilter.HIDDEN );
  for ( int i = 0; i &lt; files.length; i++ ) {
      System.out.println(files[i]);
  } 
  
@endcode
  
 <p>
  Example, showing how to print out a list of the
  current directory's <i>visible</i> (i.e. not hidden) files: 
 @code

  File dir = new File(".");
  String[] files = dir.list( HiddenFileFilter.VISIBLE );
  for ( int i = 0; i &lt; files.length; i++ ) {
      System.out.println(files[i]);
  } 
  
@endcode
 @since 1.3
 @version $Id$
 */
@interface OrgApacheCommonsIoFilefilterHiddenFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Checks to see if the file is hidden.
 @param file the File to check
 @return <code>true</code> if the file is
   <i>hidden</i>, otherwise <code>false</code>.
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

#pragma mark Protected

/*!
 @brief Restrictive consructor.
 */
- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoFilefilterHiddenFileFilter)

/*!
 @brief Singleton instance of <i>hidden</i> filter
 */
inline id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterHiddenFileFilter_get_HIDDEN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterHiddenFileFilter_HIDDEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFilefilterHiddenFileFilter, HIDDEN, id<OrgApacheCommonsIoFilefilterIOFileFilter>)

/*!
 @brief Singleton instance of <i>visible</i> filter
 */
inline id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterHiddenFileFilter_get_VISIBLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterHiddenFileFilter_VISIBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsIoFilefilterHiddenFileFilter, VISIBLE, id<OrgApacheCommonsIoFilefilterIOFileFilter>)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterHiddenFileFilter_init(OrgApacheCommonsIoFilefilterHiddenFileFilter *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterHiddenFileFilter *new_OrgApacheCommonsIoFilefilterHiddenFileFilter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterHiddenFileFilter *create_OrgApacheCommonsIoFilefilterHiddenFileFilter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterHiddenFileFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterHiddenFileFilter")
