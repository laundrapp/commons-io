//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterWildcardFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterWildcardFilter

#if !defined (OrgApacheCommonsIoFilefilterWildcardFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterWildcardFilter))
#define OrgApacheCommonsIoFilefilterWildcardFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaIoFile;
@protocol JavaUtilList;

/*!
 @brief Filters files using the supplied wildcards.
 <p>
  This filter selects files, but not directories, based on one or more wildcards
  and using case-sensitive comparison. 
 <p>
  The wildcard matcher uses the characters '?' and '*' to represent a
  single or multiple wildcard characters.
  This is the same as often found on Dos/Unix command lines.
  The extension check is case-sensitive.
  See <code>String)</code> for more information. 
 <p>
  For example: 
 @code

  File dir = new File(".");
  FileFilter fileFilter = new WildcardFilter("*test*.java~*~");
  File[] files = dir.listFiles(fileFilter);
  for (int i = 0; i < files.length; i++) {
    System.out.println(files[i]);
  } 
  
@endcode
 @version $Id$
 @since 1.1
 */
@interface OrgApacheCommonsIoFilefilterWildcardFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a new case-sensitive wildcard filter for a list of wildcards.
 @param wildcards the list of wildcards to match
 @throw IllegalArgumentExceptionif the pattern list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)wildcards;

/*!
 @brief Construct a new case-sensitive wildcard filter for a single wildcard.
 @param wildcard the wildcard to match
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype)initWithNSString:(NSString *)wildcard;

/*!
 @brief Construct a new case-sensitive wildcard filter for an array of wildcards.
 @param wildcards the array of wildcards to match
 @throw IllegalArgumentExceptionif the pattern array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)wildcards;

/*!
 @brief Checks to see if the filename matches one of the wildcards.
 @param file the file to check
 @return true if the filename matches one of the wildcards
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Checks to see if the filename matches one of the wildcards.
 @param dir the file directory
 @param name the filename
 @return true if the filename matches one of the wildcards
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterWildcardFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(OrgApacheCommonsIoFilefilterWildcardFilter *self, NSString *wildcard);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(NSString *wildcard) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(NSString *wildcard);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterWildcardFilter *self, IOSObjectArray *wildcards);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(IOSObjectArray *wildcards) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(IOSObjectArray *wildcards);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterWildcardFilter *self, id<JavaUtilList> wildcards);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterWildcardFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFilter")
