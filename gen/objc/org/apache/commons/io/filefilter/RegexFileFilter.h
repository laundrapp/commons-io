//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterRegexFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterRegexFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterRegexFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterRegexFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterRegexFileFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoFilefilterRegexFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterRegexFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterRegexFileFilter))
#define OrgApacheCommonsIoFilefilterRegexFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@class JavaUtilRegexPattern;
@class OrgApacheCommonsIoIOCase;

/*!
 @brief Filters files using supplied regular expression(s).
 <p>
  See java.util.regex.Pattern for regex matching rules 
 <p>
  
 <p>
  e.g. 
 @code

  File dir = new File(".");
  FileFilter fileFilter = new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");
  File[] files = dir.listFiles(fileFilter);
  for (int i = 0; i < files.length; i++) {
    System.out.println(files[i]);
  } 
  
@endcode
 @version $Id$
 @since 1.4
 */
@interface OrgApacheCommonsIoFilefilterRegexFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a new regular expression filter for a compiled regular expression
 @param pattern regular expression to match
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

/*!
 @brief Construct a new regular expression filter.
 @param pattern regular string expression to match
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)pattern;

/*!
 @brief Construct a new regular expression filter with the specified flags.
 @param pattern regular string expression to match
 @param flags pattern flags - e.g. <code>Pattern.CASE_INSENSITIVE</code>
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)pattern
                                   withInt:(jint)flags;

/*!
 @brief Construct a new regular expression filter with the specified flags case sensitivity.
 @param pattern regular string expression to match
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)pattern
              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Checks to see if the filename matches one of the regular expressions.
 @param dir the file directory (ignored)
 @param name the filename
 @return true if the filename matches one of the regular expressions
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterRegexFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(NSString *pattern) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(NSString *pattern);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern, jint flags);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(NSString *pattern, jint flags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(NSString *pattern, jint flags);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, JavaUtilRegexPattern *pattern);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterRegexFileFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterRegexFileFilter")
