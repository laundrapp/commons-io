//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "org/apache/commons/io/FilenameUtils.h"
#include "org/apache/commons/io/IOCase.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/WildcardFileFilter.h"

@interface OrgApacheCommonsIoFilefilterWildcardFileFilter () {
 @public
  /*!
   @brief The wildcards that will be used to match filenames.
   */
  IOSObjectArray *wildcards_;
  /*!
   @brief Whether the comparison is case sensitive.
   */
  OrgApacheCommonsIoIOCase *caseSensitivity_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterWildcardFileFilter, wildcards_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterWildcardFileFilter, caseSensitivity_, OrgApacheCommonsIoIOCase *)

@implementation OrgApacheCommonsIoFilefilterWildcardFileFilter

- (instancetype __nonnull)initWithNSString:(NSString *)wildcard {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(self, wildcard);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)wildcard
              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(self, wildcard, caseSensitivity);
  return self;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)wildcards {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(self, wildcards);
  return self;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)wildcards
                   withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(self, wildcards, caseSensitivity);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)wildcards {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(self, wildcards);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)wildcards
                  withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(self, wildcards, caseSensitivity);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name {
  {
    IOSObjectArray *a__ = wildcards_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *wildcard = *b__++;
      if (OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(name, wildcard, caseSensitivity_)) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  NSString *name = [((JavaIoFile *) nil_chk(file)) getName];
  {
    IOSObjectArray *a__ = wildcards_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *wildcard = *b__++;
      if (OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_withOrgApacheCommonsIoIOCase_(name, wildcard, caseSensitivity_)) {
        return true;
      }
    }
  }
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:[super description]];
  [buffer appendWithNSString:@"("];
  if (wildcards_ != nil) {
    for (jint i = 0; i < wildcards_->size_; i++) {
      if (i > 0) {
        [buffer appendWithNSString:@","];
      }
      [buffer appendWithNSString:IOSObjectArray_Get(wildcards_, i)];
    }
  }
  [buffer appendWithNSString:@")"];
  return [buffer description];
}

- (void)dealloc {
  RELEASE_(wildcards_);
  RELEASE_(caseSensitivity_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, NSString *wildcard) {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(self, wildcard, nil);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(NSString *wildcard) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSString_, wildcard)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(NSString *wildcard) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSString_, wildcard)
}

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcard == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard must not be null");
  }
  JreStrongAssignAndConsume(&self->wildcards_, [IOSObjectArray newArrayWithObjects:(id[]){ wildcard } count:1 type:NSString_class_()]);
  JreStrongAssign(&self->caseSensitivity_, caseSensitivity == nil ? JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE) : caseSensitivity);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSString_withOrgApacheCommonsIoIOCase_, wildcard, caseSensitivity)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSString_withOrgApacheCommonsIoIOCase_, wildcard, caseSensitivity)
}

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, IOSObjectArray *wildcards) {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(self, wildcards, nil);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(IOSObjectArray *wildcards) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSStringArray_, wildcards)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(IOSObjectArray *wildcards) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSStringArray_, wildcards)
}

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcards == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard array must not be null");
  }
  JreStrongAssignAndConsume(&self->wildcards_, [IOSObjectArray newArrayWithLength:wildcards->size_ type:NSString_class_()]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wildcards, 0, self->wildcards_, 0, wildcards->size_);
  JreStrongAssign(&self->caseSensitivity_, caseSensitivity == nil ? JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE) : caseSensitivity);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSStringArray_withOrgApacheCommonsIoIOCase_, wildcards, caseSensitivity)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithNSStringArray_withOrgApacheCommonsIoIOCase_, wildcards, caseSensitivity)
}

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, id<JavaUtilList> wildcards) {
  OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(self, wildcards, nil);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithJavaUtilList_, wildcards)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithJavaUtilList_, wildcards)
}

void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcards == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard list must not be null");
  }
  JreStrongAssign(&self->wildcards_, [wildcards toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[wildcards size] type:NSString_class_()]]);
  JreStrongAssign(&self->caseSensitivity_, caseSensitivity == nil ? JreLoadStatic(OrgApacheCommonsIoIOCase, SENSITIVE) : caseSensitivity);
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithJavaUtilList_withOrgApacheCommonsIoIOCase_, wildcards, caseSensitivity)
}

OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFileFilter, initWithJavaUtilList_withOrgApacheCommonsIoIOCase_, wildcards, caseSensitivity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterWildcardFileFilter)
