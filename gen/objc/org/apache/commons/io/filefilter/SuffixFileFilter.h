//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterSuffixFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterSuffixFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterSuffixFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterSuffixFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterSuffixFileFilter

#if !defined (OrgApacheCommonsIoFilefilterSuffixFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterSuffixFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterSuffixFileFilter))
#define OrgApacheCommonsIoFilefilterSuffixFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@protocol JavaUtilList;

/*!
 @brief Filters files based on the suffix (what the filename ends with).
 This is used in retrieving all the files of a particular type. 
 <p>
  For example, to retrieve and print all <code>*.java</code> files 
  in the current directory: 
 @code

  File dir = new File(".");
  String[] files = dir.list( new SuffixFileFilter(".java") );
  for (int i = 0; i &lt; files.length; i++) {
      System.out.println(files[i]);
  } 
  
@endcode
 @since 1.0
 @version $Id$
 - seealso: FileFilterUtils#suffixFileFilter(String)
 - seealso: FileFilterUtils#suffixFileFilter(String, IOCase)
 */
@interface OrgApacheCommonsIoFilefilterSuffixFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new Suffix file filter for a list of suffixes.
 @param suffixes the suffixes to allow, must not be null
 @throw IllegalArgumentExceptionif the suffix list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)suffixes;

/*!
 @brief Constructs a new Suffix file filter for a list of suffixes
  specifying case-sensitivity.
 @param suffixes the suffixes to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the suffix list is null
 @throw ClassCastExceptionif the list does not contain Strings
 @since 1.4
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)suffixes
        withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Constructs a new Suffix file filter for a single extension.
 @param suffix the suffix to allow, must not be null
 @throw IllegalArgumentExceptionif the suffix is null
 */
- (instancetype)initWithNSString:(NSString *)suffix;

/*!
 @brief Constructs a new Suffix file filter for a single extension
  specifying case-sensitivity.
 @param suffix the suffix to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the suffix is null
 @since 1.4
 */
- (instancetype)initWithNSString:(NSString *)suffix
    withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Constructs a new Suffix file filter for an array of suffixs.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param suffixes the suffixes to allow, must not be null
 @throw IllegalArgumentExceptionif the suffix array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)suffixes;

/*!
 @brief Constructs a new Suffix file filter for an array of suffixs
  specifying case-sensitivity.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param suffixes the suffixes to allow, must not be null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the suffix array is null
 @since 1.4
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)suffixes
         withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Checks to see if the filename ends with the suffix.
 @param file the File to check
 @return true if the filename ends with one of our suffixes
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Checks to see if the filename ends with the suffix.
 @param file the File directory
 @param name the filename
 @return true if the filename ends with one of our suffixes
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name;

/*!
 @brief Provide a String representaion of this file filter.
 @return a String representaion
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterSuffixFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, NSString *suffix);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_(NSString *suffix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_(NSString *suffix);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, NSString *suffix, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *suffix, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *suffix, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, IOSObjectArray *suffixes);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_(IOSObjectArray *suffixes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_(IOSObjectArray *suffixes);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, IOSObjectArray *suffixes, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *suffixes, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *suffixes, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, id<JavaUtilList> suffixes);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_(id<JavaUtilList> suffixes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_(id<JavaUtilList> suffixes);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterSuffixFileFilter *self, id<JavaUtilList> suffixes, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *new_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> suffixes, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterSuffixFileFilter *create_OrgApacheCommonsIoFilefilterSuffixFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> suffixes, OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterSuffixFileFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterSuffixFileFilter")
