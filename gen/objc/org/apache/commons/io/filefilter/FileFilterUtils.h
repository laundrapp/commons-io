//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterFileFilterUtils")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterFileFilterUtils
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterFileFilterUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterFileFilterUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterFileFilterUtils

#if !defined (OrgApacheCommonsIoFilefilterFileFilterUtils_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterFileFilterUtils || defined(INCLUDE_OrgApacheCommonsIoFilefilterFileFilterUtils))
#define OrgApacheCommonsIoFilefilterFileFilterUtils_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaUtilDate;
@class OrgApacheCommonsIoIOCase;
@protocol JavaIoFileFilter;
@protocol JavaIoFilenameFilter;
@protocol JavaLangIterable;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgApacheCommonsIoFilefilterIOFileFilter;

/*!
 @brief Useful utilities for working with file filters.It provides access to all
  file filter implementations in this package so you don't have to import
  every class you use.
 @since 1.0
 @version $Id$
 */
@interface OrgApacheCommonsIoFilefilterFileFilterUtils : NSObject

#pragma mark Public

/*!
 @brief FileFilterUtils is not normally instantiated.
 */
- (instancetype)init;

/*!
 @brief Returns a filter that returns true if the file was last modified after
  the specified cutoff date.
 @param cutoffDate the time threshold
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithJavaUtilDate:(JavaUtilDate *)cutoffDate;

/*!
 @brief Returns a filter that filters files based on a cutoff date.
 @param cutoffDate the time threshold
 @param acceptOlder if true, older files get accepted, if false, newer
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithJavaUtilDate:(JavaUtilDate *)cutoffDate
                                                                  withBoolean:(jboolean)acceptOlder;

/*!
 @brief Returns a filter that returns true if the file was last modified after
  the specified reference file.
 @param cutoffReference the file whose last modification         time is usesd as the threshold age of the files
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithJavaIoFile:(JavaIoFile *)cutoffReference;

/*!
 @brief Returns a filter that filters files based on a cutoff reference file.
 @param cutoffReference the file whose last modification         time is usesd as the threshold age of the files
 @param acceptOlder if true, older files get accepted, if false, newer
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithJavaIoFile:(JavaIoFile *)cutoffReference
                                                                withBoolean:(jboolean)acceptOlder;

/*!
 @brief Returns a filter that returns true if the file was last modified after
  the specified cutoff time.
 @param cutoff the time threshold
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithLong:(jlong)cutoff;

/*!
 @brief Returns a filter that filters files based on a cutoff time.
 @param cutoff the time threshold
 @param acceptOlder if true, older files get accepted, if false, newer
 @return an appropriately configured age file filter
 - seealso: AgeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)ageFileFilterWithLong:(jlong)cutoff
                                                          withBoolean:(jboolean)acceptOlder;

/*!
 @brief Returns a filter that ANDs the specified filters.
 @param filters the IOFileFilters that will be ANDed together.
 @return a filter that ANDs the specified filters
 @throw IllegalArgumentExceptionif the filters are null or contain a 
          null value.
 - seealso: AndFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)and__WithOrgApacheCommonsIoFilefilterIOFileFilterArray:(IOSObjectArray *)filters;

/*!
 @brief Returns a filter that ANDs the two specified filters.
 @param filter1 the first filter
 @param filter2 the second filter
 @return a filter that ANDs the two specified filters
 - seealso: #and(IOFileFilter...)
 - seealso: AndFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)andFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter1
                                                             withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter2;

/*!
 @brief Returns an <code>IOFileFilter</code> that wraps the 
 <code>FileFilter</code> instance.
 @param filter the filter to be wrapped
 @return a new filter that implements IOFileFilter
 - seealso: DelegateFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)asFileFilterWithJavaIoFileFilter:(id<JavaIoFileFilter>)filter;

/*!
 @brief Returns an <code>IOFileFilter</code> that wraps the 
 <code>FilenameFilter</code> instance.
 @param filter the filter to be wrapped
 @return a new filter that implements IOFileFilter
 - seealso: DelegateFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)asFileFilterWithJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter;

/*!
 @brief Returns a filter that checks if the file is a directory.
 @return file filter that accepts only directories and not files
 - seealso: DirectoryFileFilter#DIRECTORY
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)directoryFileFilter;

/*!
 @brief Returns a filter that always returns false.
 @return a false filter
 - seealso: FalseFileFilter#FALSE
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)falseFileFilter;

/*!
 @brief Returns a filter that checks if the file is a file (and not a directory).
 @return file filter that accepts only files and not directories
 - seealso: FileFileFilter#FILE
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)fileFileFilter;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting array is a subset of the original file list that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>Set</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  Set&lt;File&gt; allFiles = ...
  Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles,
      FileFilterUtils.suffixFileFilter(".java")); 
  
@endcode
 @param filter the filter to apply to the set of files.
 @param files the array of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (IOSObjectArray *)filterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                   withJavaIoFileArray:(IOSObjectArray *)files;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting array is a subset of the original file list that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>Set</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  Set&lt;File&gt; allFiles = ...
  Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles,
      FileFilterUtils.suffixFileFilter(".java")); 
  
@endcode
 @param filter the filter to apply to the set of files.
 @param files the array of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (IOSObjectArray *)filterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                  withJavaLangIterable:(id<JavaLangIterable>)files;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting list is a subset of the original files that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>List</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  List&lt;File&gt; filesAndDirectories = ...
  List&lt;File&gt; directories = FileFilterUtils.filterList(filesAndDirectories,
      FileFilterUtils.directoryFileFilter()); 
  
@endcode
 @param filter the filter to apply to each files in the list.
 @param files the collection of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (id<JavaUtilList>)filterListWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                       withJavaIoFileArray:(IOSObjectArray *)files;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting list is a subset of the original files that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>List</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  List&lt;File&gt; filesAndDirectories = ...
  List&lt;File&gt; directories = FileFilterUtils.filterList(filesAndDirectories,
      FileFilterUtils.directoryFileFilter()); 
  
@endcode
 @param filter the filter to apply to each files in the list.
 @param files the collection of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (id<JavaUtilList>)filterListWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                      withJavaLangIterable:(id<JavaLangIterable>)files;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting set is a subset of the original file list that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>Set</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  Set&lt;File&gt; allFiles = ...
  Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles,
      FileFilterUtils.suffixFileFilter(".java")); 
  
@endcode
 @param filter the filter to apply to the set of files.
 @param files the collection of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (id<JavaUtilSet>)filterSetWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                     withJavaIoFileArray:(IOSObjectArray *)files;

/*!
 @brief <p>
  Applies an <code>IOFileFilter</code> to the provided <code>File</code> 
  objects.
 The resulting set is a subset of the original file list that 
  matches the provided filter. 
 </p>
   
 <p>
  The <code>Set</code> returned by this method is not guaranteed to be thread safe. 
 </p>
   
 @code

  Set&lt;File&gt; allFiles = ...
  Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles,
      FileFilterUtils.suffixFileFilter(".java")); 
  
@endcode
 @param filter the filter to apply to the set of files.
 @param files the collection of files to apply the filter to.
 @return a subset of <code>files</code> that is accepted by the 
          file filter.
 @throw IllegalArgumentExceptionif the filter is <code>null</code> 
          or <code>files</code> contains a <code>null</code> value.
 @since 2.0
 */
+ (id<JavaUtilSet>)filterSetWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter
                                                    withJavaLangIterable:(id<JavaLangIterable>)files;

/*!
 @brief Returns a filter that accepts files that begin with the provided magic
  number.
 @param magicNumber the magic number (byte sequence) to match at the          beginning of each file.
 @return an IOFileFilter that accepts files beginning with the provided
          magic number.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code> or is of length zero.
 - seealso: MagicNumberFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)magicNumberFileFilterWithByteArray:(IOSByteArray *)magicNumber;

/*!
 @brief Returns a filter that accepts files that contains the provided magic
  number at a specified offset within the file.
 @param magicNumber the magic number (byte sequence) to match at the          provided offset in each file.
 @param offset the offset within the files to look for the magic number.
 @return an IOFileFilter that accepts files containing the magic number
          at the specified offset.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code>, or contains no bytes, or <code>offset</code> 
          is a negative number.
 - seealso: MagicNumberFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)magicNumberFileFilterWithByteArray:(IOSByteArray *)magicNumber
                                                                          withLong:(jlong)offset;

/*!
 @brief Returns a filter that accepts files that begin with the provided magic
  number.
 @param magicNumber the magic number (byte sequence) to match at the          beginning of each file.
 @return an IOFileFilter that accepts files beginning with the provided
          magic number.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code> or the empty String.
 - seealso: MagicNumberFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)magicNumberFileFilterWithNSString:(NSString *)magicNumber;

/*!
 @brief Returns a filter that accepts files that contains the provided magic
  number at a specified offset within the file.
 @param magicNumber the magic number (byte sequence) to match at the          provided offset in each file.
 @param offset the offset within the files to look for the magic number.
 @return an IOFileFilter that accepts files containing the magic number
          at the specified offset.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code> or the empty String, or if offset is a 
          negative number.
 - seealso: MagicNumberFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)magicNumberFileFilterWithNSString:(NSString *)magicNumber
                                                                         withLong:(jlong)offset;

/*!
 @brief Decorates a filter to make it ignore CVS directories.
 Passing in <code>null</code> will return a filter that accepts everything
  except CVS directories.
 @param filter the filter to decorate, null means an unrestricted filter
 @return the decorated filter, never null
 @since 1.1 (method existed but had bug in 1.0)
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)makeCVSAwareWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Decorates a filter so that it only applies to directories and not to files.
 @param filter the filter to decorate, null means an unrestricted filter
 @return the decorated filter, never null
 - seealso: DirectoryFileFilter#DIRECTORY
 @since 1.3
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)makeDirectoryOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Decorates a filter so that it only applies to files and not to directories.
 @param filter the filter to decorate, null means an unrestricted filter
 @return the decorated filter, never null
 - seealso: FileFileFilter#FILE
 @since 1.3
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)makeFileOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Decorates a filter to make it ignore SVN directories.
 Passing in <code>null</code> will return a filter that accepts everything
  except SVN directories.
 @param filter the filter to decorate, null means an unrestricted filter
 @return the decorated filter, never null
 @since 1.1
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)makeSVNAwareWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Returns a filter that returns true if the filename matches the specified text.
 @param name the filename
 @return a name checking filter
 - seealso: NameFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)nameFileFilterWithNSString:(NSString *)name;

/*!
 @brief Returns a filter that returns true if the filename matches the specified text.
 @param name the filename
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @return a name checking filter
 - seealso: NameFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)nameFileFilterWithNSString:(NSString *)name
                                              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Returns a filter that NOTs the specified filter.
 @param filter the filter to invert
 @return a filter that NOTs the specified filter
 - seealso: NotFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)notFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter;

/*!
 @brief Returns a filter that ORs the specified filters.
 @param filters the IOFileFilters that will be ORed together.
 @return a filter that ORs the specified filters
 @throw IllegalArgumentExceptionif the filters are null or contain a 
          null value.
 - seealso: OrFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)or__WithOrgApacheCommonsIoFilefilterIOFileFilterArray:(IOSObjectArray *)filters;

/*!
 @brief Returns a filter that ORs the two specified filters.
 @param filter1 the first filter
 @param filter2 the second filter
 @return a filter that ORs the two specified filters
 - seealso: #or(IOFileFilter...)
 - seealso: OrFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)orFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter1
                                                            withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter2;

/*!
 @brief Returns a filter that returns true if the filename starts with the specified text.
 @param prefix the filename prefix
 @return a prefix checking filter
 - seealso: PrefixFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)prefixFileFilterWithNSString:(NSString *)prefix;

/*!
 @brief Returns a filter that returns true if the filename starts with the specified text.
 @param prefix the filename prefix
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @return a prefix checking filter
 - seealso: PrefixFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)prefixFileFilterWithNSString:(NSString *)prefix
                                                withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Returns a filter that returns true if the file is bigger than a certain size.
 @param threshold the file size threshold
 @return an appropriately configured SizeFileFilter
 - seealso: SizeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)sizeFileFilterWithLong:(jlong)threshold;

/*!
 @brief Returns a filter that filters based on file size.
 @param threshold the file size threshold
 @param acceptLarger if true, larger files get accepted, if false, smaller
 @return an appropriately configured SizeFileFilter
 - seealso: SizeFileFilter
 @since 1.2
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)sizeFileFilterWithLong:(jlong)threshold
                                                           withBoolean:(jboolean)acceptLarger;

/*!
 @brief Returns a filter that accepts files whose size is &gt;= minimum size
  and &lt;= maximum size.
 @param minSizeInclusive the minimum file size (inclusive)
 @param maxSizeInclusive the maximum file size (inclusive)
 @return an appropriately configured IOFileFilter
 - seealso: SizeFileFilter
 @since 1.3
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)sizeRangeFileFilterWithLong:(jlong)minSizeInclusive
                                                                   withLong:(jlong)maxSizeInclusive;

/*!
 @brief Returns a filter that returns true if the filename ends with the specified text.
 @param suffix the filename suffix
 @return a suffix checking filter
 - seealso: SuffixFileFilter
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)suffixFileFilterWithNSString:(NSString *)suffix;

/*!
 @brief Returns a filter that returns true if the filename ends with the specified text.
 @param suffix the filename suffix
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @return a suffix checking filter
 - seealso: SuffixFileFilter
 @since 2.0
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)suffixFileFilterWithNSString:(NSString *)suffix
                                                withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Create a List of file filters.
 @param filters The file filters
 @return The list of file filters
 @throw IllegalArgumentExceptionif the filters are null or contain a 
          null value.
 @since 2.0
 */
+ (id<JavaUtilList>)toListWithOrgApacheCommonsIoFilefilterIOFileFilterArray:(IOSObjectArray *)filters;

/*!
 @brief Returns a filter that always returns true.
 @return a true filter
 - seealso: TrueFileFilter#TRUE
 */
+ (id<OrgApacheCommonsIoFilefilterIOFileFilter>)trueFileFilter;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsIoFilefilterFileFilterUtils)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterFileFilterUtils_init(OrgApacheCommonsIoFilefilterFileFilterUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterFileFilterUtils *new_OrgApacheCommonsIoFilefilterFileFilterUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterFileFilterUtils *create_OrgApacheCommonsIoFilefilterFileFilterUtils_init(void);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFilefilterFileFilterUtils_filterWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaIoFileArray_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, IOSObjectArray *files);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsIoFilefilterFileFilterUtils_filterWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaLangIterable_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, id<JavaLangIterable> files);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFilefilterFileFilterUtils_filterListWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaLangIterable_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, id<JavaLangIterable> files);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFilefilterFileFilterUtils_filterListWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaIoFileArray_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, IOSObjectArray *files);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheCommonsIoFilefilterFileFilterUtils_filterSetWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaIoFileArray_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, IOSObjectArray *files);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheCommonsIoFilefilterFileFilterUtils_filterSetWithOrgApacheCommonsIoFilefilterIOFileFilter_withJavaLangIterable_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter, id<JavaLangIterable> files);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_prefixFileFilterWithNSString_(NSString *prefix);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_prefixFileFilterWithNSString_withOrgApacheCommonsIoIOCase_(NSString *prefix, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_suffixFileFilterWithNSString_(NSString *suffix);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_suffixFileFilterWithNSString_withOrgApacheCommonsIoIOCase_(NSString *suffix, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_nameFileFilterWithNSString_(NSString *name);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_nameFileFilterWithNSString_withOrgApacheCommonsIoIOCase_(NSString *name, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_directoryFileFilter(void);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_fileFileFilter(void);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_andFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_orFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_and__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_(IOSObjectArray *filters);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_or__WithOrgApacheCommonsIoFilefilterIOFileFilterArray_(IOSObjectArray *filters);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsIoFilefilterFileFilterUtils_toListWithOrgApacheCommonsIoFilefilterIOFileFilterArray_(IOSObjectArray *filters);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_notFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_trueFileFilter(void);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_falseFileFilter(void);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_asFileFilterWithJavaIoFileFilter_(id<JavaIoFileFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_asFileFilterWithJavaIoFilenameFilter_(id<JavaIoFilenameFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithLong_(jlong cutoff);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithLong_withBoolean_(jlong cutoff, jboolean acceptOlder);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithJavaUtilDate_(JavaUtilDate *cutoffDate);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithJavaUtilDate_withBoolean_(JavaUtilDate *cutoffDate, jboolean acceptOlder);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithJavaIoFile_(JavaIoFile *cutoffReference);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_ageFileFilterWithJavaIoFile_withBoolean_(JavaIoFile *cutoffReference, jboolean acceptOlder);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_sizeFileFilterWithLong_(jlong threshold);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_sizeFileFilterWithLong_withBoolean_(jlong threshold, jboolean acceptLarger);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_sizeRangeFileFilterWithLong_withLong_(jlong minSizeInclusive, jlong maxSizeInclusive);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_magicNumberFileFilterWithNSString_(NSString *magicNumber);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_magicNumberFileFilterWithNSString_withLong_(NSString *magicNumber, jlong offset);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_magicNumberFileFilterWithByteArray_(IOSByteArray *magicNumber);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_magicNumberFileFilterWithByteArray_withLong_(IOSByteArray *magicNumber, jlong offset);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_makeCVSAwareWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_makeSVNAwareWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_makeDirectoryOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

FOUNDATION_EXPORT id<OrgApacheCommonsIoFilefilterIOFileFilter> OrgApacheCommonsIoFilefilterFileFilterUtils_makeFileOnlyWithOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterFileFilterUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterFileFilterUtils")
