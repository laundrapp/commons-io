//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/io/IOCase.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/RegexFileFilter.h"

@interface OrgApacheCommonsIoFilefilterRegexFileFilter () {
 @public
  /*!
   @brief The regular expression pattern that will be used to match filenames
   */
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterRegexFileFilter, pattern_, JavaUtilRegexPattern *)

@implementation OrgApacheCommonsIoFilefilterRegexFileFilter

- (instancetype __nonnull)initWithNSString:(NSString *)pattern {
  OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(self, pattern);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)pattern
              withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity {
  OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(self, pattern, caseSensitivity);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)pattern
                                   withInt:(jint)flags {
  OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(self, pattern, flags);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:name])) matches];
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (pattern == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Pattern is missing");
  }
  JreStrongAssign(&self->pattern_, JavaUtilRegexPattern_compileWithNSString_(pattern));
}

OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(NSString *pattern) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_, pattern)
}

OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_(NSString *pattern) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_, pattern)
}

void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (pattern == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Pattern is missing");
  }
  jint flags = 0;
  if (caseSensitivity != nil && ![caseSensitivity isCaseSensitive]) {
    flags = JavaUtilRegexPattern_CASE_INSENSITIVE;
  }
  JreStrongAssign(&self->pattern_, JavaUtilRegexPattern_compileWithNSString_withInt_(pattern, flags));
}

OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_withOrgApacheCommonsIoIOCase_, pattern, caseSensitivity)
}

OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *pattern, OrgApacheCommonsIoIOCase *caseSensitivity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_withOrgApacheCommonsIoIOCase_, pattern, caseSensitivity)
}

void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, NSString *pattern, jint flags) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (pattern == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Pattern is missing");
  }
  JreStrongAssign(&self->pattern_, JavaUtilRegexPattern_compileWithNSString_withInt_(pattern, flags));
}

OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(NSString *pattern, jint flags) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_withInt_, pattern, flags)
}

OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithNSString_withInt_(NSString *pattern, jint flags) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithNSString_withInt_, pattern, flags)
}

void OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(OrgApacheCommonsIoFilefilterRegexFileFilter *self, JavaUtilRegexPattern *pattern) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (pattern == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Pattern is missing");
  }
  JreStrongAssign(&self->pattern_, pattern);
}

OrgApacheCommonsIoFilefilterRegexFileFilter *new_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithJavaUtilRegexPattern_, pattern)
}

OrgApacheCommonsIoFilefilterRegexFileFilter *create_OrgApacheCommonsIoFilefilterRegexFileFilter_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterRegexFileFilter, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterRegexFileFilter)
