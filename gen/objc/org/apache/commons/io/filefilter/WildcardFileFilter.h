//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterWildcardFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterWildcardFileFilter

#if !defined (OrgApacheCommonsIoFilefilterWildcardFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterWildcardFileFilter))
#define OrgApacheCommonsIoFilefilterWildcardFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaIoFile;
@class OrgApacheCommonsIoIOCase;
@protocol JavaUtilList;

/*!
 @brief Filters files using the supplied wildcards.
 <p>
  This filter selects files and directories based on one or more wildcards.
  Testing is case-sensitive by default, but this can be configured. 
 <p>
  The wildcard matcher uses the characters '?' and '*' to represent a
  single or multiple wildcard characters.
  This is the same as often found on Dos/Unix command lines.
  The extension check is case-sensitive by .
  See <code>FilenameUtils.wildcardMatchOnSystem</code> for more information. 
 <p>
  For example: 
 @code

  File dir = new File(".");
  FileFilter fileFilter = new WildcardFileFilter("*test*.java~*~");
  File[] files = dir.listFiles(fileFilter);
  for (int i = 0; i < files.length; i++) {
    System.out.println(files[i]);
  } 
  
@endcode
 @version $Id$
 @since 1.3
 */
@interface OrgApacheCommonsIoFilefilterWildcardFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct a new case-sensitive wildcard filter for a list of wildcards.
 @param wildcards the list of wildcards to match, not null
 @throw IllegalArgumentExceptionif the pattern list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)wildcards;

/*!
 @brief Construct a new wildcard filter for a list of wildcards specifying case-sensitivity.
 @param wildcards the list of wildcards to match, not null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the pattern list is null
 @throw ClassCastExceptionif the list does not contain Strings
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)wildcards
        withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Construct a new case-sensitive wildcard filter for a single wildcard.
 @param wildcard the wildcard to match
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype)initWithNSString:(NSString *)wildcard;

/*!
 @brief Construct a new wildcard filter for a single wildcard specifying case-sensitivity.
 @param wildcard the wildcard to match, not null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the pattern is null
 */
- (instancetype)initWithNSString:(NSString *)wildcard
    withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Construct a new case-sensitive wildcard filter for an array of wildcards.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param wildcards the array of wildcards to match
 @throw IllegalArgumentExceptionif the pattern array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)wildcards;

/*!
 @brief Construct a new wildcard filter for an array of wildcards specifying case-sensitivity.
 <p>
  The array is not cloned, so could be changed after constructing the
  instance. This would be inadvisable however.
 @param wildcards the array of wildcards to match, not null
 @param caseSensitivity how to handle case sensitivity, null means case-sensitive
 @throw IllegalArgumentExceptionif the pattern array is null
 */
- (instancetype)initWithNSStringArray:(IOSObjectArray *)wildcards
         withOrgApacheCommonsIoIOCase:(OrgApacheCommonsIoIOCase *)caseSensitivity;

/*!
 @brief Checks to see if the filename matches one of the wildcards.
 @param file the file to check
 @return true if the filename matches one of the wildcards
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Checks to see if the filename matches one of the wildcards.
 @param dir the file directory (ignored)
 @param name the filename
 @return true if the filename matches one of the wildcards
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name;

/*!
 @brief Provide a String representaion of this file filter.
 @return a String representaion
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterWildcardFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, NSString *wildcard);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(NSString *wildcard) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_(NSString *wildcard);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSString_withOrgApacheCommonsIoIOCase_(NSString *wildcard, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, IOSObjectArray *wildcards);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(IOSObjectArray *wildcards) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_(IOSObjectArray *wildcards);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithNSStringArray_withOrgApacheCommonsIoIOCase_(IOSObjectArray *wildcards, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, id<JavaUtilList> wildcards);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(OrgApacheCommonsIoFilefilterWildcardFileFilter *self, id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *new_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterWildcardFileFilter *create_OrgApacheCommonsIoFilefilterWildcardFileFilter_initWithJavaUtilList_withOrgApacheCommonsIoIOCase_(id<JavaUtilList> wildcards, OrgApacheCommonsIoIOCase *caseSensitivity);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterWildcardFileFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterWildcardFileFilter")
