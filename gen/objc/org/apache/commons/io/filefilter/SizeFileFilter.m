//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/SizeFileFilter.h"

@interface OrgApacheCommonsIoFilefilterSizeFileFilter () {
 @public
  /*!
   @brief The size threshold.
   */
  jlong size_;
  /*!
   @brief Whether the files accepted will be larger or smaller.
   */
  jboolean acceptLarger_;
}

@end

@implementation OrgApacheCommonsIoFilefilterSizeFileFilter

- (instancetype)initWithLong:(jlong)size {
  OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_(self, size);
  return self;
}

- (instancetype)initWithLong:(jlong)size
                 withBoolean:(jboolean)acceptLarger {
  OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_withBoolean_(self, size, acceptLarger);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  jboolean smaller = [((JavaIoFile *) nil_chk(file)) length] < size_;
  return acceptLarger_ ? !smaller : smaller;
}

- (NSString *)description {
  NSString *condition = acceptLarger_ ? @">=" : @"<";
  return JreStrcat("$C$JC", [super description], '(', condition, size_, ')');
}

@end

void OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_(OrgApacheCommonsIoFilefilterSizeFileFilter *self, jlong size) {
  OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_withBoolean_(self, size, true);
}

OrgApacheCommonsIoFilefilterSizeFileFilter *new_OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_(jlong size) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterSizeFileFilter, initWithLong_, size)
}

OrgApacheCommonsIoFilefilterSizeFileFilter *create_OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_(jlong size) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterSizeFileFilter, initWithLong_, size)
}

void OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_withBoolean_(OrgApacheCommonsIoFilefilterSizeFileFilter *self, jlong size, jboolean acceptLarger) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (size < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The size must be non-negative");
  }
  self->size_ = size;
  self->acceptLarger_ = acceptLarger;
}

OrgApacheCommonsIoFilefilterSizeFileFilter *new_OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_withBoolean_(jlong size, jboolean acceptLarger) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterSizeFileFilter, initWithLong_withBoolean_, size, acceptLarger)
}

OrgApacheCommonsIoFilefilterSizeFileFilter *create_OrgApacheCommonsIoFilefilterSizeFileFilter_initWithLong_withBoolean_(jlong size, jboolean acceptLarger) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterSizeFileFilter, initWithLong_withBoolean_, size, acceptLarger)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterSizeFileFilter)
