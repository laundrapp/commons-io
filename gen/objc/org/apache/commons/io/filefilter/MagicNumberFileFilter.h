//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterMagicNumberFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterMagicNumberFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterMagicNumberFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterMagicNumberFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterMagicNumberFileFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoFilefilterMagicNumberFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterMagicNumberFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterMagicNumberFileFilter))
#define OrgApacheCommonsIoFilefilterMagicNumberFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class JavaIoFile;

/*!
 @brief <p>
  File filter for matching files containing a "magic number".
 A magic number 
  is a unique series of bytes common to all files of a specific file format.
  For instance, all Java class files begin with the bytes  
 <code>0xCAFEBABE</code>.  
 </p>
   
 <code>@code

  File dir = new File(".");
  MagicNumberFileFilter javaClassFileFilter =
      MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE, 
        (byte) 0xBA, (byte) 0xBE}); 
  String[] javaClassFiles = dir.list(javaClassFileFilter);
  for (String javaClassFile : javaClassFiles) {
      System.out.println(javaClassFile);
  } 
  
@endcode</code>
   
 <p>
  Sometimes, such as in the case of TAR files, the
  magic number will be offset by a certain number of bytes in the file. In the
  case of TAR archive files, this offset is 257 bytes. 
 </p>
   
 <code>@code

  File dir = new File(".");
  MagicNumberFileFilter tarFileFilter = 
      MagicNumberFileFilter("ustar", 257); 
  String[] tarFiles = dir.list(tarFileFilter);
  for (String tarFile : tarFiles) {
      System.out.println(tarFile);
  } 
  
@endcode</code>
 @since 2.0
 - seealso: FileFilterUtils#magicNumberFileFilter(byte[])
 - seealso: FileFilterUtils#magicNumberFileFilter(String)
 - seealso: FileFilterUtils#magicNumberFileFilter(byte[], long)
 - seealso: FileFilterUtils#magicNumberFileFilter(String, long)
 */
@interface OrgApacheCommonsIoFilefilterMagicNumberFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < JavaIoSerializable >

#pragma mark Public

/*!
 @brief <p>
  Constructs a new MagicNumberFileFilter and associates it with the magic
  number to test for in files.
 This constructor assumes a starting offset
  of <code>0</code>.
  </p>
   
 <p>
  It is important to note that <em>the array is not cloned</em> and that
  any changes to the magic number array after construction will affect the
  behavior of this file filter. 
 </p>
   
 <code>@code

  MagicNumberFileFilter javaClassFileFilter =
      MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE, 
        (byte) 0xBA, (byte) 0xBE});  
  
@endcode</code>
 @param magicNumber the magic number to look for in the file.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code>, or contains no bytes.
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)magicNumber;

/*!
 @brief <p>
  Constructs a new MagicNumberFileFilter and associates it with the magic
  number to test for in files and the byte offset location in the file to
  to look for that magic number.
 </p>
   
 <p>
  It is important to note that <em>the array is not cloned</em> and that
  any changes to the magic number array after construction will affect the
  behavior of this file filter. 
 </p>
   
 <code>@code

  MagicNumberFileFilter tarFileFilter =
      MagicNumberFileFilter(new byte[] {0x75, 0x73, 0x74, 0x61, 0x72}, 257);  
  
@endcode</code>
   
 <code>@code

  MagicNumberFileFilter javaClassFileFilter =
      MagicNumberFileFilter(new byte[] {0xCA, 0xFE, 0xBA, 0xBE}, 0);  
  
@endcode</code>
 @param magicNumber the magic number to look for in the file.
 @param offset the byte offset in the file to start comparing bytes.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code>, or contains no bytes, or <code>offset</code> 
          is a negative number.
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)magicNumber
                                   withLong:(jlong)offset;

/*!
 @brief <p>
  Constructs a new MagicNumberFileFilter and associates it with the magic
  number to test for in files.
 This constructor assumes a starting offset
  of <code>0</code>.
  </p>
  
  Example usage: 
 @code

   MagicNumberFileFilter xmlFileFilter = 
      MagicNumberFileFilter("<?xml");  
   
@endcode
 @param magicNumber the magic number to look for in the file.         The string is converted to bytes using the platform default charset.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code> or the empty String.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)magicNumber;

/*!
 @brief <p>
  Constructs a new MagicNumberFileFilter and associates it with the magic
  number to test for in files and the byte offset location in the file to
  to look for that magic number.
 </p>
   
 <code>@code

  MagicNumberFileFilter tarFileFilter = 
      MagicNumberFileFilter("ustar", 257);  
  
@endcode</code>
 @param magicNumber the magic number to look for in the file.          The string is converted to bytes using the platform default charset.
 @param offset the byte offset in the file to start comparing bytes.
 @throw IllegalArgumentExceptionif <code>magicNumber</code> is 
          <code>null</code> or the empty String, or <code>offset</code> is 
          a negative number.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)magicNumber
                                  withLong:(jlong)offset;

/*!
 @brief <p>
  Accepts the provided file if the file contains the file filter's magic
  number at the specified offset.
 </p>
   
 <p>
  If any <code>IOException</code>s occur while reading the file, the file will
  be rejected. 
 </p>
 @param file the file to accept or reject.
 @return <code>true</code> if the file contains the filter's magic number 
          at the specified offset, <code>false</code> otherwise.
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Returns a String representation of the file filter, which includes the 
  magic number bytes and byte offset.
 @return a String representation of the file filter.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterMagicNumberFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, IOSByteArray *magicNumber);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(IOSByteArray *magicNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_(IOSByteArray *magicNumber);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, NSString *magicNumber);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(NSString *magicNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_(NSString *magicNumber);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, NSString *magicNumber, jlong offset);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(NSString *magicNumber, jlong offset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithNSString_withLong_(NSString *magicNumber, jlong offset);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(OrgApacheCommonsIoFilefilterMagicNumberFileFilter *self, IOSByteArray *magicNumber, jlong offset);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *new_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(IOSByteArray *magicNumber, jlong offset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterMagicNumberFileFilter *create_OrgApacheCommonsIoFilefilterMagicNumberFileFilter_initWithByteArray_withLong_(IOSByteArray *magicNumber, jlong offset);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterMagicNumberFileFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterMagicNumberFileFilter")
