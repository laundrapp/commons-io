//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "org/apache/commons/io/FilenameUtils.h"
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"
#include "org/apache/commons/io/filefilter/WildcardFilter.h"

@interface OrgApacheCommonsIoFilefilterWildcardFilter () {
 @public
  /*!
   @brief The wildcards that will be used to match filenames.
   */
  IOSObjectArray *wildcards_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsIoFilefilterWildcardFilter, wildcards_, IOSObjectArray *)

@implementation OrgApacheCommonsIoFilefilterWildcardFilter

- (instancetype __nonnull)initWithNSString:(NSString *)wildcard {
  OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(self, wildcard);
  return self;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)wildcards {
  OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(self, wildcards);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)wildcards {
  OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(self, wildcards);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name {
  if (dir != nil && [create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, name) isDirectory]) {
    return false;
  }
  {
    IOSObjectArray *a__ = wildcards_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *wildcard = *b__++;
      if (OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_(name, wildcard)) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    return false;
  }
  {
    IOSObjectArray *a__ = wildcards_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *wildcard = *b__++;
      if (OrgApacheCommonsIoFilenameUtils_wildcardMatchWithNSString_withNSString_([file getName], wildcard)) {
        return true;
      }
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(wildcards_);
  [super dealloc];
}

@end

void OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(OrgApacheCommonsIoFilefilterWildcardFilter *self, NSString *wildcard) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcard == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard must not be null");
  }
  JreStrongAssignAndConsume(&self->wildcards_, [IOSObjectArray newArrayWithObjects:(id[]){ wildcard } count:1 type:NSString_class_()]);
}

OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(NSString *wildcard) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithNSString_, wildcard)
}

OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSString_(NSString *wildcard) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithNSString_, wildcard)
}

void OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(OrgApacheCommonsIoFilefilterWildcardFilter *self, IOSObjectArray *wildcards) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcards == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard array must not be null");
  }
  JreStrongAssignAndConsume(&self->wildcards_, [IOSObjectArray newArrayWithLength:wildcards->size_ type:NSString_class_()]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wildcards, 0, self->wildcards_, 0, wildcards->size_);
}

OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(IOSObjectArray *wildcards) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithNSStringArray_, wildcards)
}

OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithNSStringArray_(IOSObjectArray *wildcards) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithNSStringArray_, wildcards)
}

void OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterWildcardFilter *self, id<JavaUtilList> wildcards) {
  OrgApacheCommonsIoFilefilterAbstractFileFilter_init(self);
  if (wildcards == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The wildcard list must not be null");
  }
  JreStrongAssign(&self->wildcards_, [wildcards toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[wildcards size] type:NSString_class_()]]);
}

OrgApacheCommonsIoFilefilterWildcardFilter *new_OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithJavaUtilList_, wildcards)
}

OrgApacheCommonsIoFilefilterWildcardFilter *create_OrgApacheCommonsIoFilefilterWildcardFilter_initWithJavaUtilList_(id<JavaUtilList> wildcards) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsIoFilefilterWildcardFilter, initWithJavaUtilList_, wildcards)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsIoFilefilterWildcardFilter)
