//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/commons-io/src/main/java/org/apache/commons/io/filefilter/AndFileFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterAndFileFilter")
#ifdef RESTRICT_OrgApacheCommonsIoFilefilterAndFileFilter
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterAndFileFilter 0
#else
#define INCLUDE_ALL_OrgApacheCommonsIoFilefilterAndFileFilter 1
#endif
#undef RESTRICT_OrgApacheCommonsIoFilefilterAndFileFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsIoFilefilterAndFileFilter_) && (INCLUDE_ALL_OrgApacheCommonsIoFilefilterAndFileFilter || defined(INCLUDE_OrgApacheCommonsIoFilefilterAndFileFilter))
#define OrgApacheCommonsIoFilefilterAndFileFilter_

#define RESTRICT_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterAbstractFileFilter 1
#include "org/apache/commons/io/filefilter/AbstractFileFilter.h"

#define RESTRICT_OrgApacheCommonsIoFilefilterConditionalFileFilter 1
#define INCLUDE_OrgApacheCommonsIoFilefilterConditionalFileFilter 1
#include "org/apache/commons/io/filefilter/ConditionalFileFilter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoFile;
@protocol JavaUtilList;
@protocol OrgApacheCommonsIoFilefilterIOFileFilter;

/*!
 @brief A <code>java.io.FileFilter</code> providing conditional AND logic across a list of
  file filters.This filter returns <code>true</code> if all filters in the
  list return <code>true</code>.
 Otherwise, it returns <code>false</code>.
  Checking of the file filter list stops when the first filter returns 
 <code>false</code>.
 @since 1.0
 @version $Id$
 - seealso: FileFilterUtils#and(IOFileFilter...)
 */
@interface OrgApacheCommonsIoFilefilterAndFileFilter : OrgApacheCommonsIoFilefilterAbstractFileFilter < OrgApacheCommonsIoFilefilterConditionalFileFilter, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>AndFileFilter</code>.
 @since 1.1
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a new file filter that ANDs the result of two other filters.
 @param filter1 the first filter, must not be null
 @param filter2 the second filter, must not be null
 @throw IllegalArgumentExceptionif either filter is null
 */
- (instancetype __nonnull)initWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter1
                              withOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)filter2;

/*!
 @brief Constructs a new instance of <code>AndFileFilter</code>
  with the specified list of filters.
 @param fileFilters a List of IOFileFilter instances, copied, null ignored
 @since 1.1
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)fileFilters;

/*!
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

/*!
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name;

/*!
 */
- (void)addFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)ioFileFilter;

/*!
 */
- (id<JavaUtilList>)getFileFilters;

/*!
 */
- (jboolean)removeFileFilterWithOrgApacheCommonsIoFilefilterIOFileFilter:(id<OrgApacheCommonsIoFilefilterIOFileFilter>)ioFileFilter;

/*!
 */
- (void)setFileFiltersWithJavaUtilList:(id<JavaUtilList>)fileFilters;

/*!
 @brief Provide a String representaion of this file filter.
 @return a String representaion
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsIoFilefilterAndFileFilter)

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterAndFileFilter_init(OrgApacheCommonsIoFilefilterAndFileFilter *self);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(OrgApacheCommonsIoFilefilterAndFileFilter *self, id<JavaUtilList> fileFilters);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(id<JavaUtilList> fileFilters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_initWithJavaUtilList_(id<JavaUtilList> fileFilters);

FOUNDATION_EXPORT void OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(OrgApacheCommonsIoFilefilterAndFileFilter *self, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2);

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *new_OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsIoFilefilterAndFileFilter *create_OrgApacheCommonsIoFilefilterAndFileFilter_initWithOrgApacheCommonsIoFilefilterIOFileFilter_withOrgApacheCommonsIoFilefilterIOFileFilter_(id<OrgApacheCommonsIoFilefilterIOFileFilter> filter1, id<OrgApacheCommonsIoFilefilterIOFileFilter> filter2);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsIoFilefilterAndFileFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsIoFilefilterAndFileFilter")
